// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/nav.proto

#include "proto/nav.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace openfoxwq {
PROTOBUF_CONSTEXPR ListServersRequest::ListServersRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.player_id_)*/int64_t{0}} {}
struct ListServersRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListServersRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListServersRequestDefaultTypeInternal() {}
  union {
    ListServersRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListServersRequestDefaultTypeInternal _ListServersRequest_default_instance_;
PROTOBUF_CONSTEXPR ListServersResponse::ListServersResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.server_info_)*/nullptr} {}
struct ListServersResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListServersResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListServersResponseDefaultTypeInternal() {}
  union {
    ListServersResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListServersResponseDefaultTypeInternal _ListServersResponse_default_instance_;
PROTOBUF_CONSTEXPR LoginRequest::LoginRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.user_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.app_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.password_hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.unknown_field_7_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.unknown_field_4_)*/int64_t{0}
  , /*decltype(_impl_.client_version_)*/int64_t{0}} {}
struct LoginRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoginRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoginRequestDefaultTypeInternal() {}
  union {
    LoginRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;
PROTOBUF_CONSTEXPR LoginResponse::LoginResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.token1_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.token2_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bind_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.player_info_)*/nullptr
  , /*decltype(_impl_.extra_player_info_)*/nullptr
  , /*decltype(_impl_.player_id_)*/int64_t{0}} {}
struct LoginResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoginResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoginResponseDefaultTypeInternal() {}
  union {
    LoginResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoginResponseDefaultTypeInternal _LoginResponse_default_instance_;
}  // namespace openfoxwq
static ::_pb::Metadata file_level_metadata_proto_2fnav_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_proto_2fnav_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_proto_2fnav_2eproto = nullptr;

const uint32_t TableStruct_proto_2fnav_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::openfoxwq::ListServersRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::ListServersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openfoxwq::ListServersRequest, _impl_.player_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::openfoxwq::ListServersResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::ListServersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openfoxwq::ListServersResponse, _impl_.server_info_),
  0,
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LoginRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LoginRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LoginRequest, _impl_.user_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LoginRequest, _impl_.app_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LoginRequest, _impl_.password_hash_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LoginRequest, _impl_.client_version_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LoginRequest, _impl_.unknown_field_4_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LoginRequest, _impl_.unknown_field_7_),
  0,
  1,
  2,
  5,
  4,
  3,
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LoginResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LoginResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LoginResponse, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LoginResponse, _impl_.player_info_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LoginResponse, _impl_.extra_player_info_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LoginResponse, _impl_.token1_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LoginResponse, _impl_.token2_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LoginResponse, _impl_.bind_url_),
  5,
  3,
  4,
  0,
  1,
  2,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, -1, sizeof(::openfoxwq::ListServersRequest)},
  { 8, 15, -1, sizeof(::openfoxwq::ListServersResponse)},
  { 16, 28, -1, sizeof(::openfoxwq::LoginRequest)},
  { 34, 46, -1, sizeof(::openfoxwq::LoginResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::openfoxwq::_ListServersRequest_default_instance_._instance,
  &::openfoxwq::_ListServersResponse_default_instance_._instance,
  &::openfoxwq::_LoginRequest_default_instance_._instance,
  &::openfoxwq::_LoginResponse_default_instance_._instance,
};

const char descriptor_table_protodef_proto_2fnav_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017proto/nav.proto\022\topenfoxwq\032\025proto/reqO"
  "ption.proto\032\022proto/common.proto\"\'\n\022ListS"
  "erversRequest\022\021\n\tplayer_id\030\001 \002(\003\"C\n\023List"
  "ServersResponse\022,\n\013server_info\030\003 \002(\0132\027.o"
  "penfoxwq.LobbySvrInfo\"\212\001\n\014LoginRequest\022\014"
  "\n\004user\030\001 \002(\t\022\013\n\003app\030\002 \002(\t\022\025\n\rpassword_ha"
  "sh\030\003 \002(\t\022\026\n\016client_version\030\005 \002(\003\022\027\n\017unkn"
  "own_field_4\030\004 \001(\003\022\027\n\017unknown_field_7\030\007 \001"
  "(\t\"\267\001\n\rLoginResponse\022\021\n\tplayer_id\030\002 \002(\003\022"
  "*\n\013player_info\030\003 \002(\0132\025.openfoxwq.PlayerI"
  "nfo\0225\n\021extra_player_info\030\004 \002(\0132\032.openfox"
  "wq.ExtraPlayerInfo\022\016\n\006token1\030\010 \002(\t\022\016\n\006to"
  "ken2\030\n \002(\t\022\020\n\010bind_url\030\030 \002(\t2\256\001\n\nNavigat"
  "ion\022X\n\013ListServers\022\035.openfoxwq.ListServe"
  "rsRequest\032\036.openfoxwq.ListServersRespons"
  "e\"\n\202\265\030\006\010\270\027\020\275\027\022F\n\005Login\022\027.openfoxwq.Login"
  "Request\032\030.openfoxwq.LoginResponse\"\n\202\265\030\006\010"
  "\320\017\020\325\017B%Z#github.com/ale64bit/openfoxwq/p"
  "roto"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_proto_2fnav_2eproto_deps[2] = {
  &::descriptor_table_proto_2fcommon_2eproto,
  &::descriptor_table_proto_2freqOption_2eproto,
};
static ::_pbi::once_flag descriptor_table_proto_2fnav_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_proto_2fnav_2eproto = {
    false, false, 724, descriptor_table_protodef_proto_2fnav_2eproto,
    "proto/nav.proto",
    &descriptor_table_proto_2fnav_2eproto_once, descriptor_table_proto_2fnav_2eproto_deps, 2, 4,
    schemas, file_default_instances, TableStruct_proto_2fnav_2eproto::offsets,
    file_level_metadata_proto_2fnav_2eproto, file_level_enum_descriptors_proto_2fnav_2eproto,
    file_level_service_descriptors_proto_2fnav_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_proto_2fnav_2eproto_getter() {
  return &descriptor_table_proto_2fnav_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_proto_2fnav_2eproto(&descriptor_table_proto_2fnav_2eproto);
namespace openfoxwq {

// ===================================================================

class ListServersRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ListServersRequest>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ListServersRequest::ListServersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openfoxwq.ListServersRequest)
}
ListServersRequest::ListServersRequest(const ListServersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListServersRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.player_id_ = from._impl_.player_id_;
  // @@protoc_insertion_point(copy_constructor:openfoxwq.ListServersRequest)
}

inline void ListServersRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_id_){int64_t{0}}
  };
}

ListServersRequest::~ListServersRequest() {
  // @@protoc_insertion_point(destructor:openfoxwq.ListServersRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListServersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListServersRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListServersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:openfoxwq.ListServersRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_id_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListServersRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListServersRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openfoxwq.ListServersRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int64 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openfoxwq.ListServersRequest)
  return target;
}

size_t ListServersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openfoxwq.ListServersRequest)
  size_t total_size = 0;

  // required int64 player_id = 1;
  if (_internal_has_player_id()) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_player_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListServersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListServersRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListServersRequest::GetClassData() const { return &_class_data_; }


void ListServersRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListServersRequest*>(&to_msg);
  auto& from = static_cast<const ListServersRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openfoxwq.ListServersRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player_id()) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListServersRequest::CopyFrom(const ListServersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openfoxwq.ListServersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListServersRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ListServersRequest::InternalSwap(ListServersRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.player_id_, other->_impl_.player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListServersRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fnav_2eproto_getter, &descriptor_table_proto_2fnav_2eproto_once,
      file_level_metadata_proto_2fnav_2eproto[0]);
}

// ===================================================================

class ListServersResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ListServersResponse>()._impl_._has_bits_);
  static const ::openfoxwq::LobbySvrInfo& server_info(const ListServersResponse* msg);
  static void set_has_server_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::openfoxwq::LobbySvrInfo&
ListServersResponse::_Internal::server_info(const ListServersResponse* msg) {
  return *msg->_impl_.server_info_;
}
void ListServersResponse::clear_server_info() {
  if (_impl_.server_info_ != nullptr) _impl_.server_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ListServersResponse::ListServersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openfoxwq.ListServersResponse)
}
ListServersResponse::ListServersResponse(const ListServersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListServersResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.server_info_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_server_info()) {
    _this->_impl_.server_info_ = new ::openfoxwq::LobbySvrInfo(*from._impl_.server_info_);
  }
  // @@protoc_insertion_point(copy_constructor:openfoxwq.ListServersResponse)
}

inline void ListServersResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.server_info_){nullptr}
  };
}

ListServersResponse::~ListServersResponse() {
  // @@protoc_insertion_point(destructor:openfoxwq.ListServersResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListServersResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.server_info_;
}

void ListServersResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListServersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:openfoxwq.ListServersResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.server_info_ != nullptr);
    _impl_.server_info_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListServersResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .openfoxwq.LobbySvrInfo server_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_server_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListServersResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openfoxwq.ListServersResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .openfoxwq.LobbySvrInfo server_info = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::server_info(this),
        _Internal::server_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openfoxwq.ListServersResponse)
  return target;
}

size_t ListServersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openfoxwq.ListServersResponse)
  size_t total_size = 0;

  // required .openfoxwq.LobbySvrInfo server_info = 3;
  if (_internal_has_server_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.server_info_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListServersResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListServersResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListServersResponse::GetClassData() const { return &_class_data_; }


void ListServersResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListServersResponse*>(&to_msg);
  auto& from = static_cast<const ListServersResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openfoxwq.ListServersResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_server_info()) {
    _this->_internal_mutable_server_info()->::openfoxwq::LobbySvrInfo::MergeFrom(
        from._internal_server_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListServersResponse::CopyFrom(const ListServersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openfoxwq.ListServersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListServersResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ListServersResponse::InternalSwap(ListServersResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.server_info_, other->_impl_.server_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListServersResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fnav_2eproto_getter, &descriptor_table_proto_2fnav_2eproto_once,
      file_level_metadata_proto_2fnav_2eproto[1]);
}

// ===================================================================

class LoginRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<LoginRequest>()._impl_._has_bits_);
  static void set_has_user(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_app(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_password_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_unknown_field_4(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_unknown_field_7(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000027) ^ 0x00000027) != 0;
  }
};

LoginRequest::LoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openfoxwq.LoginRequest)
}
LoginRequest::LoginRequest(const LoginRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LoginRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_){}
    , decltype(_impl_.app_){}
    , decltype(_impl_.password_hash_){}
    , decltype(_impl_.unknown_field_7_){}
    , decltype(_impl_.unknown_field_4_){}
    , decltype(_impl_.client_version_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user()) {
    _this->_impl_.user_.Set(from._internal_user(), 
      _this->GetArenaForAllocation());
  }
  _impl_.app_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_app()) {
    _this->_impl_.app_.Set(from._internal_app(), 
      _this->GetArenaForAllocation());
  }
  _impl_.password_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_password_hash()) {
    _this->_impl_.password_hash_.Set(from._internal_password_hash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.unknown_field_7_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unknown_field_7_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_unknown_field_7()) {
    _this->_impl_.unknown_field_7_.Set(from._internal_unknown_field_7(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.unknown_field_4_, &from._impl_.unknown_field_4_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.client_version_) -
    reinterpret_cast<char*>(&_impl_.unknown_field_4_)) + sizeof(_impl_.client_version_));
  // @@protoc_insertion_point(copy_constructor:openfoxwq.LoginRequest)
}

inline void LoginRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_){}
    , decltype(_impl_.app_){}
    , decltype(_impl_.password_hash_){}
    , decltype(_impl_.unknown_field_7_){}
    , decltype(_impl_.unknown_field_4_){int64_t{0}}
    , decltype(_impl_.client_version_){int64_t{0}}
  };
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.app_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.unknown_field_7_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unknown_field_7_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LoginRequest::~LoginRequest() {
  // @@protoc_insertion_point(destructor:openfoxwq.LoginRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoginRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_.Destroy();
  _impl_.app_.Destroy();
  _impl_.password_hash_.Destroy();
  _impl_.unknown_field_7_.Destroy();
}

void LoginRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:openfoxwq.LoginRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.user_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.app_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.password_hash_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.unknown_field_7_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&_impl_.unknown_field_4_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.client_version_) -
        reinterpret_cast<char*>(&_impl_.unknown_field_4_)) + sizeof(_impl_.client_version_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "openfoxwq.LoginRequest.user");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string app = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_app();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "openfoxwq.LoginRequest.app");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string password_hash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_password_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "openfoxwq.LoginRequest.password_hash");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int64 unknown_field_4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_unknown_field_4(&has_bits);
          _impl_.unknown_field_4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 client_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_client_version(&has_bits);
          _impl_.client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string unknown_field_7 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_unknown_field_7();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "openfoxwq.LoginRequest.unknown_field_7");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoginRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openfoxwq.LoginRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string user = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user().data(), static_cast<int>(this->_internal_user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "openfoxwq.LoginRequest.user");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user(), target);
  }

  // required string app = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_app().data(), static_cast<int>(this->_internal_app().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "openfoxwq.LoginRequest.app");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_app(), target);
  }

  // required string password_hash = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_password_hash().data(), static_cast<int>(this->_internal_password_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "openfoxwq.LoginRequest.password_hash");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_password_hash(), target);
  }

  // optional int64 unknown_field_4 = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_unknown_field_4(), target);
  }

  // required int64 client_version = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_client_version(), target);
  }

  // optional string unknown_field_7 = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_unknown_field_7().data(), static_cast<int>(this->_internal_unknown_field_7().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "openfoxwq.LoginRequest.unknown_field_7");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_unknown_field_7(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openfoxwq.LoginRequest)
  return target;
}

size_t LoginRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:openfoxwq.LoginRequest)
  size_t total_size = 0;

  if (_internal_has_user()) {
    // required string user = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user());
  }

  if (_internal_has_app()) {
    // required string app = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app());
  }

  if (_internal_has_password_hash()) {
    // required string password_hash = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password_hash());
  }

  if (_internal_has_client_version()) {
    // required int64 client_version = 5;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_client_version());
  }

  return total_size;
}
size_t LoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openfoxwq.LoginRequest)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000027) ^ 0x00000027) == 0) {  // All required fields are present.
    // required string user = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user());

    // required string app = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app());

    // required string password_hash = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password_hash());

    // required int64 client_version = 5;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_client_version());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000018u) {
    // optional string unknown_field_7 = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_unknown_field_7());
    }

    // optional int64 unknown_field_4 = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_unknown_field_4());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoginRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LoginRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoginRequest::GetClassData() const { return &_class_data_; }


void LoginRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LoginRequest*>(&to_msg);
  auto& from = static_cast<const LoginRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openfoxwq.LoginRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_user(from._internal_user());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_app(from._internal_app());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_password_hash(from._internal_password_hash());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_unknown_field_7(from._internal_unknown_field_7());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.unknown_field_4_ = from._impl_.unknown_field_4_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.client_version_ = from._impl_.client_version_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openfoxwq.LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void LoginRequest::InternalSwap(LoginRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_, lhs_arena,
      &other->_impl_.user_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_, lhs_arena,
      &other->_impl_.app_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_hash_, lhs_arena,
      &other->_impl_.password_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.unknown_field_7_, lhs_arena,
      &other->_impl_.unknown_field_7_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoginRequest, _impl_.client_version_)
      + sizeof(LoginRequest::_impl_.client_version_)
      - PROTOBUF_FIELD_OFFSET(LoginRequest, _impl_.unknown_field_4_)>(
          reinterpret_cast<char*>(&_impl_.unknown_field_4_),
          reinterpret_cast<char*>(&other->_impl_.unknown_field_4_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fnav_2eproto_getter, &descriptor_table_proto_2fnav_2eproto_once,
      file_level_metadata_proto_2fnav_2eproto[2]);
}

// ===================================================================

class LoginResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<LoginResponse>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::openfoxwq::PlayerInfo& player_info(const LoginResponse* msg);
  static void set_has_player_info(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::openfoxwq::ExtraPlayerInfo& extra_player_info(const LoginResponse* msg);
  static void set_has_extra_player_info(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_token1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_token2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bind_url(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003f) ^ 0x0000003f) != 0;
  }
};

const ::openfoxwq::PlayerInfo&
LoginResponse::_Internal::player_info(const LoginResponse* msg) {
  return *msg->_impl_.player_info_;
}
const ::openfoxwq::ExtraPlayerInfo&
LoginResponse::_Internal::extra_player_info(const LoginResponse* msg) {
  return *msg->_impl_.extra_player_info_;
}
void LoginResponse::clear_player_info() {
  if (_impl_.player_info_ != nullptr) _impl_.player_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void LoginResponse::clear_extra_player_info() {
  if (_impl_.extra_player_info_ != nullptr) _impl_.extra_player_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
LoginResponse::LoginResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openfoxwq.LoginResponse)
}
LoginResponse::LoginResponse(const LoginResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LoginResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.token1_){}
    , decltype(_impl_.token2_){}
    , decltype(_impl_.bind_url_){}
    , decltype(_impl_.player_info_){nullptr}
    , decltype(_impl_.extra_player_info_){nullptr}
    , decltype(_impl_.player_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.token1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_token1()) {
    _this->_impl_.token1_.Set(from._internal_token1(), 
      _this->GetArenaForAllocation());
  }
  _impl_.token2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_token2()) {
    _this->_impl_.token2_.Set(from._internal_token2(), 
      _this->GetArenaForAllocation());
  }
  _impl_.bind_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bind_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_bind_url()) {
    _this->_impl_.bind_url_.Set(from._internal_bind_url(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_player_info()) {
    _this->_impl_.player_info_ = new ::openfoxwq::PlayerInfo(*from._impl_.player_info_);
  }
  if (from._internal_has_extra_player_info()) {
    _this->_impl_.extra_player_info_ = new ::openfoxwq::ExtraPlayerInfo(*from._impl_.extra_player_info_);
  }
  _this->_impl_.player_id_ = from._impl_.player_id_;
  // @@protoc_insertion_point(copy_constructor:openfoxwq.LoginResponse)
}

inline void LoginResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.token1_){}
    , decltype(_impl_.token2_){}
    , decltype(_impl_.bind_url_){}
    , decltype(_impl_.player_info_){nullptr}
    , decltype(_impl_.extra_player_info_){nullptr}
    , decltype(_impl_.player_id_){int64_t{0}}
  };
  _impl_.token1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.token2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bind_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bind_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LoginResponse::~LoginResponse() {
  // @@protoc_insertion_point(destructor:openfoxwq.LoginResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoginResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.token1_.Destroy();
  _impl_.token2_.Destroy();
  _impl_.bind_url_.Destroy();
  if (this != internal_default_instance()) delete _impl_.player_info_;
  if (this != internal_default_instance()) delete _impl_.extra_player_info_;
}

void LoginResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:openfoxwq.LoginResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.token1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.token2_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.bind_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.player_info_ != nullptr);
      _impl_.player_info_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.extra_player_info_ != nullptr);
      _impl_.extra_player_info_->Clear();
    }
  }
  _impl_.player_id_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .openfoxwq.PlayerInfo player_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .openfoxwq.ExtraPlayerInfo extra_player_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_extra_player_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string token1 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_token1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "openfoxwq.LoginResponse.token1");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string token2 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_token2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "openfoxwq.LoginResponse.token2");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string bind_url = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          auto str = _internal_mutable_bind_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "openfoxwq.LoginResponse.bind_url");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoginResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openfoxwq.LoginResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int64 player_id = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_player_id(), target);
  }

  // required .openfoxwq.PlayerInfo player_info = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::player_info(this),
        _Internal::player_info(this).GetCachedSize(), target, stream);
  }

  // required .openfoxwq.ExtraPlayerInfo extra_player_info = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::extra_player_info(this),
        _Internal::extra_player_info(this).GetCachedSize(), target, stream);
  }

  // required string token1 = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_token1().data(), static_cast<int>(this->_internal_token1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "openfoxwq.LoginResponse.token1");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_token1(), target);
  }

  // required string token2 = 10;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_token2().data(), static_cast<int>(this->_internal_token2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "openfoxwq.LoginResponse.token2");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_token2(), target);
  }

  // required string bind_url = 24;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_bind_url().data(), static_cast<int>(this->_internal_bind_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "openfoxwq.LoginResponse.bind_url");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_bind_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openfoxwq.LoginResponse)
  return target;
}

size_t LoginResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:openfoxwq.LoginResponse)
  size_t total_size = 0;

  if (_internal_has_token1()) {
    // required string token1 = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token1());
  }

  if (_internal_has_token2()) {
    // required string token2 = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token2());
  }

  if (_internal_has_bind_url()) {
    // required string bind_url = 24;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bind_url());
  }

  if (_internal_has_player_info()) {
    // required .openfoxwq.PlayerInfo player_info = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_info_);
  }

  if (_internal_has_extra_player_info()) {
    // required .openfoxwq.ExtraPlayerInfo extra_player_info = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.extra_player_info_);
  }

  if (_internal_has_player_id()) {
    // required int64 player_id = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_player_id());
  }

  return total_size;
}
size_t LoginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openfoxwq.LoginResponse)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string token1 = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token1());

    // required string token2 = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token2());

    // required string bind_url = 24;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bind_url());

    // required .openfoxwq.PlayerInfo player_info = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_info_);

    // required .openfoxwq.ExtraPlayerInfo extra_player_info = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.extra_player_info_);

    // required int64 player_id = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_player_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoginResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LoginResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoginResponse::GetClassData() const { return &_class_data_; }


void LoginResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LoginResponse*>(&to_msg);
  auto& from = static_cast<const LoginResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openfoxwq.LoginResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_token1(from._internal_token1());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_token2(from._internal_token2());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_bind_url(from._internal_bind_url());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_player_info()->::openfoxwq::PlayerInfo::MergeFrom(
          from._internal_player_info());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_extra_player_info()->::openfoxwq::ExtraPlayerInfo::MergeFrom(
          from._internal_extra_player_info());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoginResponse::CopyFrom(const LoginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openfoxwq.LoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_player_info()) {
    if (!_impl_.player_info_->IsInitialized()) return false;
  }
  if (_internal_has_extra_player_info()) {
    if (!_impl_.extra_player_info_->IsInitialized()) return false;
  }
  return true;
}

void LoginResponse::InternalSwap(LoginResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token1_, lhs_arena,
      &other->_impl_.token1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token2_, lhs_arena,
      &other->_impl_.token2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bind_url_, lhs_arena,
      &other->_impl_.bind_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoginResponse, _impl_.player_id_)
      + sizeof(LoginResponse::_impl_.player_id_)
      - PROTOBUF_FIELD_OFFSET(LoginResponse, _impl_.player_info_)>(
          reinterpret_cast<char*>(&_impl_.player_info_),
          reinterpret_cast<char*>(&other->_impl_.player_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fnav_2eproto_getter, &descriptor_table_proto_2fnav_2eproto_once,
      file_level_metadata_proto_2fnav_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace openfoxwq
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::openfoxwq::ListServersRequest*
Arena::CreateMaybeMessage< ::openfoxwq::ListServersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openfoxwq::ListServersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::openfoxwq::ListServersResponse*
Arena::CreateMaybeMessage< ::openfoxwq::ListServersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openfoxwq::ListServersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::openfoxwq::LoginRequest*
Arena::CreateMaybeMessage< ::openfoxwq::LoginRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openfoxwq::LoginRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::openfoxwq::LoginResponse*
Arena::CreateMaybeMessage< ::openfoxwq::LoginResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openfoxwq::LoginResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
