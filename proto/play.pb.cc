// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/play.proto

#include "proto/play.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace openfoxwq {
PROTOBUF_CONSTEXPR LoginPlayServerRequest::LoginPlayServerRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct LoginPlayServerRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoginPlayServerRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoginPlayServerRequestDefaultTypeInternal() {}
  union {
    LoginPlayServerRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoginPlayServerRequestDefaultTypeInternal _LoginPlayServerRequest_default_instance_;
PROTOBUF_CONSTEXPR LoginPlayServerResponse::LoginPlayServerResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.unknown_field_1_)*/int64_t{0}
  , /*decltype(_impl_.unknown_field_2_)*/int64_t{0}
  , /*decltype(_impl_.unknown_field_3_)*/int64_t{0}
  , /*decltype(_impl_.unknown_field_4_)*/int64_t{0}} {}
struct LoginPlayServerResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoginPlayServerResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoginPlayServerResponseDefaultTypeInternal() {}
  union {
    LoginPlayServerResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoginPlayServerResponseDefaultTypeInternal _LoginPlayServerResponse_default_instance_;
PROTOBUF_CONSTEXPR ListPlayersRequest::ListPlayersRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.unknown_field_1_)*/int64_t{0}} {}
struct ListPlayersRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListPlayersRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListPlayersRequestDefaultTypeInternal() {}
  union {
    ListPlayersRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListPlayersRequestDefaultTypeInternal _ListPlayersRequest_default_instance_;
PROTOBUF_CONSTEXPR ListPlayersResponse::ListPlayersResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.players_)*/{}
  , /*decltype(_impl_.unknown_field_1_)*/int64_t{0}
  , /*decltype(_impl_.page_index_)*/int64_t{0}
  , /*decltype(_impl_.page_count_)*/int64_t{0}
  , /*decltype(_impl_.unknown_field_5_)*/int64_t{0}
  , /*decltype(_impl_.unknown_field_6_)*/int64_t{0}} {}
struct ListPlayersResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListPlayersResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListPlayersResponseDefaultTypeInternal() {}
  union {
    ListPlayersResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListPlayersResponseDefaultTypeInternal _ListPlayersResponse_default_instance_;
PROTOBUF_CONSTEXPR GetPlayerInfoRequest::GetPlayerInfoRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.info_options_)*/nullptr
  , /*decltype(_impl_.player_id_)*/int64_t{0}} {}
struct GetPlayerInfoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetPlayerInfoRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetPlayerInfoRequestDefaultTypeInternal() {}
  union {
    GetPlayerInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetPlayerInfoRequestDefaultTypeInternal _GetPlayerInfoRequest_default_instance_;
PROTOBUF_CONSTEXPR GetPlayerInfoResponse_RegisterInfo::GetPlayerInfoResponse_RegisterInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_native_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.player_id_)*/int64_t{0}
  , /*decltype(_impl_.unknown_field_2_)*/int64_t{0}
  , /*decltype(_impl_.unknown_field_3_)*/int64_t{0}
  , /*decltype(_impl_.unknown_field_7_)*/int64_t{0}
  , /*decltype(_impl_.member_since_unix_ts_)*/int64_t{0}} {}
struct GetPlayerInfoResponse_RegisterInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetPlayerInfoResponse_RegisterInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetPlayerInfoResponse_RegisterInfoDefaultTypeInternal() {}
  union {
    GetPlayerInfoResponse_RegisterInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetPlayerInfoResponse_RegisterInfoDefaultTypeInternal _GetPlayerInfoResponse_RegisterInfo_default_instance_;
PROTOBUF_CONSTEXPR GetPlayerInfoResponse::GetPlayerInfoResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.game_results_)*/{}
  , /*decltype(_impl_.info_options_)*/nullptr
  , /*decltype(_impl_.register_info_)*/nullptr
  , /*decltype(_impl_.player_id_)*/int64_t{0}
  , /*decltype(_impl_.player_id_again_)*/int64_t{0}} {}
struct GetPlayerInfoResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetPlayerInfoResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetPlayerInfoResponseDefaultTypeInternal() {}
  union {
    GetPlayerInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetPlayerInfoResponseDefaultTypeInternal _GetPlayerInfoResponse_default_instance_;
PROTOBUF_CONSTEXPR InfoOptions::InfoOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.unknown_field_1_)*/int64_t{0}
  , /*decltype(_impl_.unknown_field_2_)*/int64_t{0}} {}
struct InfoOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InfoOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InfoOptionsDefaultTypeInternal() {}
  union {
    InfoOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InfoOptionsDefaultTypeInternal _InfoOptions_default_instance_;
PROTOBUF_CONSTEXPR SyncTimeRequest::SyncTimeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.unix_ts_)*/int64_t{0}} {}
struct SyncTimeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncTimeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncTimeRequestDefaultTypeInternal() {}
  union {
    SyncTimeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncTimeRequestDefaultTypeInternal _SyncTimeRequest_default_instance_;
PROTOBUF_CONSTEXPR SyncTimeResponse::SyncTimeResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.unix_ts_)*/int64_t{0}
  , /*decltype(_impl_.unix_ts_us_)*/int64_t{0}} {}
struct SyncTimeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncTimeResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncTimeResponseDefaultTypeInternal() {}
  union {
    SyncTimeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncTimeResponseDefaultTypeInternal _SyncTimeResponse_default_instance_;
PROTOBUF_CONSTEXPR SyncPlayersRequest::SyncPlayersRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.unknown_field_1_)*/int64_t{0}} {}
struct SyncPlayersRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncPlayersRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncPlayersRequestDefaultTypeInternal() {}
  union {
    SyncPlayersRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncPlayersRequestDefaultTypeInternal _SyncPlayersRequest_default_instance_;
PROTOBUF_CONSTEXPR SyncPlayersResponse::SyncPlayersResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.unknown_field_1_)*/int64_t{0}
  , /*decltype(_impl_.unknown_field_2_)*/int64_t{0}} {}
struct SyncPlayersResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncPlayersResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncPlayersResponseDefaultTypeInternal() {}
  union {
    SyncPlayersResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncPlayersResponseDefaultTypeInternal _SyncPlayersResponse_default_instance_;
PROTOBUF_CONSTEXPR PlayerStateEvent::PlayerStateEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.player_info_)*/nullptr
  , /*decltype(_impl_.online_count_)*/int64_t{0}
  , /*decltype(_impl_.unknown_field_3_)*/int64_t{0}} {}
struct PlayerStateEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerStateEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerStateEventDefaultTypeInternal() {}
  union {
    PlayerStateEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerStateEventDefaultTypeInternal _PlayerStateEvent_default_instance_;
PROTOBUF_CONSTEXPR UnknownPlayerEvent1::UnknownPlayerEvent1(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.player_id_)*/int64_t{0}
  , /*decltype(_impl_.online_count_)*/int64_t{0}
  , /*decltype(_impl_.unknown_field_3_)*/int64_t{0}} {}
struct UnknownPlayerEvent1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnknownPlayerEvent1DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnknownPlayerEvent1DefaultTypeInternal() {}
  union {
    UnknownPlayerEvent1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnknownPlayerEvent1DefaultTypeInternal _UnknownPlayerEvent1_default_instance_;
PROTOBUF_CONSTEXPR UnknownPlayRequest1_UnknownPlayRequest1Nested1::UnknownPlayRequest1_UnknownPlayRequest1Nested1(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.unknown_field_1_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct UnknownPlayRequest1_UnknownPlayRequest1Nested1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnknownPlayRequest1_UnknownPlayRequest1Nested1DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnknownPlayRequest1_UnknownPlayRequest1Nested1DefaultTypeInternal() {}
  union {
    UnknownPlayRequest1_UnknownPlayRequest1Nested1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnknownPlayRequest1_UnknownPlayRequest1Nested1DefaultTypeInternal _UnknownPlayRequest1_UnknownPlayRequest1Nested1_default_instance_;
PROTOBUF_CONSTEXPR UnknownPlayRequest1::UnknownPlayRequest1(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.unknown_field_1_)*/nullptr
  , /*decltype(_impl_.unknown_field_2_)*/int64_t{0}} {}
struct UnknownPlayRequest1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnknownPlayRequest1DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnknownPlayRequest1DefaultTypeInternal() {}
  union {
    UnknownPlayRequest1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnknownPlayRequest1DefaultTypeInternal _UnknownPlayRequest1_default_instance_;
PROTOBUF_CONSTEXPR UnknownPlayResponse1::UnknownPlayResponse1(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.unknown_field_1_)*/int64_t{0}} {}
struct UnknownPlayResponse1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnknownPlayResponse1DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnknownPlayResponse1DefaultTypeInternal() {}
  union {
    UnknownPlayResponse1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnknownPlayResponse1DefaultTypeInternal _UnknownPlayResponse1_default_instance_;
}  // namespace openfoxwq
static ::_pb::Metadata file_level_metadata_proto_2fplay_2eproto[17];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_proto_2fplay_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_proto_2fplay_2eproto = nullptr;

const uint32_t TableStruct_proto_2fplay_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LoginPlayServerRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LoginPlayServerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LoginPlayServerRequest, _impl_.token_),
  0,
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LoginPlayServerResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LoginPlayServerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LoginPlayServerResponse, _impl_.unknown_field_1_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LoginPlayServerResponse, _impl_.unknown_field_2_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LoginPlayServerResponse, _impl_.unknown_field_3_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LoginPlayServerResponse, _impl_.unknown_field_4_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::openfoxwq::ListPlayersRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::ListPlayersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openfoxwq::ListPlayersRequest, _impl_.unknown_field_1_),
  0,
  PROTOBUF_FIELD_OFFSET(::openfoxwq::ListPlayersResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::ListPlayersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openfoxwq::ListPlayersResponse, _impl_.players_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::ListPlayersResponse, _impl_.page_index_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::ListPlayersResponse, _impl_.page_count_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::ListPlayersResponse, _impl_.unknown_field_1_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::ListPlayersResponse, _impl_.unknown_field_5_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::ListPlayersResponse, _impl_.unknown_field_6_),
  ~0u,
  1,
  2,
  0,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::openfoxwq::GetPlayerInfoRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::GetPlayerInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openfoxwq::GetPlayerInfoRequest, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::GetPlayerInfoRequest, _impl_.info_options_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::openfoxwq::GetPlayerInfoResponse_RegisterInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::GetPlayerInfoResponse_RegisterInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openfoxwq::GetPlayerInfoResponse_RegisterInfo, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::GetPlayerInfoResponse_RegisterInfo, _impl_.name_native_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::GetPlayerInfoResponse_RegisterInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::GetPlayerInfoResponse_RegisterInfo, _impl_.member_since_unix_ts_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::GetPlayerInfoResponse_RegisterInfo, _impl_.unknown_field_2_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::GetPlayerInfoResponse_RegisterInfo, _impl_.unknown_field_3_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::GetPlayerInfoResponse_RegisterInfo, _impl_.unknown_field_7_),
  2,
  0,
  1,
  6,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::openfoxwq::GetPlayerInfoResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::GetPlayerInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openfoxwq::GetPlayerInfoResponse, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::GetPlayerInfoResponse, _impl_.info_options_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::GetPlayerInfoResponse, _impl_.player_id_again_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::GetPlayerInfoResponse, _impl_.register_info_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::GetPlayerInfoResponse, _impl_.game_results_),
  2,
  0,
  3,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::openfoxwq::InfoOptions, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::InfoOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openfoxwq::InfoOptions, _impl_.unknown_field_1_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::InfoOptions, _impl_.unknown_field_2_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::openfoxwq::SyncTimeRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::SyncTimeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openfoxwq::SyncTimeRequest, _impl_.unix_ts_),
  0,
  PROTOBUF_FIELD_OFFSET(::openfoxwq::SyncTimeResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::SyncTimeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openfoxwq::SyncTimeResponse, _impl_.unix_ts_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::SyncTimeResponse, _impl_.unix_ts_us_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::openfoxwq::SyncPlayersRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::SyncPlayersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openfoxwq::SyncPlayersRequest, _impl_.unknown_field_1_),
  0,
  PROTOBUF_FIELD_OFFSET(::openfoxwq::SyncPlayersResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::SyncPlayersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openfoxwq::SyncPlayersResponse, _impl_.unknown_field_1_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::SyncPlayersResponse, _impl_.unknown_field_2_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::openfoxwq::PlayerStateEvent, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::PlayerStateEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openfoxwq::PlayerStateEvent, _impl_.player_info_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::PlayerStateEvent, _impl_.online_count_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::PlayerStateEvent, _impl_.unknown_field_3_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::openfoxwq::UnknownPlayerEvent1, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::UnknownPlayerEvent1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openfoxwq::UnknownPlayerEvent1, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::UnknownPlayerEvent1, _impl_.online_count_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::UnknownPlayerEvent1, _impl_.unknown_field_3_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::openfoxwq::UnknownPlayRequest1_UnknownPlayRequest1Nested1, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::UnknownPlayRequest1_UnknownPlayRequest1Nested1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openfoxwq::UnknownPlayRequest1_UnknownPlayRequest1Nested1, _impl_.unknown_field_1_),
  0,
  PROTOBUF_FIELD_OFFSET(::openfoxwq::UnknownPlayRequest1, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::UnknownPlayRequest1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openfoxwq::UnknownPlayRequest1, _impl_.unknown_field_1_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::UnknownPlayRequest1, _impl_.unknown_field_2_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::openfoxwq::UnknownPlayResponse1, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::UnknownPlayResponse1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openfoxwq::UnknownPlayResponse1, _impl_.unknown_field_1_),
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, -1, sizeof(::openfoxwq::LoginPlayServerRequest)},
  { 8, 18, -1, sizeof(::openfoxwq::LoginPlayServerResponse)},
  { 22, 29, -1, sizeof(::openfoxwq::ListPlayersRequest)},
  { 30, 42, -1, sizeof(::openfoxwq::ListPlayersResponse)},
  { 48, 56, -1, sizeof(::openfoxwq::GetPlayerInfoRequest)},
  { 58, 71, -1, sizeof(::openfoxwq::GetPlayerInfoResponse_RegisterInfo)},
  { 78, 89, -1, sizeof(::openfoxwq::GetPlayerInfoResponse)},
  { 94, 102, -1, sizeof(::openfoxwq::InfoOptions)},
  { 104, 111, -1, sizeof(::openfoxwq::SyncTimeRequest)},
  { 112, 120, -1, sizeof(::openfoxwq::SyncTimeResponse)},
  { 122, 129, -1, sizeof(::openfoxwq::SyncPlayersRequest)},
  { 130, 138, -1, sizeof(::openfoxwq::SyncPlayersResponse)},
  { 140, 149, -1, sizeof(::openfoxwq::PlayerStateEvent)},
  { 152, 161, -1, sizeof(::openfoxwq::UnknownPlayerEvent1)},
  { 164, 171, -1, sizeof(::openfoxwq::UnknownPlayRequest1_UnknownPlayRequest1Nested1)},
  { 172, 180, -1, sizeof(::openfoxwq::UnknownPlayRequest1)},
  { 182, 189, -1, sizeof(::openfoxwq::UnknownPlayResponse1)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::openfoxwq::_LoginPlayServerRequest_default_instance_._instance,
  &::openfoxwq::_LoginPlayServerResponse_default_instance_._instance,
  &::openfoxwq::_ListPlayersRequest_default_instance_._instance,
  &::openfoxwq::_ListPlayersResponse_default_instance_._instance,
  &::openfoxwq::_GetPlayerInfoRequest_default_instance_._instance,
  &::openfoxwq::_GetPlayerInfoResponse_RegisterInfo_default_instance_._instance,
  &::openfoxwq::_GetPlayerInfoResponse_default_instance_._instance,
  &::openfoxwq::_InfoOptions_default_instance_._instance,
  &::openfoxwq::_SyncTimeRequest_default_instance_._instance,
  &::openfoxwq::_SyncTimeResponse_default_instance_._instance,
  &::openfoxwq::_SyncPlayersRequest_default_instance_._instance,
  &::openfoxwq::_SyncPlayersResponse_default_instance_._instance,
  &::openfoxwq::_PlayerStateEvent_default_instance_._instance,
  &::openfoxwq::_UnknownPlayerEvent1_default_instance_._instance,
  &::openfoxwq::_UnknownPlayRequest1_UnknownPlayRequest1Nested1_default_instance_._instance,
  &::openfoxwq::_UnknownPlayRequest1_default_instance_._instance,
  &::openfoxwq::_UnknownPlayResponse1_default_instance_._instance,
};

const char descriptor_table_protodef_proto_2fplay_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020proto/play.proto\022\topenfoxwq\032\033google/pr"
  "otobuf/empty.proto\032\025proto/reqOption.prot"
  "o\032\022proto/common.proto\"\'\n\026LoginPlayServer"
  "Request\022\r\n\005token\030\001 \002(\t\"}\n\027LoginPlayServe"
  "rResponse\022\027\n\017unknown_field_1\030\001 \001(\003\022\027\n\017un"
  "known_field_2\030\002 \001(\003\022\027\n\017unknown_field_3\030\003"
  " \001(\003\022\027\n\017unknown_field_4\030\004 \001(\003\"-\n\022ListPla"
  "yersRequest\022\027\n\017unknown_field_1\030\001 \002(\003\"\260\001\n"
  "\023ListPlayersResponse\022&\n\007players\030\002 \003(\0132\025."
  "openfoxwq.PlayerInfo\022\022\n\npage_index\030\003 \002(\003"
  "\022\022\n\npage_count\030\004 \002(\003\022\027\n\017unknown_field_1\030"
  "\001 \001(\003\022\027\n\017unknown_field_5\030\005 \001(\003\022\027\n\017unknow"
  "n_field_6\030\006 \001(\003\"W\n\024GetPlayerInfoRequest\022"
  "\021\n\tplayer_id\030\001 \002(\003\022,\n\014info_options\030\003 \002(\013"
  "2\026.openfoxwq.InfoOptions\"\235\003\n\025GetPlayerIn"
  "foResponse\022\021\n\tplayer_id\030\003 \002(\003\022,\n\014info_op"
  "tions\030\002 \002(\0132\026.openfoxwq.InfoOptions\022\027\n\017p"
  "layer_id_again\030\005 \002(\003\022D\n\rregister_info\030\010 "
  "\001(\0132-.openfoxwq.GetPlayerInfoResponse.Re"
  "gisterInfo\0224\n\014game_results\030\020 \003(\0132\036.openf"
  "oxwq.ExtendedGameResults\032\255\001\n\014RegisterInf"
  "o\022\021\n\tplayer_id\030\001 \002(\003\022\023\n\013name_native\030\004 \002("
  "\t\022\014\n\004name\030\005 \002(\t\022\034\n\024member_since_unix_ts\030"
  "\010 \002(\003\022\027\n\017unknown_field_2\030\002 \002(\003\022\027\n\017unknow"
  "n_field_3\030\003 \002(\003\022\027\n\017unknown_field_7\030\007 \002(\003"
  "\"\?\n\013InfoOptions\022\027\n\017unknown_field_1\030\001 \002(\003"
  "\022\027\n\017unknown_field_2\030\002 \001(\003\"\"\n\017SyncTimeReq"
  "uest\022\017\n\007unix_ts\030\001 \002(\003\"7\n\020SyncTimeRespons"
  "e\022\017\n\007unix_ts\030\001 \002(\003\022\022\n\nunix_ts_us\030\002 \002(\003\"-"
  "\n\022SyncPlayersRequest\022\027\n\017unknown_field_1\030"
  "\001 \002(\003\"G\n\023SyncPlayersResponse\022\027\n\017unknown_"
  "field_1\030\001 \002(\003\022\027\n\017unknown_field_2\030\002 \002(\003\"m"
  "\n\020PlayerStateEvent\022*\n\013player_info\030\001 \002(\0132"
  "\025.openfoxwq.PlayerInfo\022\024\n\014online_count\030\002"
  " \002(\003\022\027\n\017unknown_field_3\030\003 \001(\003\"W\n\023Unknown"
  "PlayerEvent1\022\021\n\tplayer_id\030\001 \002(\003\022\024\n\014onlin"
  "e_count\030\002 \002(\003\022\027\n\017unknown_field_3\030\003 \001(\003\"\271"
  "\001\n\023UnknownPlayRequest1\022R\n\017unknown_field_"
  "1\030\001 \002(\01329.openfoxwq.UnknownPlayRequest1."
  "UnknownPlayRequest1Nested1\022\027\n\017unknown_fi"
  "eld_2\030\002 \002(\003\0325\n\032UnknownPlayRequest1Nested"
  "1\022\027\n\017unknown_field_1\030\001 \002(\t\"/\n\024UnknownPla"
  "yResponse1\022\027\n\017unknown_field_1\030\001 \001(\0032\327\006\n\004"
  "Play\022h\n\005Login\022!.openfoxwq.LoginPlayServe"
  "rRequest\032\".openfoxwq.LoginPlayServerResp"
  "onse\"\030\202\265\030\024\010\330\314\001\020\330\314\001\032\n\010\001( 0\0068\241\234\001\022i\n\013ListPl"
  "ayers\022\035.openfoxwq.ListPlayersRequest\032\036.o"
  "penfoxwq.ListPlayersResponse\"\031\202\265\030\025\010\330\314\001\020\330"
  "\314\001\032\013\010\311\001( 0\0068\316\234\0010\001\022m\n\rGetPlayerInfo\022\037.ope"
  "nfoxwq.GetPlayerInfoRequest\032 .openfoxwq."
  "GetPlayerInfoResponse\"\031\202\265\030\025\010\330\314\001\020\330\314\001\032\013\010\351\007"
  "( 0\0068\313\234\001\022a\n\010SyncTime\022\032.openfoxwq.SyncTim"
  "eRequest\032\033.openfoxwq.SyncTimeResponse\"\034\202"
  "\265\030\030\010\330\314\001\020\330\314\001\032\016\010\005( 0\0068\241\234\001@\013H\001\022i\n\013SyncPlaye"
  "rs\022\035.openfoxwq.SyncPlayersRequest\032\036.open"
  "foxwq.SyncPlayersResponse\"\033\202\265\030\027\010\330\314\001\020\330\314\001\032"
  "\r\010\313\001( 0\0068\316\234\001@\003\022f\n\026ListenPlayerStateEvent"
  "\022\026.google.protobuf.Empty\032\033.openfoxwq.Pla"
  "yerStateEvent\"\025\202\265\030\021\010\330\314\001\020\330\314\001\032\007\010\224\0038\316\234\0010\001\022l"
  "\n\031ListenUnknownPlayerEvent1\022\026.google.pro"
  "tobuf.Empty\032\036.openfoxwq.UnknownPlayerEve"
  "nt1\"\025\202\265\030\021\010\330\314\001\020\330\314\001\032\007\010\223\0038\316\234\0010\001\022g\n\010Unknown1"
  "\022\036.openfoxwq.UnknownPlayRequest1\032\037.openf"
  "oxwq.UnknownPlayResponse1\"\032\202\265\030\026\010\330\314\001\020\330\314\001\032"
  "\014\010\002( 0\0068\340\352\001@\001B%Z#github.com/ale64bit/ope"
  "nfoxwq/proto"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_proto_2fplay_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_proto_2fcommon_2eproto,
  &::descriptor_table_proto_2freqOption_2eproto,
};
static ::_pbi::once_flag descriptor_table_proto_2fplay_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_proto_2fplay_2eproto = {
    false, false, 2612, descriptor_table_protodef_proto_2fplay_2eproto,
    "proto/play.proto",
    &descriptor_table_proto_2fplay_2eproto_once, descriptor_table_proto_2fplay_2eproto_deps, 3, 17,
    schemas, file_default_instances, TableStruct_proto_2fplay_2eproto::offsets,
    file_level_metadata_proto_2fplay_2eproto, file_level_enum_descriptors_proto_2fplay_2eproto,
    file_level_service_descriptors_proto_2fplay_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_proto_2fplay_2eproto_getter() {
  return &descriptor_table_proto_2fplay_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_proto_2fplay_2eproto(&descriptor_table_proto_2fplay_2eproto);
namespace openfoxwq {

// ===================================================================

class LoginPlayServerRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<LoginPlayServerRequest>()._impl_._has_bits_);
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

LoginPlayServerRequest::LoginPlayServerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openfoxwq.LoginPlayServerRequest)
}
LoginPlayServerRequest::LoginPlayServerRequest(const LoginPlayServerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LoginPlayServerRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.token_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_token()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:openfoxwq.LoginPlayServerRequest)
}

inline void LoginPlayServerRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.token_){}
  };
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LoginPlayServerRequest::~LoginPlayServerRequest() {
  // @@protoc_insertion_point(destructor:openfoxwq.LoginPlayServerRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoginPlayServerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.token_.Destroy();
}

void LoginPlayServerRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoginPlayServerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:openfoxwq.LoginPlayServerRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.token_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginPlayServerRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "openfoxwq.LoginPlayServerRequest.token");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoginPlayServerRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openfoxwq.LoginPlayServerRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string token = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "openfoxwq.LoginPlayServerRequest.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openfoxwq.LoginPlayServerRequest)
  return target;
}

size_t LoginPlayServerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openfoxwq.LoginPlayServerRequest)
  size_t total_size = 0;

  // required string token = 1;
  if (_internal_has_token()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoginPlayServerRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LoginPlayServerRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoginPlayServerRequest::GetClassData() const { return &_class_data_; }


void LoginPlayServerRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LoginPlayServerRequest*>(&to_msg);
  auto& from = static_cast<const LoginPlayServerRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openfoxwq.LoginPlayServerRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_token()) {
    _this->_internal_set_token(from._internal_token());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoginPlayServerRequest::CopyFrom(const LoginPlayServerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openfoxwq.LoginPlayServerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginPlayServerRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void LoginPlayServerRequest::InternalSwap(LoginPlayServerRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginPlayServerRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fplay_2eproto_getter, &descriptor_table_proto_2fplay_2eproto_once,
      file_level_metadata_proto_2fplay_2eproto[0]);
}

// ===================================================================

class LoginPlayServerResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<LoginPlayServerResponse>()._impl_._has_bits_);
  static void set_has_unknown_field_1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_unknown_field_2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_unknown_field_3(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_unknown_field_4(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

LoginPlayServerResponse::LoginPlayServerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openfoxwq.LoginPlayServerResponse)
}
LoginPlayServerResponse::LoginPlayServerResponse(const LoginPlayServerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LoginPlayServerResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unknown_field_1_){}
    , decltype(_impl_.unknown_field_2_){}
    , decltype(_impl_.unknown_field_3_){}
    , decltype(_impl_.unknown_field_4_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.unknown_field_1_, &from._impl_.unknown_field_1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.unknown_field_4_) -
    reinterpret_cast<char*>(&_impl_.unknown_field_1_)) + sizeof(_impl_.unknown_field_4_));
  // @@protoc_insertion_point(copy_constructor:openfoxwq.LoginPlayServerResponse)
}

inline void LoginPlayServerResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unknown_field_1_){int64_t{0}}
    , decltype(_impl_.unknown_field_2_){int64_t{0}}
    , decltype(_impl_.unknown_field_3_){int64_t{0}}
    , decltype(_impl_.unknown_field_4_){int64_t{0}}
  };
}

LoginPlayServerResponse::~LoginPlayServerResponse() {
  // @@protoc_insertion_point(destructor:openfoxwq.LoginPlayServerResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoginPlayServerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LoginPlayServerResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoginPlayServerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:openfoxwq.LoginPlayServerResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.unknown_field_1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.unknown_field_4_) -
        reinterpret_cast<char*>(&_impl_.unknown_field_1_)) + sizeof(_impl_.unknown_field_4_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginPlayServerResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 unknown_field_1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_unknown_field_1(&has_bits);
          _impl_.unknown_field_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 unknown_field_2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_unknown_field_2(&has_bits);
          _impl_.unknown_field_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 unknown_field_3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_unknown_field_3(&has_bits);
          _impl_.unknown_field_3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 unknown_field_4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_unknown_field_4(&has_bits);
          _impl_.unknown_field_4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoginPlayServerResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openfoxwq.LoginPlayServerResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 unknown_field_1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_unknown_field_1(), target);
  }

  // optional int64 unknown_field_2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_unknown_field_2(), target);
  }

  // optional int64 unknown_field_3 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_unknown_field_3(), target);
  }

  // optional int64 unknown_field_4 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_unknown_field_4(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openfoxwq.LoginPlayServerResponse)
  return target;
}

size_t LoginPlayServerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openfoxwq.LoginPlayServerResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int64 unknown_field_1 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_unknown_field_1());
    }

    // optional int64 unknown_field_2 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_unknown_field_2());
    }

    // optional int64 unknown_field_3 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_unknown_field_3());
    }

    // optional int64 unknown_field_4 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_unknown_field_4());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoginPlayServerResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LoginPlayServerResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoginPlayServerResponse::GetClassData() const { return &_class_data_; }


void LoginPlayServerResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LoginPlayServerResponse*>(&to_msg);
  auto& from = static_cast<const LoginPlayServerResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openfoxwq.LoginPlayServerResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.unknown_field_1_ = from._impl_.unknown_field_1_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.unknown_field_2_ = from._impl_.unknown_field_2_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.unknown_field_3_ = from._impl_.unknown_field_3_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.unknown_field_4_ = from._impl_.unknown_field_4_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoginPlayServerResponse::CopyFrom(const LoginPlayServerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openfoxwq.LoginPlayServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginPlayServerResponse::IsInitialized() const {
  return true;
}

void LoginPlayServerResponse::InternalSwap(LoginPlayServerResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoginPlayServerResponse, _impl_.unknown_field_4_)
      + sizeof(LoginPlayServerResponse::_impl_.unknown_field_4_)
      - PROTOBUF_FIELD_OFFSET(LoginPlayServerResponse, _impl_.unknown_field_1_)>(
          reinterpret_cast<char*>(&_impl_.unknown_field_1_),
          reinterpret_cast<char*>(&other->_impl_.unknown_field_1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginPlayServerResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fplay_2eproto_getter, &descriptor_table_proto_2fplay_2eproto_once,
      file_level_metadata_proto_2fplay_2eproto[1]);
}

// ===================================================================

class ListPlayersRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ListPlayersRequest>()._impl_._has_bits_);
  static void set_has_unknown_field_1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ListPlayersRequest::ListPlayersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openfoxwq.ListPlayersRequest)
}
ListPlayersRequest::ListPlayersRequest(const ListPlayersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListPlayersRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unknown_field_1_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.unknown_field_1_ = from._impl_.unknown_field_1_;
  // @@protoc_insertion_point(copy_constructor:openfoxwq.ListPlayersRequest)
}

inline void ListPlayersRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unknown_field_1_){int64_t{0}}
  };
}

ListPlayersRequest::~ListPlayersRequest() {
  // @@protoc_insertion_point(destructor:openfoxwq.ListPlayersRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListPlayersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListPlayersRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListPlayersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:openfoxwq.ListPlayersRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.unknown_field_1_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListPlayersRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 unknown_field_1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_unknown_field_1(&has_bits);
          _impl_.unknown_field_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListPlayersRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openfoxwq.ListPlayersRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int64 unknown_field_1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_unknown_field_1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openfoxwq.ListPlayersRequest)
  return target;
}

size_t ListPlayersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openfoxwq.ListPlayersRequest)
  size_t total_size = 0;

  // required int64 unknown_field_1 = 1;
  if (_internal_has_unknown_field_1()) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_unknown_field_1());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListPlayersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListPlayersRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListPlayersRequest::GetClassData() const { return &_class_data_; }


void ListPlayersRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListPlayersRequest*>(&to_msg);
  auto& from = static_cast<const ListPlayersRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openfoxwq.ListPlayersRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_unknown_field_1()) {
    _this->_internal_set_unknown_field_1(from._internal_unknown_field_1());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListPlayersRequest::CopyFrom(const ListPlayersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openfoxwq.ListPlayersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPlayersRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ListPlayersRequest::InternalSwap(ListPlayersRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.unknown_field_1_, other->_impl_.unknown_field_1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPlayersRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fplay_2eproto_getter, &descriptor_table_proto_2fplay_2eproto_once,
      file_level_metadata_proto_2fplay_2eproto[2]);
}

// ===================================================================

class ListPlayersResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ListPlayersResponse>()._impl_._has_bits_);
  static void set_has_page_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_page_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_unknown_field_1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_unknown_field_5(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_unknown_field_6(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

void ListPlayersResponse::clear_players() {
  _impl_.players_.Clear();
}
ListPlayersResponse::ListPlayersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openfoxwq.ListPlayersResponse)
}
ListPlayersResponse::ListPlayersResponse(const ListPlayersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListPlayersResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.players_){from._impl_.players_}
    , decltype(_impl_.unknown_field_1_){}
    , decltype(_impl_.page_index_){}
    , decltype(_impl_.page_count_){}
    , decltype(_impl_.unknown_field_5_){}
    , decltype(_impl_.unknown_field_6_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.unknown_field_1_, &from._impl_.unknown_field_1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.unknown_field_6_) -
    reinterpret_cast<char*>(&_impl_.unknown_field_1_)) + sizeof(_impl_.unknown_field_6_));
  // @@protoc_insertion_point(copy_constructor:openfoxwq.ListPlayersResponse)
}

inline void ListPlayersResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.players_){arena}
    , decltype(_impl_.unknown_field_1_){int64_t{0}}
    , decltype(_impl_.page_index_){int64_t{0}}
    , decltype(_impl_.page_count_){int64_t{0}}
    , decltype(_impl_.unknown_field_5_){int64_t{0}}
    , decltype(_impl_.unknown_field_6_){int64_t{0}}
  };
}

ListPlayersResponse::~ListPlayersResponse() {
  // @@protoc_insertion_point(destructor:openfoxwq.ListPlayersResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListPlayersResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedPtrField();
}

void ListPlayersResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListPlayersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:openfoxwq.ListPlayersResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.unknown_field_1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.unknown_field_6_) -
        reinterpret_cast<char*>(&_impl_.unknown_field_1_)) + sizeof(_impl_.unknown_field_6_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListPlayersResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 unknown_field_1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_unknown_field_1(&has_bits);
          _impl_.unknown_field_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .openfoxwq.PlayerInfo players = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required int64 page_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_page_index(&has_bits);
          _impl_.page_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 page_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_page_count(&has_bits);
          _impl_.page_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 unknown_field_5 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_unknown_field_5(&has_bits);
          _impl_.unknown_field_5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 unknown_field_6 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_unknown_field_6(&has_bits);
          _impl_.unknown_field_6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListPlayersResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openfoxwq.ListPlayersResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 unknown_field_1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_unknown_field_1(), target);
  }

  // repeated .openfoxwq.PlayerInfo players = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // required int64 page_index = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_page_index(), target);
  }

  // required int64 page_count = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_page_count(), target);
  }

  // optional int64 unknown_field_5 = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_unknown_field_5(), target);
  }

  // optional int64 unknown_field_6 = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_unknown_field_6(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openfoxwq.ListPlayersResponse)
  return target;
}

size_t ListPlayersResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:openfoxwq.ListPlayersResponse)
  size_t total_size = 0;

  if (_internal_has_page_index()) {
    // required int64 page_index = 3;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_page_index());
  }

  if (_internal_has_page_count()) {
    // required int64 page_count = 4;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_page_count());
  }

  return total_size;
}
size_t ListPlayersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openfoxwq.ListPlayersResponse)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required int64 page_index = 3;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_page_index());

    // required int64 page_count = 4;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_page_count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openfoxwq.PlayerInfo players = 2;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_impl_.players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int64 unknown_field_1 = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_unknown_field_1());
  }

  if (cached_has_bits & 0x00000018u) {
    // optional int64 unknown_field_5 = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_unknown_field_5());
    }

    // optional int64 unknown_field_6 = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_unknown_field_6());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListPlayersResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListPlayersResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListPlayersResponse::GetClassData() const { return &_class_data_; }


void ListPlayersResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListPlayersResponse*>(&to_msg);
  auto& from = static_cast<const ListPlayersResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openfoxwq.ListPlayersResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.unknown_field_1_ = from._impl_.unknown_field_1_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.page_index_ = from._impl_.page_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.page_count_ = from._impl_.page_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.unknown_field_5_ = from._impl_.unknown_field_5_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.unknown_field_6_ = from._impl_.unknown_field_6_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListPlayersResponse::CopyFrom(const ListPlayersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openfoxwq.ListPlayersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPlayersResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.players_))
    return false;
  return true;
}

void ListPlayersResponse::InternalSwap(ListPlayersResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListPlayersResponse, _impl_.unknown_field_6_)
      + sizeof(ListPlayersResponse::_impl_.unknown_field_6_)
      - PROTOBUF_FIELD_OFFSET(ListPlayersResponse, _impl_.unknown_field_1_)>(
          reinterpret_cast<char*>(&_impl_.unknown_field_1_),
          reinterpret_cast<char*>(&other->_impl_.unknown_field_1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPlayersResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fplay_2eproto_getter, &descriptor_table_proto_2fplay_2eproto_once,
      file_level_metadata_proto_2fplay_2eproto[3]);
}

// ===================================================================

class GetPlayerInfoRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetPlayerInfoRequest>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::openfoxwq::InfoOptions& info_options(const GetPlayerInfoRequest* msg);
  static void set_has_info_options(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::openfoxwq::InfoOptions&
GetPlayerInfoRequest::_Internal::info_options(const GetPlayerInfoRequest* msg) {
  return *msg->_impl_.info_options_;
}
GetPlayerInfoRequest::GetPlayerInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openfoxwq.GetPlayerInfoRequest)
}
GetPlayerInfoRequest::GetPlayerInfoRequest(const GetPlayerInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetPlayerInfoRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.info_options_){nullptr}
    , decltype(_impl_.player_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info_options()) {
    _this->_impl_.info_options_ = new ::openfoxwq::InfoOptions(*from._impl_.info_options_);
  }
  _this->_impl_.player_id_ = from._impl_.player_id_;
  // @@protoc_insertion_point(copy_constructor:openfoxwq.GetPlayerInfoRequest)
}

inline void GetPlayerInfoRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.info_options_){nullptr}
    , decltype(_impl_.player_id_){int64_t{0}}
  };
}

GetPlayerInfoRequest::~GetPlayerInfoRequest() {
  // @@protoc_insertion_point(destructor:openfoxwq.GetPlayerInfoRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetPlayerInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.info_options_;
}

void GetPlayerInfoRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetPlayerInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:openfoxwq.GetPlayerInfoRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.info_options_ != nullptr);
    _impl_.info_options_->Clear();
  }
  _impl_.player_id_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPlayerInfoRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .openfoxwq.InfoOptions info_options = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_info_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetPlayerInfoRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openfoxwq.GetPlayerInfoRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int64 player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_player_id(), target);
  }

  // required .openfoxwq.InfoOptions info_options = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::info_options(this),
        _Internal::info_options(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openfoxwq.GetPlayerInfoRequest)
  return target;
}

size_t GetPlayerInfoRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:openfoxwq.GetPlayerInfoRequest)
  size_t total_size = 0;

  if (_internal_has_info_options()) {
    // required .openfoxwq.InfoOptions info_options = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_options_);
  }

  if (_internal_has_player_id()) {
    // required int64 player_id = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_player_id());
  }

  return total_size;
}
size_t GetPlayerInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openfoxwq.GetPlayerInfoRequest)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .openfoxwq.InfoOptions info_options = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_options_);

    // required int64 player_id = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_player_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPlayerInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetPlayerInfoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPlayerInfoRequest::GetClassData() const { return &_class_data_; }


void GetPlayerInfoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetPlayerInfoRequest*>(&to_msg);
  auto& from = static_cast<const GetPlayerInfoRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openfoxwq.GetPlayerInfoRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_info_options()->::openfoxwq::InfoOptions::MergeFrom(
          from._internal_info_options());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPlayerInfoRequest::CopyFrom(const GetPlayerInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openfoxwq.GetPlayerInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPlayerInfoRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_info_options()) {
    if (!_impl_.info_options_->IsInitialized()) return false;
  }
  return true;
}

void GetPlayerInfoRequest::InternalSwap(GetPlayerInfoRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetPlayerInfoRequest, _impl_.player_id_)
      + sizeof(GetPlayerInfoRequest::_impl_.player_id_)
      - PROTOBUF_FIELD_OFFSET(GetPlayerInfoRequest, _impl_.info_options_)>(
          reinterpret_cast<char*>(&_impl_.info_options_),
          reinterpret_cast<char*>(&other->_impl_.info_options_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPlayerInfoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fplay_2eproto_getter, &descriptor_table_proto_2fplay_2eproto_once,
      file_level_metadata_proto_2fplay_2eproto[4]);
}

// ===================================================================

class GetPlayerInfoResponse_RegisterInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<GetPlayerInfoResponse_RegisterInfo>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name_native(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_member_since_unix_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_unknown_field_2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_unknown_field_3(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_unknown_field_7(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000007f) ^ 0x0000007f) != 0;
  }
};

GetPlayerInfoResponse_RegisterInfo::GetPlayerInfoResponse_RegisterInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openfoxwq.GetPlayerInfoResponse.RegisterInfo)
}
GetPlayerInfoResponse_RegisterInfo::GetPlayerInfoResponse_RegisterInfo(const GetPlayerInfoResponse_RegisterInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetPlayerInfoResponse_RegisterInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_native_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.player_id_){}
    , decltype(_impl_.unknown_field_2_){}
    , decltype(_impl_.unknown_field_3_){}
    , decltype(_impl_.unknown_field_7_){}
    , decltype(_impl_.member_since_unix_ts_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_native_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_native_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name_native()) {
    _this->_impl_.name_native_.Set(from._internal_name_native(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.player_id_, &from._impl_.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.member_since_unix_ts_) -
    reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.member_since_unix_ts_));
  // @@protoc_insertion_point(copy_constructor:openfoxwq.GetPlayerInfoResponse.RegisterInfo)
}

inline void GetPlayerInfoResponse_RegisterInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_native_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.player_id_){int64_t{0}}
    , decltype(_impl_.unknown_field_2_){int64_t{0}}
    , decltype(_impl_.unknown_field_3_){int64_t{0}}
    , decltype(_impl_.unknown_field_7_){int64_t{0}}
    , decltype(_impl_.member_since_unix_ts_){int64_t{0}}
  };
  _impl_.name_native_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_native_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetPlayerInfoResponse_RegisterInfo::~GetPlayerInfoResponse_RegisterInfo() {
  // @@protoc_insertion_point(destructor:openfoxwq.GetPlayerInfoResponse.RegisterInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetPlayerInfoResponse_RegisterInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_native_.Destroy();
  _impl_.name_.Destroy();
}

void GetPlayerInfoResponse_RegisterInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetPlayerInfoResponse_RegisterInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:openfoxwq.GetPlayerInfoResponse.RegisterInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_native_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&_impl_.player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.member_since_unix_ts_) -
        reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.member_since_unix_ts_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPlayerInfoResponse_RegisterInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 unknown_field_2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_unknown_field_2(&has_bits);
          _impl_.unknown_field_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 unknown_field_3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_unknown_field_3(&has_bits);
          _impl_.unknown_field_3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string name_native = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_name_native();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "openfoxwq.GetPlayerInfoResponse.RegisterInfo.name_native");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "openfoxwq.GetPlayerInfoResponse.RegisterInfo.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required int64 unknown_field_7 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_unknown_field_7(&has_bits);
          _impl_.unknown_field_7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 member_since_unix_ts = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_member_since_unix_ts(&has_bits);
          _impl_.member_since_unix_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetPlayerInfoResponse_RegisterInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openfoxwq.GetPlayerInfoResponse.RegisterInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int64 player_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_player_id(), target);
  }

  // required int64 unknown_field_2 = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_unknown_field_2(), target);
  }

  // required int64 unknown_field_3 = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_unknown_field_3(), target);
  }

  // required string name_native = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name_native().data(), static_cast<int>(this->_internal_name_native().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "openfoxwq.GetPlayerInfoResponse.RegisterInfo.name_native");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name_native(), target);
  }

  // required string name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "openfoxwq.GetPlayerInfoResponse.RegisterInfo.name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name(), target);
  }

  // required int64 unknown_field_7 = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_unknown_field_7(), target);
  }

  // required int64 member_since_unix_ts = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_member_since_unix_ts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openfoxwq.GetPlayerInfoResponse.RegisterInfo)
  return target;
}

size_t GetPlayerInfoResponse_RegisterInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:openfoxwq.GetPlayerInfoResponse.RegisterInfo)
  size_t total_size = 0;

  if (_internal_has_name_native()) {
    // required string name_native = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name_native());
  }

  if (_internal_has_name()) {
    // required string name = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_player_id()) {
    // required int64 player_id = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_player_id());
  }

  if (_internal_has_unknown_field_2()) {
    // required int64 unknown_field_2 = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_unknown_field_2());
  }

  if (_internal_has_unknown_field_3()) {
    // required int64 unknown_field_3 = 3;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_unknown_field_3());
  }

  if (_internal_has_unknown_field_7()) {
    // required int64 unknown_field_7 = 7;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_unknown_field_7());
  }

  if (_internal_has_member_since_unix_ts()) {
    // required int64 member_since_unix_ts = 8;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_member_since_unix_ts());
  }

  return total_size;
}
size_t GetPlayerInfoResponse_RegisterInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openfoxwq.GetPlayerInfoResponse.RegisterInfo)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required string name_native = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name_native());

    // required string name = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required int64 player_id = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_player_id());

    // required int64 unknown_field_2 = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_unknown_field_2());

    // required int64 unknown_field_3 = 3;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_unknown_field_3());

    // required int64 unknown_field_7 = 7;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_unknown_field_7());

    // required int64 member_since_unix_ts = 8;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_member_since_unix_ts());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPlayerInfoResponse_RegisterInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetPlayerInfoResponse_RegisterInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPlayerInfoResponse_RegisterInfo::GetClassData() const { return &_class_data_; }


void GetPlayerInfoResponse_RegisterInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetPlayerInfoResponse_RegisterInfo*>(&to_msg);
  auto& from = static_cast<const GetPlayerInfoResponse_RegisterInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openfoxwq.GetPlayerInfoResponse.RegisterInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name_native(from._internal_name_native());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.unknown_field_2_ = from._impl_.unknown_field_2_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.unknown_field_3_ = from._impl_.unknown_field_3_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.unknown_field_7_ = from._impl_.unknown_field_7_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.member_since_unix_ts_ = from._impl_.member_since_unix_ts_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPlayerInfoResponse_RegisterInfo::CopyFrom(const GetPlayerInfoResponse_RegisterInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openfoxwq.GetPlayerInfoResponse.RegisterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPlayerInfoResponse_RegisterInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void GetPlayerInfoResponse_RegisterInfo::InternalSwap(GetPlayerInfoResponse_RegisterInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_native_, lhs_arena,
      &other->_impl_.name_native_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetPlayerInfoResponse_RegisterInfo, _impl_.member_since_unix_ts_)
      + sizeof(GetPlayerInfoResponse_RegisterInfo::_impl_.member_since_unix_ts_)
      - PROTOBUF_FIELD_OFFSET(GetPlayerInfoResponse_RegisterInfo, _impl_.player_id_)>(
          reinterpret_cast<char*>(&_impl_.player_id_),
          reinterpret_cast<char*>(&other->_impl_.player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPlayerInfoResponse_RegisterInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fplay_2eproto_getter, &descriptor_table_proto_2fplay_2eproto_once,
      file_level_metadata_proto_2fplay_2eproto[5]);
}

// ===================================================================

class GetPlayerInfoResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetPlayerInfoResponse>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::openfoxwq::InfoOptions& info_options(const GetPlayerInfoResponse* msg);
  static void set_has_info_options(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_player_id_again(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::openfoxwq::GetPlayerInfoResponse_RegisterInfo& register_info(const GetPlayerInfoResponse* msg);
  static void set_has_register_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000d) ^ 0x0000000d) != 0;
  }
};

const ::openfoxwq::InfoOptions&
GetPlayerInfoResponse::_Internal::info_options(const GetPlayerInfoResponse* msg) {
  return *msg->_impl_.info_options_;
}
const ::openfoxwq::GetPlayerInfoResponse_RegisterInfo&
GetPlayerInfoResponse::_Internal::register_info(const GetPlayerInfoResponse* msg) {
  return *msg->_impl_.register_info_;
}
void GetPlayerInfoResponse::clear_game_results() {
  _impl_.game_results_.Clear();
}
GetPlayerInfoResponse::GetPlayerInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openfoxwq.GetPlayerInfoResponse)
}
GetPlayerInfoResponse::GetPlayerInfoResponse(const GetPlayerInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetPlayerInfoResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.game_results_){from._impl_.game_results_}
    , decltype(_impl_.info_options_){nullptr}
    , decltype(_impl_.register_info_){nullptr}
    , decltype(_impl_.player_id_){}
    , decltype(_impl_.player_id_again_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info_options()) {
    _this->_impl_.info_options_ = new ::openfoxwq::InfoOptions(*from._impl_.info_options_);
  }
  if (from._internal_has_register_info()) {
    _this->_impl_.register_info_ = new ::openfoxwq::GetPlayerInfoResponse_RegisterInfo(*from._impl_.register_info_);
  }
  ::memcpy(&_impl_.player_id_, &from._impl_.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_id_again_) -
    reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.player_id_again_));
  // @@protoc_insertion_point(copy_constructor:openfoxwq.GetPlayerInfoResponse)
}

inline void GetPlayerInfoResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.game_results_){arena}
    , decltype(_impl_.info_options_){nullptr}
    , decltype(_impl_.register_info_){nullptr}
    , decltype(_impl_.player_id_){int64_t{0}}
    , decltype(_impl_.player_id_again_){int64_t{0}}
  };
}

GetPlayerInfoResponse::~GetPlayerInfoResponse() {
  // @@protoc_insertion_point(destructor:openfoxwq.GetPlayerInfoResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetPlayerInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.game_results_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.info_options_;
  if (this != internal_default_instance()) delete _impl_.register_info_;
}

void GetPlayerInfoResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetPlayerInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:openfoxwq.GetPlayerInfoResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.game_results_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.info_options_ != nullptr);
      _impl_.info_options_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.register_info_ != nullptr);
      _impl_.register_info_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.player_id_again_) -
        reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.player_id_again_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPlayerInfoResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .openfoxwq.InfoOptions info_options = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_info_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 player_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 player_id_again = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_player_id_again(&has_bits);
          _impl_.player_id_again_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .openfoxwq.GetPlayerInfoResponse.RegisterInfo register_info = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_register_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .openfoxwq.ExtendedGameResults game_results = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_game_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetPlayerInfoResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openfoxwq.GetPlayerInfoResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .openfoxwq.InfoOptions info_options = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::info_options(this),
        _Internal::info_options(this).GetCachedSize(), target, stream);
  }

  // required int64 player_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_player_id(), target);
  }

  // required int64 player_id_again = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_player_id_again(), target);
  }

  // optional .openfoxwq.GetPlayerInfoResponse.RegisterInfo register_info = 8;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::register_info(this),
        _Internal::register_info(this).GetCachedSize(), target, stream);
  }

  // repeated .openfoxwq.ExtendedGameResults game_results = 16;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_game_results_size()); i < n; i++) {
    const auto& repfield = this->_internal_game_results(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(16, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openfoxwq.GetPlayerInfoResponse)
  return target;
}

size_t GetPlayerInfoResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:openfoxwq.GetPlayerInfoResponse)
  size_t total_size = 0;

  if (_internal_has_info_options()) {
    // required .openfoxwq.InfoOptions info_options = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_options_);
  }

  if (_internal_has_player_id()) {
    // required int64 player_id = 3;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_player_id());
  }

  if (_internal_has_player_id_again()) {
    // required int64 player_id_again = 5;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_player_id_again());
  }

  return total_size;
}
size_t GetPlayerInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openfoxwq.GetPlayerInfoResponse)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000d) ^ 0x0000000d) == 0) {  // All required fields are present.
    // required .openfoxwq.InfoOptions info_options = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_options_);

    // required int64 player_id = 3;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_player_id());

    // required int64 player_id_again = 5;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_player_id_again());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openfoxwq.ExtendedGameResults game_results = 16;
  total_size += 2UL * this->_internal_game_results_size();
  for (const auto& msg : this->_impl_.game_results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .openfoxwq.GetPlayerInfoResponse.RegisterInfo register_info = 8;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.register_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPlayerInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetPlayerInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPlayerInfoResponse::GetClassData() const { return &_class_data_; }


void GetPlayerInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetPlayerInfoResponse*>(&to_msg);
  auto& from = static_cast<const GetPlayerInfoResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openfoxwq.GetPlayerInfoResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.game_results_.MergeFrom(from._impl_.game_results_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_info_options()->::openfoxwq::InfoOptions::MergeFrom(
          from._internal_info_options());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_register_info()->::openfoxwq::GetPlayerInfoResponse_RegisterInfo::MergeFrom(
          from._internal_register_info());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.player_id_again_ = from._impl_.player_id_again_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPlayerInfoResponse::CopyFrom(const GetPlayerInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openfoxwq.GetPlayerInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPlayerInfoResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.game_results_))
    return false;
  if (_internal_has_info_options()) {
    if (!_impl_.info_options_->IsInitialized()) return false;
  }
  if (_internal_has_register_info()) {
    if (!_impl_.register_info_->IsInitialized()) return false;
  }
  return true;
}

void GetPlayerInfoResponse::InternalSwap(GetPlayerInfoResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.game_results_.InternalSwap(&other->_impl_.game_results_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetPlayerInfoResponse, _impl_.player_id_again_)
      + sizeof(GetPlayerInfoResponse::_impl_.player_id_again_)
      - PROTOBUF_FIELD_OFFSET(GetPlayerInfoResponse, _impl_.info_options_)>(
          reinterpret_cast<char*>(&_impl_.info_options_),
          reinterpret_cast<char*>(&other->_impl_.info_options_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPlayerInfoResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fplay_2eproto_getter, &descriptor_table_proto_2fplay_2eproto_once,
      file_level_metadata_proto_2fplay_2eproto[6]);
}

// ===================================================================

class InfoOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<InfoOptions>()._impl_._has_bits_);
  static void set_has_unknown_field_1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_unknown_field_2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

InfoOptions::InfoOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openfoxwq.InfoOptions)
}
InfoOptions::InfoOptions(const InfoOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InfoOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unknown_field_1_){}
    , decltype(_impl_.unknown_field_2_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.unknown_field_1_, &from._impl_.unknown_field_1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.unknown_field_2_) -
    reinterpret_cast<char*>(&_impl_.unknown_field_1_)) + sizeof(_impl_.unknown_field_2_));
  // @@protoc_insertion_point(copy_constructor:openfoxwq.InfoOptions)
}

inline void InfoOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unknown_field_1_){int64_t{0}}
    , decltype(_impl_.unknown_field_2_){int64_t{0}}
  };
}

InfoOptions::~InfoOptions() {
  // @@protoc_insertion_point(destructor:openfoxwq.InfoOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InfoOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InfoOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InfoOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:openfoxwq.InfoOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.unknown_field_1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.unknown_field_2_) -
        reinterpret_cast<char*>(&_impl_.unknown_field_1_)) + sizeof(_impl_.unknown_field_2_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InfoOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 unknown_field_1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_unknown_field_1(&has_bits);
          _impl_.unknown_field_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 unknown_field_2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_unknown_field_2(&has_bits);
          _impl_.unknown_field_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InfoOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openfoxwq.InfoOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int64 unknown_field_1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_unknown_field_1(), target);
  }

  // optional int64 unknown_field_2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_unknown_field_2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openfoxwq.InfoOptions)
  return target;
}

size_t InfoOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openfoxwq.InfoOptions)
  size_t total_size = 0;

  // required int64 unknown_field_1 = 1;
  if (_internal_has_unknown_field_1()) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_unknown_field_1());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 unknown_field_2 = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_unknown_field_2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InfoOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InfoOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InfoOptions::GetClassData() const { return &_class_data_; }


void InfoOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InfoOptions*>(&to_msg);
  auto& from = static_cast<const InfoOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openfoxwq.InfoOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.unknown_field_1_ = from._impl_.unknown_field_1_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.unknown_field_2_ = from._impl_.unknown_field_2_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InfoOptions::CopyFrom(const InfoOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openfoxwq.InfoOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoOptions::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void InfoOptions::InternalSwap(InfoOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InfoOptions, _impl_.unknown_field_2_)
      + sizeof(InfoOptions::_impl_.unknown_field_2_)
      - PROTOBUF_FIELD_OFFSET(InfoOptions, _impl_.unknown_field_1_)>(
          reinterpret_cast<char*>(&_impl_.unknown_field_1_),
          reinterpret_cast<char*>(&other->_impl_.unknown_field_1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InfoOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fplay_2eproto_getter, &descriptor_table_proto_2fplay_2eproto_once,
      file_level_metadata_proto_2fplay_2eproto[7]);
}

// ===================================================================

class SyncTimeRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SyncTimeRequest>()._impl_._has_bits_);
  static void set_has_unix_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

SyncTimeRequest::SyncTimeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openfoxwq.SyncTimeRequest)
}
SyncTimeRequest::SyncTimeRequest(const SyncTimeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SyncTimeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unix_ts_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.unix_ts_ = from._impl_.unix_ts_;
  // @@protoc_insertion_point(copy_constructor:openfoxwq.SyncTimeRequest)
}

inline void SyncTimeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unix_ts_){int64_t{0}}
  };
}

SyncTimeRequest::~SyncTimeRequest() {
  // @@protoc_insertion_point(destructor:openfoxwq.SyncTimeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SyncTimeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SyncTimeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SyncTimeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:openfoxwq.SyncTimeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.unix_ts_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncTimeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 unix_ts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_unix_ts(&has_bits);
          _impl_.unix_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncTimeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openfoxwq.SyncTimeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int64 unix_ts = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_unix_ts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openfoxwq.SyncTimeRequest)
  return target;
}

size_t SyncTimeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openfoxwq.SyncTimeRequest)
  size_t total_size = 0;

  // required int64 unix_ts = 1;
  if (_internal_has_unix_ts()) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_unix_ts());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncTimeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SyncTimeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncTimeRequest::GetClassData() const { return &_class_data_; }


void SyncTimeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SyncTimeRequest*>(&to_msg);
  auto& from = static_cast<const SyncTimeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openfoxwq.SyncTimeRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_unix_ts()) {
    _this->_internal_set_unix_ts(from._internal_unix_ts());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SyncTimeRequest::CopyFrom(const SyncTimeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openfoxwq.SyncTimeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncTimeRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void SyncTimeRequest::InternalSwap(SyncTimeRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.unix_ts_, other->_impl_.unix_ts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncTimeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fplay_2eproto_getter, &descriptor_table_proto_2fplay_2eproto_once,
      file_level_metadata_proto_2fplay_2eproto[8]);
}

// ===================================================================

class SyncTimeResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SyncTimeResponse>()._impl_._has_bits_);
  static void set_has_unix_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_unix_ts_us(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

SyncTimeResponse::SyncTimeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openfoxwq.SyncTimeResponse)
}
SyncTimeResponse::SyncTimeResponse(const SyncTimeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SyncTimeResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unix_ts_){}
    , decltype(_impl_.unix_ts_us_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.unix_ts_, &from._impl_.unix_ts_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.unix_ts_us_) -
    reinterpret_cast<char*>(&_impl_.unix_ts_)) + sizeof(_impl_.unix_ts_us_));
  // @@protoc_insertion_point(copy_constructor:openfoxwq.SyncTimeResponse)
}

inline void SyncTimeResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unix_ts_){int64_t{0}}
    , decltype(_impl_.unix_ts_us_){int64_t{0}}
  };
}

SyncTimeResponse::~SyncTimeResponse() {
  // @@protoc_insertion_point(destructor:openfoxwq.SyncTimeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SyncTimeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SyncTimeResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SyncTimeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:openfoxwq.SyncTimeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.unix_ts_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.unix_ts_us_) -
        reinterpret_cast<char*>(&_impl_.unix_ts_)) + sizeof(_impl_.unix_ts_us_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncTimeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 unix_ts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_unix_ts(&has_bits);
          _impl_.unix_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 unix_ts_us = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_unix_ts_us(&has_bits);
          _impl_.unix_ts_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncTimeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openfoxwq.SyncTimeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int64 unix_ts = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_unix_ts(), target);
  }

  // required int64 unix_ts_us = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_unix_ts_us(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openfoxwq.SyncTimeResponse)
  return target;
}

size_t SyncTimeResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:openfoxwq.SyncTimeResponse)
  size_t total_size = 0;

  if (_internal_has_unix_ts()) {
    // required int64 unix_ts = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_unix_ts());
  }

  if (_internal_has_unix_ts_us()) {
    // required int64 unix_ts_us = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_unix_ts_us());
  }

  return total_size;
}
size_t SyncTimeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openfoxwq.SyncTimeResponse)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 unix_ts = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_unix_ts());

    // required int64 unix_ts_us = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_unix_ts_us());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncTimeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SyncTimeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncTimeResponse::GetClassData() const { return &_class_data_; }


void SyncTimeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SyncTimeResponse*>(&to_msg);
  auto& from = static_cast<const SyncTimeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openfoxwq.SyncTimeResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.unix_ts_ = from._impl_.unix_ts_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.unix_ts_us_ = from._impl_.unix_ts_us_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SyncTimeResponse::CopyFrom(const SyncTimeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openfoxwq.SyncTimeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncTimeResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void SyncTimeResponse::InternalSwap(SyncTimeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SyncTimeResponse, _impl_.unix_ts_us_)
      + sizeof(SyncTimeResponse::_impl_.unix_ts_us_)
      - PROTOBUF_FIELD_OFFSET(SyncTimeResponse, _impl_.unix_ts_)>(
          reinterpret_cast<char*>(&_impl_.unix_ts_),
          reinterpret_cast<char*>(&other->_impl_.unix_ts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncTimeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fplay_2eproto_getter, &descriptor_table_proto_2fplay_2eproto_once,
      file_level_metadata_proto_2fplay_2eproto[9]);
}

// ===================================================================

class SyncPlayersRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SyncPlayersRequest>()._impl_._has_bits_);
  static void set_has_unknown_field_1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

SyncPlayersRequest::SyncPlayersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openfoxwq.SyncPlayersRequest)
}
SyncPlayersRequest::SyncPlayersRequest(const SyncPlayersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SyncPlayersRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unknown_field_1_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.unknown_field_1_ = from._impl_.unknown_field_1_;
  // @@protoc_insertion_point(copy_constructor:openfoxwq.SyncPlayersRequest)
}

inline void SyncPlayersRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unknown_field_1_){int64_t{0}}
  };
}

SyncPlayersRequest::~SyncPlayersRequest() {
  // @@protoc_insertion_point(destructor:openfoxwq.SyncPlayersRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SyncPlayersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SyncPlayersRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SyncPlayersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:openfoxwq.SyncPlayersRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.unknown_field_1_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncPlayersRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 unknown_field_1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_unknown_field_1(&has_bits);
          _impl_.unknown_field_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncPlayersRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openfoxwq.SyncPlayersRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int64 unknown_field_1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_unknown_field_1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openfoxwq.SyncPlayersRequest)
  return target;
}

size_t SyncPlayersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openfoxwq.SyncPlayersRequest)
  size_t total_size = 0;

  // required int64 unknown_field_1 = 1;
  if (_internal_has_unknown_field_1()) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_unknown_field_1());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncPlayersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SyncPlayersRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncPlayersRequest::GetClassData() const { return &_class_data_; }


void SyncPlayersRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SyncPlayersRequest*>(&to_msg);
  auto& from = static_cast<const SyncPlayersRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openfoxwq.SyncPlayersRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_unknown_field_1()) {
    _this->_internal_set_unknown_field_1(from._internal_unknown_field_1());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SyncPlayersRequest::CopyFrom(const SyncPlayersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openfoxwq.SyncPlayersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncPlayersRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void SyncPlayersRequest::InternalSwap(SyncPlayersRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.unknown_field_1_, other->_impl_.unknown_field_1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncPlayersRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fplay_2eproto_getter, &descriptor_table_proto_2fplay_2eproto_once,
      file_level_metadata_proto_2fplay_2eproto[10]);
}

// ===================================================================

class SyncPlayersResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SyncPlayersResponse>()._impl_._has_bits_);
  static void set_has_unknown_field_1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_unknown_field_2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

SyncPlayersResponse::SyncPlayersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openfoxwq.SyncPlayersResponse)
}
SyncPlayersResponse::SyncPlayersResponse(const SyncPlayersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SyncPlayersResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unknown_field_1_){}
    , decltype(_impl_.unknown_field_2_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.unknown_field_1_, &from._impl_.unknown_field_1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.unknown_field_2_) -
    reinterpret_cast<char*>(&_impl_.unknown_field_1_)) + sizeof(_impl_.unknown_field_2_));
  // @@protoc_insertion_point(copy_constructor:openfoxwq.SyncPlayersResponse)
}

inline void SyncPlayersResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unknown_field_1_){int64_t{0}}
    , decltype(_impl_.unknown_field_2_){int64_t{0}}
  };
}

SyncPlayersResponse::~SyncPlayersResponse() {
  // @@protoc_insertion_point(destructor:openfoxwq.SyncPlayersResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SyncPlayersResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SyncPlayersResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SyncPlayersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:openfoxwq.SyncPlayersResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.unknown_field_1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.unknown_field_2_) -
        reinterpret_cast<char*>(&_impl_.unknown_field_1_)) + sizeof(_impl_.unknown_field_2_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncPlayersResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 unknown_field_1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_unknown_field_1(&has_bits);
          _impl_.unknown_field_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 unknown_field_2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_unknown_field_2(&has_bits);
          _impl_.unknown_field_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncPlayersResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openfoxwq.SyncPlayersResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int64 unknown_field_1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_unknown_field_1(), target);
  }

  // required int64 unknown_field_2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_unknown_field_2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openfoxwq.SyncPlayersResponse)
  return target;
}

size_t SyncPlayersResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:openfoxwq.SyncPlayersResponse)
  size_t total_size = 0;

  if (_internal_has_unknown_field_1()) {
    // required int64 unknown_field_1 = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_unknown_field_1());
  }

  if (_internal_has_unknown_field_2()) {
    // required int64 unknown_field_2 = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_unknown_field_2());
  }

  return total_size;
}
size_t SyncPlayersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openfoxwq.SyncPlayersResponse)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 unknown_field_1 = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_unknown_field_1());

    // required int64 unknown_field_2 = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_unknown_field_2());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncPlayersResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SyncPlayersResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncPlayersResponse::GetClassData() const { return &_class_data_; }


void SyncPlayersResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SyncPlayersResponse*>(&to_msg);
  auto& from = static_cast<const SyncPlayersResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openfoxwq.SyncPlayersResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.unknown_field_1_ = from._impl_.unknown_field_1_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.unknown_field_2_ = from._impl_.unknown_field_2_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SyncPlayersResponse::CopyFrom(const SyncPlayersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openfoxwq.SyncPlayersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncPlayersResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void SyncPlayersResponse::InternalSwap(SyncPlayersResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SyncPlayersResponse, _impl_.unknown_field_2_)
      + sizeof(SyncPlayersResponse::_impl_.unknown_field_2_)
      - PROTOBUF_FIELD_OFFSET(SyncPlayersResponse, _impl_.unknown_field_1_)>(
          reinterpret_cast<char*>(&_impl_.unknown_field_1_),
          reinterpret_cast<char*>(&other->_impl_.unknown_field_1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncPlayersResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fplay_2eproto_getter, &descriptor_table_proto_2fplay_2eproto_once,
      file_level_metadata_proto_2fplay_2eproto[11]);
}

// ===================================================================

class PlayerStateEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerStateEvent>()._impl_._has_bits_);
  static const ::openfoxwq::PlayerInfo& player_info(const PlayerStateEvent* msg);
  static void set_has_player_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_online_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_unknown_field_3(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::openfoxwq::PlayerInfo&
PlayerStateEvent::_Internal::player_info(const PlayerStateEvent* msg) {
  return *msg->_impl_.player_info_;
}
void PlayerStateEvent::clear_player_info() {
  if (_impl_.player_info_ != nullptr) _impl_.player_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
PlayerStateEvent::PlayerStateEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openfoxwq.PlayerStateEvent)
}
PlayerStateEvent::PlayerStateEvent(const PlayerStateEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerStateEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_info_){nullptr}
    , decltype(_impl_.online_count_){}
    , decltype(_impl_.unknown_field_3_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_info()) {
    _this->_impl_.player_info_ = new ::openfoxwq::PlayerInfo(*from._impl_.player_info_);
  }
  ::memcpy(&_impl_.online_count_, &from._impl_.online_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.unknown_field_3_) -
    reinterpret_cast<char*>(&_impl_.online_count_)) + sizeof(_impl_.unknown_field_3_));
  // @@protoc_insertion_point(copy_constructor:openfoxwq.PlayerStateEvent)
}

inline void PlayerStateEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_info_){nullptr}
    , decltype(_impl_.online_count_){int64_t{0}}
    , decltype(_impl_.unknown_field_3_){int64_t{0}}
  };
}

PlayerStateEvent::~PlayerStateEvent() {
  // @@protoc_insertion_point(destructor:openfoxwq.PlayerStateEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerStateEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.player_info_;
}

void PlayerStateEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerStateEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:openfoxwq.PlayerStateEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.player_info_ != nullptr);
    _impl_.player_info_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.online_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.unknown_field_3_) -
        reinterpret_cast<char*>(&_impl_.online_count_)) + sizeof(_impl_.unknown_field_3_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerStateEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .openfoxwq.PlayerInfo player_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 online_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_online_count(&has_bits);
          _impl_.online_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 unknown_field_3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_unknown_field_3(&has_bits);
          _impl_.unknown_field_3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerStateEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openfoxwq.PlayerStateEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .openfoxwq.PlayerInfo player_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player_info(this),
        _Internal::player_info(this).GetCachedSize(), target, stream);
  }

  // required int64 online_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_online_count(), target);
  }

  // optional int64 unknown_field_3 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_unknown_field_3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openfoxwq.PlayerStateEvent)
  return target;
}

size_t PlayerStateEvent::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:openfoxwq.PlayerStateEvent)
  size_t total_size = 0;

  if (_internal_has_player_info()) {
    // required .openfoxwq.PlayerInfo player_info = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_info_);
  }

  if (_internal_has_online_count()) {
    // required int64 online_count = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_online_count());
  }

  return total_size;
}
size_t PlayerStateEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openfoxwq.PlayerStateEvent)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .openfoxwq.PlayerInfo player_info = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_info_);

    // required int64 online_count = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_online_count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 unknown_field_3 = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_unknown_field_3());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerStateEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerStateEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerStateEvent::GetClassData() const { return &_class_data_; }


void PlayerStateEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerStateEvent*>(&to_msg);
  auto& from = static_cast<const PlayerStateEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openfoxwq.PlayerStateEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_player_info()->::openfoxwq::PlayerInfo::MergeFrom(
          from._internal_player_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.online_count_ = from._impl_.online_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.unknown_field_3_ = from._impl_.unknown_field_3_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerStateEvent::CopyFrom(const PlayerStateEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openfoxwq.PlayerStateEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerStateEvent::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_player_info()) {
    if (!_impl_.player_info_->IsInitialized()) return false;
  }
  return true;
}

void PlayerStateEvent::InternalSwap(PlayerStateEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerStateEvent, _impl_.unknown_field_3_)
      + sizeof(PlayerStateEvent::_impl_.unknown_field_3_)
      - PROTOBUF_FIELD_OFFSET(PlayerStateEvent, _impl_.player_info_)>(
          reinterpret_cast<char*>(&_impl_.player_info_),
          reinterpret_cast<char*>(&other->_impl_.player_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerStateEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fplay_2eproto_getter, &descriptor_table_proto_2fplay_2eproto_once,
      file_level_metadata_proto_2fplay_2eproto[12]);
}

// ===================================================================

class UnknownPlayerEvent1::_Internal {
 public:
  using HasBits = decltype(std::declval<UnknownPlayerEvent1>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_online_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_unknown_field_3(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

UnknownPlayerEvent1::UnknownPlayerEvent1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openfoxwq.UnknownPlayerEvent1)
}
UnknownPlayerEvent1::UnknownPlayerEvent1(const UnknownPlayerEvent1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnknownPlayerEvent1* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_id_){}
    , decltype(_impl_.online_count_){}
    , decltype(_impl_.unknown_field_3_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.player_id_, &from._impl_.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.unknown_field_3_) -
    reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.unknown_field_3_));
  // @@protoc_insertion_point(copy_constructor:openfoxwq.UnknownPlayerEvent1)
}

inline void UnknownPlayerEvent1::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_id_){int64_t{0}}
    , decltype(_impl_.online_count_){int64_t{0}}
    , decltype(_impl_.unknown_field_3_){int64_t{0}}
  };
}

UnknownPlayerEvent1::~UnknownPlayerEvent1() {
  // @@protoc_insertion_point(destructor:openfoxwq.UnknownPlayerEvent1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnknownPlayerEvent1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UnknownPlayerEvent1::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnknownPlayerEvent1::Clear() {
// @@protoc_insertion_point(message_clear_start:openfoxwq.UnknownPlayerEvent1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.unknown_field_3_) -
        reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.unknown_field_3_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnknownPlayerEvent1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 online_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_online_count(&has_bits);
          _impl_.online_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 unknown_field_3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_unknown_field_3(&has_bits);
          _impl_.unknown_field_3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnknownPlayerEvent1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openfoxwq.UnknownPlayerEvent1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int64 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_player_id(), target);
  }

  // required int64 online_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_online_count(), target);
  }

  // optional int64 unknown_field_3 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_unknown_field_3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openfoxwq.UnknownPlayerEvent1)
  return target;
}

size_t UnknownPlayerEvent1::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:openfoxwq.UnknownPlayerEvent1)
  size_t total_size = 0;

  if (_internal_has_player_id()) {
    // required int64 player_id = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_player_id());
  }

  if (_internal_has_online_count()) {
    // required int64 online_count = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_online_count());
  }

  return total_size;
}
size_t UnknownPlayerEvent1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openfoxwq.UnknownPlayerEvent1)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 player_id = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_player_id());

    // required int64 online_count = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_online_count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 unknown_field_3 = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_unknown_field_3());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnknownPlayerEvent1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnknownPlayerEvent1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnknownPlayerEvent1::GetClassData() const { return &_class_data_; }


void UnknownPlayerEvent1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnknownPlayerEvent1*>(&to_msg);
  auto& from = static_cast<const UnknownPlayerEvent1&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openfoxwq.UnknownPlayerEvent1)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.online_count_ = from._impl_.online_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.unknown_field_3_ = from._impl_.unknown_field_3_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnknownPlayerEvent1::CopyFrom(const UnknownPlayerEvent1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openfoxwq.UnknownPlayerEvent1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnknownPlayerEvent1::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void UnknownPlayerEvent1::InternalSwap(UnknownPlayerEvent1* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnknownPlayerEvent1, _impl_.unknown_field_3_)
      + sizeof(UnknownPlayerEvent1::_impl_.unknown_field_3_)
      - PROTOBUF_FIELD_OFFSET(UnknownPlayerEvent1, _impl_.player_id_)>(
          reinterpret_cast<char*>(&_impl_.player_id_),
          reinterpret_cast<char*>(&other->_impl_.player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnknownPlayerEvent1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fplay_2eproto_getter, &descriptor_table_proto_2fplay_2eproto_once,
      file_level_metadata_proto_2fplay_2eproto[13]);
}

// ===================================================================

class UnknownPlayRequest1_UnknownPlayRequest1Nested1::_Internal {
 public:
  using HasBits = decltype(std::declval<UnknownPlayRequest1_UnknownPlayRequest1Nested1>()._impl_._has_bits_);
  static void set_has_unknown_field_1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

UnknownPlayRequest1_UnknownPlayRequest1Nested1::UnknownPlayRequest1_UnknownPlayRequest1Nested1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openfoxwq.UnknownPlayRequest1.UnknownPlayRequest1Nested1)
}
UnknownPlayRequest1_UnknownPlayRequest1Nested1::UnknownPlayRequest1_UnknownPlayRequest1Nested1(const UnknownPlayRequest1_UnknownPlayRequest1Nested1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnknownPlayRequest1_UnknownPlayRequest1Nested1* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unknown_field_1_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.unknown_field_1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unknown_field_1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_unknown_field_1()) {
    _this->_impl_.unknown_field_1_.Set(from._internal_unknown_field_1(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:openfoxwq.UnknownPlayRequest1.UnknownPlayRequest1Nested1)
}

inline void UnknownPlayRequest1_UnknownPlayRequest1Nested1::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unknown_field_1_){}
  };
  _impl_.unknown_field_1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unknown_field_1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UnknownPlayRequest1_UnknownPlayRequest1Nested1::~UnknownPlayRequest1_UnknownPlayRequest1Nested1() {
  // @@protoc_insertion_point(destructor:openfoxwq.UnknownPlayRequest1.UnknownPlayRequest1Nested1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnknownPlayRequest1_UnknownPlayRequest1Nested1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.unknown_field_1_.Destroy();
}

void UnknownPlayRequest1_UnknownPlayRequest1Nested1::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnknownPlayRequest1_UnknownPlayRequest1Nested1::Clear() {
// @@protoc_insertion_point(message_clear_start:openfoxwq.UnknownPlayRequest1.UnknownPlayRequest1Nested1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.unknown_field_1_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnknownPlayRequest1_UnknownPlayRequest1Nested1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string unknown_field_1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_unknown_field_1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "openfoxwq.UnknownPlayRequest1.UnknownPlayRequest1Nested1.unknown_field_1");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnknownPlayRequest1_UnknownPlayRequest1Nested1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openfoxwq.UnknownPlayRequest1.UnknownPlayRequest1Nested1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string unknown_field_1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_unknown_field_1().data(), static_cast<int>(this->_internal_unknown_field_1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "openfoxwq.UnknownPlayRequest1.UnknownPlayRequest1Nested1.unknown_field_1");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_unknown_field_1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openfoxwq.UnknownPlayRequest1.UnknownPlayRequest1Nested1)
  return target;
}

size_t UnknownPlayRequest1_UnknownPlayRequest1Nested1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openfoxwq.UnknownPlayRequest1.UnknownPlayRequest1Nested1)
  size_t total_size = 0;

  // required string unknown_field_1 = 1;
  if (_internal_has_unknown_field_1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_unknown_field_1());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnknownPlayRequest1_UnknownPlayRequest1Nested1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnknownPlayRequest1_UnknownPlayRequest1Nested1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnknownPlayRequest1_UnknownPlayRequest1Nested1::GetClassData() const { return &_class_data_; }


void UnknownPlayRequest1_UnknownPlayRequest1Nested1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnknownPlayRequest1_UnknownPlayRequest1Nested1*>(&to_msg);
  auto& from = static_cast<const UnknownPlayRequest1_UnknownPlayRequest1Nested1&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openfoxwq.UnknownPlayRequest1.UnknownPlayRequest1Nested1)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_unknown_field_1()) {
    _this->_internal_set_unknown_field_1(from._internal_unknown_field_1());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnknownPlayRequest1_UnknownPlayRequest1Nested1::CopyFrom(const UnknownPlayRequest1_UnknownPlayRequest1Nested1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openfoxwq.UnknownPlayRequest1.UnknownPlayRequest1Nested1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnknownPlayRequest1_UnknownPlayRequest1Nested1::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void UnknownPlayRequest1_UnknownPlayRequest1Nested1::InternalSwap(UnknownPlayRequest1_UnknownPlayRequest1Nested1* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.unknown_field_1_, lhs_arena,
      &other->_impl_.unknown_field_1_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UnknownPlayRequest1_UnknownPlayRequest1Nested1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fplay_2eproto_getter, &descriptor_table_proto_2fplay_2eproto_once,
      file_level_metadata_proto_2fplay_2eproto[14]);
}

// ===================================================================

class UnknownPlayRequest1::_Internal {
 public:
  using HasBits = decltype(std::declval<UnknownPlayRequest1>()._impl_._has_bits_);
  static const ::openfoxwq::UnknownPlayRequest1_UnknownPlayRequest1Nested1& unknown_field_1(const UnknownPlayRequest1* msg);
  static void set_has_unknown_field_1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_unknown_field_2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::openfoxwq::UnknownPlayRequest1_UnknownPlayRequest1Nested1&
UnknownPlayRequest1::_Internal::unknown_field_1(const UnknownPlayRequest1* msg) {
  return *msg->_impl_.unknown_field_1_;
}
UnknownPlayRequest1::UnknownPlayRequest1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openfoxwq.UnknownPlayRequest1)
}
UnknownPlayRequest1::UnknownPlayRequest1(const UnknownPlayRequest1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnknownPlayRequest1* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unknown_field_1_){nullptr}
    , decltype(_impl_.unknown_field_2_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_unknown_field_1()) {
    _this->_impl_.unknown_field_1_ = new ::openfoxwq::UnknownPlayRequest1_UnknownPlayRequest1Nested1(*from._impl_.unknown_field_1_);
  }
  _this->_impl_.unknown_field_2_ = from._impl_.unknown_field_2_;
  // @@protoc_insertion_point(copy_constructor:openfoxwq.UnknownPlayRequest1)
}

inline void UnknownPlayRequest1::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unknown_field_1_){nullptr}
    , decltype(_impl_.unknown_field_2_){int64_t{0}}
  };
}

UnknownPlayRequest1::~UnknownPlayRequest1() {
  // @@protoc_insertion_point(destructor:openfoxwq.UnknownPlayRequest1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnknownPlayRequest1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.unknown_field_1_;
}

void UnknownPlayRequest1::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnknownPlayRequest1::Clear() {
// @@protoc_insertion_point(message_clear_start:openfoxwq.UnknownPlayRequest1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.unknown_field_1_ != nullptr);
    _impl_.unknown_field_1_->Clear();
  }
  _impl_.unknown_field_2_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnknownPlayRequest1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .openfoxwq.UnknownPlayRequest1.UnknownPlayRequest1Nested1 unknown_field_1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_unknown_field_1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 unknown_field_2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_unknown_field_2(&has_bits);
          _impl_.unknown_field_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnknownPlayRequest1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openfoxwq.UnknownPlayRequest1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .openfoxwq.UnknownPlayRequest1.UnknownPlayRequest1Nested1 unknown_field_1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::unknown_field_1(this),
        _Internal::unknown_field_1(this).GetCachedSize(), target, stream);
  }

  // required int64 unknown_field_2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_unknown_field_2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openfoxwq.UnknownPlayRequest1)
  return target;
}

size_t UnknownPlayRequest1::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:openfoxwq.UnknownPlayRequest1)
  size_t total_size = 0;

  if (_internal_has_unknown_field_1()) {
    // required .openfoxwq.UnknownPlayRequest1.UnknownPlayRequest1Nested1 unknown_field_1 = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.unknown_field_1_);
  }

  if (_internal_has_unknown_field_2()) {
    // required int64 unknown_field_2 = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_unknown_field_2());
  }

  return total_size;
}
size_t UnknownPlayRequest1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openfoxwq.UnknownPlayRequest1)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .openfoxwq.UnknownPlayRequest1.UnknownPlayRequest1Nested1 unknown_field_1 = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.unknown_field_1_);

    // required int64 unknown_field_2 = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_unknown_field_2());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnknownPlayRequest1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnknownPlayRequest1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnknownPlayRequest1::GetClassData() const { return &_class_data_; }


void UnknownPlayRequest1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnknownPlayRequest1*>(&to_msg);
  auto& from = static_cast<const UnknownPlayRequest1&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openfoxwq.UnknownPlayRequest1)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_unknown_field_1()->::openfoxwq::UnknownPlayRequest1_UnknownPlayRequest1Nested1::MergeFrom(
          from._internal_unknown_field_1());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.unknown_field_2_ = from._impl_.unknown_field_2_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnknownPlayRequest1::CopyFrom(const UnknownPlayRequest1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openfoxwq.UnknownPlayRequest1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnknownPlayRequest1::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_unknown_field_1()) {
    if (!_impl_.unknown_field_1_->IsInitialized()) return false;
  }
  return true;
}

void UnknownPlayRequest1::InternalSwap(UnknownPlayRequest1* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnknownPlayRequest1, _impl_.unknown_field_2_)
      + sizeof(UnknownPlayRequest1::_impl_.unknown_field_2_)
      - PROTOBUF_FIELD_OFFSET(UnknownPlayRequest1, _impl_.unknown_field_1_)>(
          reinterpret_cast<char*>(&_impl_.unknown_field_1_),
          reinterpret_cast<char*>(&other->_impl_.unknown_field_1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnknownPlayRequest1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fplay_2eproto_getter, &descriptor_table_proto_2fplay_2eproto_once,
      file_level_metadata_proto_2fplay_2eproto[15]);
}

// ===================================================================

class UnknownPlayResponse1::_Internal {
 public:
  using HasBits = decltype(std::declval<UnknownPlayResponse1>()._impl_._has_bits_);
  static void set_has_unknown_field_1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UnknownPlayResponse1::UnknownPlayResponse1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openfoxwq.UnknownPlayResponse1)
}
UnknownPlayResponse1::UnknownPlayResponse1(const UnknownPlayResponse1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnknownPlayResponse1* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unknown_field_1_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.unknown_field_1_ = from._impl_.unknown_field_1_;
  // @@protoc_insertion_point(copy_constructor:openfoxwq.UnknownPlayResponse1)
}

inline void UnknownPlayResponse1::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unknown_field_1_){int64_t{0}}
  };
}

UnknownPlayResponse1::~UnknownPlayResponse1() {
  // @@protoc_insertion_point(destructor:openfoxwq.UnknownPlayResponse1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnknownPlayResponse1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UnknownPlayResponse1::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnknownPlayResponse1::Clear() {
// @@protoc_insertion_point(message_clear_start:openfoxwq.UnknownPlayResponse1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.unknown_field_1_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnknownPlayResponse1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 unknown_field_1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_unknown_field_1(&has_bits);
          _impl_.unknown_field_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnknownPlayResponse1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openfoxwq.UnknownPlayResponse1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 unknown_field_1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_unknown_field_1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openfoxwq.UnknownPlayResponse1)
  return target;
}

size_t UnknownPlayResponse1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openfoxwq.UnknownPlayResponse1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 unknown_field_1 = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_unknown_field_1());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnknownPlayResponse1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnknownPlayResponse1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnknownPlayResponse1::GetClassData() const { return &_class_data_; }


void UnknownPlayResponse1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnknownPlayResponse1*>(&to_msg);
  auto& from = static_cast<const UnknownPlayResponse1&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openfoxwq.UnknownPlayResponse1)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_unknown_field_1()) {
    _this->_internal_set_unknown_field_1(from._internal_unknown_field_1());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnknownPlayResponse1::CopyFrom(const UnknownPlayResponse1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openfoxwq.UnknownPlayResponse1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnknownPlayResponse1::IsInitialized() const {
  return true;
}

void UnknownPlayResponse1::InternalSwap(UnknownPlayResponse1* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.unknown_field_1_, other->_impl_.unknown_field_1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnknownPlayResponse1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fplay_2eproto_getter, &descriptor_table_proto_2fplay_2eproto_once,
      file_level_metadata_proto_2fplay_2eproto[16]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace openfoxwq
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::openfoxwq::LoginPlayServerRequest*
Arena::CreateMaybeMessage< ::openfoxwq::LoginPlayServerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openfoxwq::LoginPlayServerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::openfoxwq::LoginPlayServerResponse*
Arena::CreateMaybeMessage< ::openfoxwq::LoginPlayServerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openfoxwq::LoginPlayServerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::openfoxwq::ListPlayersRequest*
Arena::CreateMaybeMessage< ::openfoxwq::ListPlayersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openfoxwq::ListPlayersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::openfoxwq::ListPlayersResponse*
Arena::CreateMaybeMessage< ::openfoxwq::ListPlayersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openfoxwq::ListPlayersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::openfoxwq::GetPlayerInfoRequest*
Arena::CreateMaybeMessage< ::openfoxwq::GetPlayerInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openfoxwq::GetPlayerInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::openfoxwq::GetPlayerInfoResponse_RegisterInfo*
Arena::CreateMaybeMessage< ::openfoxwq::GetPlayerInfoResponse_RegisterInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openfoxwq::GetPlayerInfoResponse_RegisterInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::openfoxwq::GetPlayerInfoResponse*
Arena::CreateMaybeMessage< ::openfoxwq::GetPlayerInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openfoxwq::GetPlayerInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::openfoxwq::InfoOptions*
Arena::CreateMaybeMessage< ::openfoxwq::InfoOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openfoxwq::InfoOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::openfoxwq::SyncTimeRequest*
Arena::CreateMaybeMessage< ::openfoxwq::SyncTimeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openfoxwq::SyncTimeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::openfoxwq::SyncTimeResponse*
Arena::CreateMaybeMessage< ::openfoxwq::SyncTimeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openfoxwq::SyncTimeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::openfoxwq::SyncPlayersRequest*
Arena::CreateMaybeMessage< ::openfoxwq::SyncPlayersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openfoxwq::SyncPlayersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::openfoxwq::SyncPlayersResponse*
Arena::CreateMaybeMessage< ::openfoxwq::SyncPlayersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openfoxwq::SyncPlayersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::openfoxwq::PlayerStateEvent*
Arena::CreateMaybeMessage< ::openfoxwq::PlayerStateEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openfoxwq::PlayerStateEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::openfoxwq::UnknownPlayerEvent1*
Arena::CreateMaybeMessage< ::openfoxwq::UnknownPlayerEvent1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openfoxwq::UnknownPlayerEvent1 >(arena);
}
template<> PROTOBUF_NOINLINE ::openfoxwq::UnknownPlayRequest1_UnknownPlayRequest1Nested1*
Arena::CreateMaybeMessage< ::openfoxwq::UnknownPlayRequest1_UnknownPlayRequest1Nested1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openfoxwq::UnknownPlayRequest1_UnknownPlayRequest1Nested1 >(arena);
}
template<> PROTOBUF_NOINLINE ::openfoxwq::UnknownPlayRequest1*
Arena::CreateMaybeMessage< ::openfoxwq::UnknownPlayRequest1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openfoxwq::UnknownPlayRequest1 >(arena);
}
template<> PROTOBUF_NOINLINE ::openfoxwq::UnknownPlayResponse1*
Arena::CreateMaybeMessage< ::openfoxwq::UnknownPlayResponse1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openfoxwq::UnknownPlayResponse1 >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
