// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/reqOption.proto

#include "proto/reqOption.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace openfoxwq {
PROTOBUF_CONSTEXPR MessageTag::MessageTag(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.req_)*/0u
  , /*decltype(_impl_.resp_)*/0u} {}
struct MessageTagDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageTagDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageTagDefaultTypeInternal() {}
  union {
    MessageTag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageTagDefaultTypeInternal _MessageTag_default_instance_;
PROTOBUF_CONSTEXPR MessageHeader::MessageHeader(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.unknown_field_13_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.unknown_field_2_)*/int64_t{0}
  , /*decltype(_impl_.player_id_)*/int64_t{0}
  , /*decltype(_impl_.unknown_field_4_)*/int64_t{0}
  , /*decltype(_impl_.tag1_)*/0u
  , /*decltype(_impl_.tag2_)*/0u
  , /*decltype(_impl_.unknown_field_5_)*/int64_t{0}
  , /*decltype(_impl_.unknown_field_6_)*/int64_t{0}
  , /*decltype(_impl_.unknown_field_8_)*/int64_t{0}
  , /*decltype(_impl_.unknown_field_9_)*/int64_t{0}
  , /*decltype(_impl_.unknown_field_12_)*/int64_t{0}
  , /*decltype(_impl_.unknown_field_15_)*/int64_t{0}} {}
struct MessageHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageHeaderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageHeaderDefaultTypeInternal() {}
  union {
    MessageHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageHeaderDefaultTypeInternal _MessageHeader_default_instance_;
}  // namespace openfoxwq
static ::_pb::Metadata file_level_metadata_proto_2freqOption_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_proto_2freqOption_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_proto_2freqOption_2eproto = nullptr;

const uint32_t TableStruct_proto_2freqOption_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::openfoxwq::MessageTag, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::MessageTag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openfoxwq::MessageTag, _impl_.req_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::MessageTag, _impl_.resp_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::MessageTag, _impl_.header_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::openfoxwq::MessageHeader, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::MessageHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openfoxwq::MessageHeader, _impl_.tag1_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::MessageHeader, _impl_.tag2_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::MessageHeader, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::MessageHeader, _impl_.unknown_field_2_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::MessageHeader, _impl_.unknown_field_4_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::MessageHeader, _impl_.unknown_field_5_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::MessageHeader, _impl_.unknown_field_6_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::MessageHeader, _impl_.unknown_field_8_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::MessageHeader, _impl_.unknown_field_9_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::MessageHeader, _impl_.unknown_field_12_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::MessageHeader, _impl_.unknown_field_13_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::MessageHeader, _impl_.unknown_field_15_),
  4,
  5,
  2,
  1,
  3,
  6,
  7,
  8,
  9,
  10,
  0,
  11,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::openfoxwq::MessageTag)},
  { 12, 30, -1, sizeof(::openfoxwq::MessageHeader)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::openfoxwq::_MessageTag_default_instance_._instance,
  &::openfoxwq::_MessageHeader_default_instance_._instance,
};

const char descriptor_table_protodef_proto_2freqOption_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025proto/reqOption.proto\022\topenfoxwq\032 goog"
  "le/protobuf/descriptor.proto\"Q\n\nMessageT"
  "ag\022\013\n\003req\030\001 \001(\r\022\014\n\004resp\030\002 \001(\r\022(\n\006header\030"
  "\003 \001(\0132\030.openfoxwq.MessageHeader\"\242\002\n\rMess"
  "ageHeader\022\014\n\004tag1\030\001 \002(\r\022\014\n\004tag2\030\007 \002(\r\022\021\n"
  "\tplayer_id\030\003 \001(\003\022\027\n\017unknown_field_2\030\002 \001("
  "\003\022\027\n\017unknown_field_4\030\004 \001(\003\022\027\n\017unknown_fi"
  "eld_5\030\005 \001(\003\022\027\n\017unknown_field_6\030\006 \001(\003\022\027\n\017"
  "unknown_field_8\030\010 \001(\003\022\027\n\017unknown_field_9"
  "\030\t \001(\003\022\030\n\020unknown_field_12\030\014 \001(\003\022\030\n\020unkn"
  "own_field_13\030\r \001(\t\022\030\n\020unknown_field_15\030\017"
  " \001(\003:H\n\007msg_tag\022\036.google.protobuf.Method"
  "Options\030\320\206\003 \001(\0132\025.openfoxwq.MessageTagB&"
  "Z$github.com/openfoxwq/openfoxwq/proto"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_proto_2freqOption_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
};
static ::_pbi::once_flag descriptor_table_proto_2freqOption_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_proto_2freqOption_2eproto = {
    false, false, 558, descriptor_table_protodef_proto_2freqOption_2eproto,
    "proto/reqOption.proto",
    &descriptor_table_proto_2freqOption_2eproto_once, descriptor_table_proto_2freqOption_2eproto_deps, 1, 2,
    schemas, file_default_instances, TableStruct_proto_2freqOption_2eproto::offsets,
    file_level_metadata_proto_2freqOption_2eproto, file_level_enum_descriptors_proto_2freqOption_2eproto,
    file_level_service_descriptors_proto_2freqOption_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_proto_2freqOption_2eproto_getter() {
  return &descriptor_table_proto_2freqOption_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_proto_2freqOption_2eproto(&descriptor_table_proto_2freqOption_2eproto);
namespace openfoxwq {

// ===================================================================

class MessageTag::_Internal {
 public:
  using HasBits = decltype(std::declval<MessageTag>()._impl_._has_bits_);
  static void set_has_req(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_resp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::openfoxwq::MessageHeader& header(const MessageTag* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::openfoxwq::MessageHeader&
MessageTag::_Internal::header(const MessageTag* msg) {
  return *msg->_impl_.header_;
}
MessageTag::MessageTag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openfoxwq.MessageTag)
}
MessageTag::MessageTag(const MessageTag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MessageTag* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.req_){}
    , decltype(_impl_.resp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::openfoxwq::MessageHeader(*from._impl_.header_);
  }
  ::memcpy(&_impl_.req_, &from._impl_.req_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.resp_) -
    reinterpret_cast<char*>(&_impl_.req_)) + sizeof(_impl_.resp_));
  // @@protoc_insertion_point(copy_constructor:openfoxwq.MessageTag)
}

inline void MessageTag::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.req_){0u}
    , decltype(_impl_.resp_){0u}
  };
}

MessageTag::~MessageTag() {
  // @@protoc_insertion_point(destructor:openfoxwq.MessageTag)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MessageTag::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
}

void MessageTag::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MessageTag::Clear() {
// @@protoc_insertion_point(message_clear_start:openfoxwq.MessageTag)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.header_ != nullptr);
    _impl_.header_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.req_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.resp_) -
        reinterpret_cast<char*>(&_impl_.req_)) + sizeof(_impl_.resp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageTag::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 req = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_req(&has_bits);
          _impl_.req_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 resp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_resp(&has_bits);
          _impl_.resp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .openfoxwq.MessageHeader header = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessageTag::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openfoxwq.MessageTag)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 req = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_req(), target);
  }

  // optional uint32 resp = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_resp(), target);
  }

  // optional .openfoxwq.MessageHeader header = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openfoxwq.MessageTag)
  return target;
}

size_t MessageTag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openfoxwq.MessageTag)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .openfoxwq.MessageHeader header = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // optional uint32 req = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_req());
    }

    // optional uint32 resp = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_resp());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageTag::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MessageTag::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageTag::GetClassData() const { return &_class_data_; }


void MessageTag::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MessageTag*>(&to_msg);
  auto& from = static_cast<const MessageTag&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openfoxwq.MessageTag)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_header()->::openfoxwq::MessageHeader::MergeFrom(
          from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.req_ = from._impl_.req_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.resp_ = from._impl_.resp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageTag::CopyFrom(const MessageTag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openfoxwq.MessageTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageTag::IsInitialized() const {
  if (_internal_has_header()) {
    if (!_impl_.header_->IsInitialized()) return false;
  }
  return true;
}

void MessageTag::InternalSwap(MessageTag* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessageTag, _impl_.resp_)
      + sizeof(MessageTag::_impl_.resp_)
      - PROTOBUF_FIELD_OFFSET(MessageTag, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageTag::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2freqOption_2eproto_getter, &descriptor_table_proto_2freqOption_2eproto_once,
      file_level_metadata_proto_2freqOption_2eproto[0]);
}

// ===================================================================

class MessageHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<MessageHeader>()._impl_._has_bits_);
  static void set_has_tag1(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_tag2(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_unknown_field_2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_unknown_field_4(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_unknown_field_5(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_unknown_field_6(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_unknown_field_8(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_unknown_field_9(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_unknown_field_12(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_unknown_field_13(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_unknown_field_15(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000030) ^ 0x00000030) != 0;
  }
};

MessageHeader::MessageHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openfoxwq.MessageHeader)
}
MessageHeader::MessageHeader(const MessageHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MessageHeader* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unknown_field_13_){}
    , decltype(_impl_.unknown_field_2_){}
    , decltype(_impl_.player_id_){}
    , decltype(_impl_.unknown_field_4_){}
    , decltype(_impl_.tag1_){}
    , decltype(_impl_.tag2_){}
    , decltype(_impl_.unknown_field_5_){}
    , decltype(_impl_.unknown_field_6_){}
    , decltype(_impl_.unknown_field_8_){}
    , decltype(_impl_.unknown_field_9_){}
    , decltype(_impl_.unknown_field_12_){}
    , decltype(_impl_.unknown_field_15_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.unknown_field_13_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unknown_field_13_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_unknown_field_13()) {
    _this->_impl_.unknown_field_13_.Set(from._internal_unknown_field_13(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.unknown_field_2_, &from._impl_.unknown_field_2_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.unknown_field_15_) -
    reinterpret_cast<char*>(&_impl_.unknown_field_2_)) + sizeof(_impl_.unknown_field_15_));
  // @@protoc_insertion_point(copy_constructor:openfoxwq.MessageHeader)
}

inline void MessageHeader::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unknown_field_13_){}
    , decltype(_impl_.unknown_field_2_){int64_t{0}}
    , decltype(_impl_.player_id_){int64_t{0}}
    , decltype(_impl_.unknown_field_4_){int64_t{0}}
    , decltype(_impl_.tag1_){0u}
    , decltype(_impl_.tag2_){0u}
    , decltype(_impl_.unknown_field_5_){int64_t{0}}
    , decltype(_impl_.unknown_field_6_){int64_t{0}}
    , decltype(_impl_.unknown_field_8_){int64_t{0}}
    , decltype(_impl_.unknown_field_9_){int64_t{0}}
    , decltype(_impl_.unknown_field_12_){int64_t{0}}
    , decltype(_impl_.unknown_field_15_){int64_t{0}}
  };
  _impl_.unknown_field_13_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unknown_field_13_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MessageHeader::~MessageHeader() {
  // @@protoc_insertion_point(destructor:openfoxwq.MessageHeader)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MessageHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.unknown_field_13_.Destroy();
}

void MessageHeader::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MessageHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:openfoxwq.MessageHeader)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.unknown_field_13_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.unknown_field_2_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.unknown_field_6_) -
        reinterpret_cast<char*>(&_impl_.unknown_field_2_)) + sizeof(_impl_.unknown_field_6_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&_impl_.unknown_field_8_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.unknown_field_15_) -
        reinterpret_cast<char*>(&_impl_.unknown_field_8_)) + sizeof(_impl_.unknown_field_15_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageHeader::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 tag1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_tag1(&has_bits);
          _impl_.tag1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 unknown_field_2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_unknown_field_2(&has_bits);
          _impl_.unknown_field_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 player_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 unknown_field_4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_unknown_field_4(&has_bits);
          _impl_.unknown_field_4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 unknown_field_5 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_unknown_field_5(&has_bits);
          _impl_.unknown_field_5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 unknown_field_6 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_unknown_field_6(&has_bits);
          _impl_.unknown_field_6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 tag2 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_tag2(&has_bits);
          _impl_.tag2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 unknown_field_8 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_unknown_field_8(&has_bits);
          _impl_.unknown_field_8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 unknown_field_9 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_unknown_field_9(&has_bits);
          _impl_.unknown_field_9_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 unknown_field_12 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_unknown_field_12(&has_bits);
          _impl_.unknown_field_12_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string unknown_field_13 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_unknown_field_13();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "openfoxwq.MessageHeader.unknown_field_13");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int64 unknown_field_15 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_unknown_field_15(&has_bits);
          _impl_.unknown_field_15_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessageHeader::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openfoxwq.MessageHeader)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 tag1 = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tag1(), target);
  }

  // optional int64 unknown_field_2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_unknown_field_2(), target);
  }

  // optional int64 player_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_player_id(), target);
  }

  // optional int64 unknown_field_4 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_unknown_field_4(), target);
  }

  // optional int64 unknown_field_5 = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_unknown_field_5(), target);
  }

  // optional int64 unknown_field_6 = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_unknown_field_6(), target);
  }

  // required uint32 tag2 = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_tag2(), target);
  }

  // optional int64 unknown_field_8 = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_unknown_field_8(), target);
  }

  // optional int64 unknown_field_9 = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_unknown_field_9(), target);
  }

  // optional int64 unknown_field_12 = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_unknown_field_12(), target);
  }

  // optional string unknown_field_13 = 13;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_unknown_field_13().data(), static_cast<int>(this->_internal_unknown_field_13().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "openfoxwq.MessageHeader.unknown_field_13");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_unknown_field_13(), target);
  }

  // optional int64 unknown_field_15 = 15;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(15, this->_internal_unknown_field_15(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openfoxwq.MessageHeader)
  return target;
}

size_t MessageHeader::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:openfoxwq.MessageHeader)
  size_t total_size = 0;

  if (_internal_has_tag1()) {
    // required uint32 tag1 = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tag1());
  }

  if (_internal_has_tag2()) {
    // required uint32 tag2 = 7;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tag2());
  }

  return total_size;
}
size_t MessageHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openfoxwq.MessageHeader)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000030) ^ 0x00000030) == 0) {  // All required fields are present.
    // required uint32 tag1 = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tag1());

    // required uint32 tag2 = 7;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tag2());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string unknown_field_13 = 13;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_unknown_field_13());
    }

    // optional int64 unknown_field_2 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_unknown_field_2());
    }

    // optional int64 player_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_player_id());
    }

    // optional int64 unknown_field_4 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_unknown_field_4());
    }

  }
  if (cached_has_bits & 0x000000c0u) {
    // optional int64 unknown_field_5 = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_unknown_field_5());
    }

    // optional int64 unknown_field_6 = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_unknown_field_6());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional int64 unknown_field_8 = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_unknown_field_8());
    }

    // optional int64 unknown_field_9 = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_unknown_field_9());
    }

    // optional int64 unknown_field_12 = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_unknown_field_12());
    }

    // optional int64 unknown_field_15 = 15;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_unknown_field_15());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MessageHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageHeader::GetClassData() const { return &_class_data_; }


void MessageHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MessageHeader*>(&to_msg);
  auto& from = static_cast<const MessageHeader&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openfoxwq.MessageHeader)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_unknown_field_13(from._internal_unknown_field_13());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.unknown_field_2_ = from._impl_.unknown_field_2_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.unknown_field_4_ = from._impl_.unknown_field_4_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.tag1_ = from._impl_.tag1_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.tag2_ = from._impl_.tag2_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.unknown_field_5_ = from._impl_.unknown_field_5_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.unknown_field_6_ = from._impl_.unknown_field_6_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.unknown_field_8_ = from._impl_.unknown_field_8_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.unknown_field_9_ = from._impl_.unknown_field_9_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.unknown_field_12_ = from._impl_.unknown_field_12_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.unknown_field_15_ = from._impl_.unknown_field_15_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageHeader::CopyFrom(const MessageHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openfoxwq.MessageHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageHeader::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void MessageHeader::InternalSwap(MessageHeader* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.unknown_field_13_, lhs_arena,
      &other->_impl_.unknown_field_13_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessageHeader, _impl_.unknown_field_15_)
      + sizeof(MessageHeader::_impl_.unknown_field_15_)
      - PROTOBUF_FIELD_OFFSET(MessageHeader, _impl_.unknown_field_2_)>(
          reinterpret_cast<char*>(&_impl_.unknown_field_2_),
          reinterpret_cast<char*>(&other->_impl_.unknown_field_2_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageHeader::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2freqOption_2eproto_getter, &descriptor_table_proto_2freqOption_2eproto_once,
      file_level_metadata_proto_2freqOption_2eproto[1]);
}
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::MethodOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::openfoxwq::MessageTag >, 11, false>
  msg_tag(kMsgTagFieldNumber, ::openfoxwq::MessageTag::default_instance(), nullptr);

// @@protoc_insertion_point(namespace_scope)
}  // namespace openfoxwq
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::openfoxwq::MessageTag*
Arena::CreateMaybeMessage< ::openfoxwq::MessageTag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openfoxwq::MessageTag >(arena);
}
template<> PROTOBUF_NOINLINE ::openfoxwq::MessageHeader*
Arena::CreateMaybeMessage< ::openfoxwq::MessageHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openfoxwq::MessageHeader >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
