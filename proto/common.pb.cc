// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/common.proto

#include "proto/common.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace openfoxwq {
PROTOBUF_CONSTEXPR VersionInfo::VersionInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.qgi_)*/{}
  , /*decltype(_impl_.qgi_hash_)*/{}
  , /*decltype(_impl_.update_info_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.install_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version1_)*/int64_t{0}
  , /*decltype(_impl_.version2_)*/int64_t{0}} {}
struct VersionInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VersionInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VersionInfoDefaultTypeInternal() {}
  union {
    VersionInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VersionInfoDefaultTypeInternal _VersionInfo_default_instance_;
PROTOBUF_CONSTEXPR ProxyLineInfo_ProxyAddressInfo::ProxyLineInfo_ProxyAddressInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.host1_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.host2_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.port1_)*/int64_t{0}
  , /*decltype(_impl_.port2_)*/int64_t{0}} {}
struct ProxyLineInfo_ProxyAddressInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProxyLineInfo_ProxyAddressInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProxyLineInfo_ProxyAddressInfoDefaultTypeInternal() {}
  union {
    ProxyLineInfo_ProxyAddressInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProxyLineInfo_ProxyAddressInfoDefaultTypeInternal _ProxyLineInfo_ProxyAddressInfo_default_instance_;
PROTOBUF_CONSTEXPR ProxyLineInfo::ProxyLineInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.address_info_)*/nullptr
  , /*decltype(_impl_.index_)*/int64_t{0}} {}
struct ProxyLineInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProxyLineInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProxyLineInfoDefaultTypeInternal() {}
  union {
    ProxyLineInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProxyLineInfoDefaultTypeInternal _ProxyLineInfo_default_instance_;
PROTOBUF_CONSTEXPR LobbySvrInfo_NameLocEntry_DoNotUse::LobbySvrInfo_NameLocEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct LobbySvrInfo_NameLocEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LobbySvrInfo_NameLocEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LobbySvrInfo_NameLocEntry_DoNotUseDefaultTypeInternal() {}
  union {
    LobbySvrInfo_NameLocEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LobbySvrInfo_NameLocEntry_DoNotUseDefaultTypeInternal _LobbySvrInfo_NameLocEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR LobbySvrInfo::LobbySvrInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_loc_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.broadcast_host_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.unknown_host_1_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.unknown_host_2_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.unknown_host_3_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.unknown_host_4_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.play_host_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.num_players_)*/int64_t{0}
  , /*decltype(_impl_.num_matches_)*/int64_t{0}
  , /*decltype(_impl_.unknown_field_7_)*/int64_t{0}
  , /*decltype(_impl_.unknown_field_8_)*/int64_t{0}
  , /*decltype(_impl_.broadcast_port_)*/0
  , /*decltype(_impl_.unknown_port_1_)*/0
  , /*decltype(_impl_.unknown_port_2_)*/0
  , /*decltype(_impl_.unknown_port_3_)*/0
  , /*decltype(_impl_.unknown_port_4_)*/0
  , /*decltype(_impl_.play_port_)*/0} {}
struct LobbySvrInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LobbySvrInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LobbySvrInfoDefaultTypeInternal() {}
  union {
    LobbySvrInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LobbySvrInfoDefaultTypeInternal _LobbySvrInfo_default_instance_;
PROTOBUF_CONSTEXPR PlayerInfo::PlayerInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_native_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.player_id_)*/int64_t{0}
  , /*decltype(_impl_.rank_)*/0
  , /*decltype(_impl_.country_)*/0
  , /*decltype(_impl_.club_id_)*/int64_t{0}
  , /*decltype(_impl_.unknown_field_8_)*/int64_t{0}
  , /*decltype(_impl_.accepting_matches_)*/false
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_.ranked_wins_)*/int64_t{0}
  , /*decltype(_impl_.ranked_losses_)*/int64_t{0}
  , /*decltype(_impl_.unknown_field_13_)*/int64_t{0}
  , /*decltype(_impl_.fox_coin_)*/int64_t{0}} {}
struct PlayerInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerInfoDefaultTypeInternal() {}
  union {
    PlayerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerInfoDefaultTypeInternal _PlayerInfo_default_instance_;
PROTOBUF_CONSTEXPR ExtraPlayerInfo::ExtraPlayerInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.current_results_)*/nullptr
  , /*decltype(_impl_.ranked_results_)*/nullptr
  , /*decltype(_impl_.free_results_)*/nullptr
  , /*decltype(_impl_.player_id_)*/int64_t{0}} {}
struct ExtraPlayerInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExtraPlayerInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExtraPlayerInfoDefaultTypeInternal() {}
  union {
    ExtraPlayerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExtraPlayerInfoDefaultTypeInternal _ExtraPlayerInfo_default_instance_;
PROTOBUF_CONSTEXPR GameResults::GameResults(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.wins_)*/int64_t{0}
  , /*decltype(_impl_.losses_)*/int64_t{0}
  , /*decltype(_impl_.draws_)*/int64_t{0}} {}
struct GameResultsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameResultsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameResultsDefaultTypeInternal() {}
  union {
    GameResults _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameResultsDefaultTypeInternal _GameResults_default_instance_;
PROTOBUF_CONSTEXPR ExtendedGameResults::ExtendedGameResults(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.wins_)*/int64_t{0}
  , /*decltype(_impl_.losses_)*/int64_t{0}
  , /*decltype(_impl_.draws_)*/int64_t{0}
  , /*decltype(_impl_.typ_)*/0} {}
struct ExtendedGameResultsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExtendedGameResultsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExtendedGameResultsDefaultTypeInternal() {}
  union {
    ExtendedGameResults _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExtendedGameResultsDefaultTypeInternal _ExtendedGameResults_default_instance_;
PROTOBUF_CONSTEXPR UnhandledMessage::UnhandledMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct UnhandledMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnhandledMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnhandledMessageDefaultTypeInternal() {}
  union {
    UnhandledMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnhandledMessageDefaultTypeInternal _UnhandledMessage_default_instance_;
PROTOBUF_CONSTEXPR BroadcastRoomInfo_BroadcastRoomPlayerInfo::BroadcastRoomInfo_BroadcastRoomPlayerInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_alt_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rank_)*/0
  , /*decltype(_impl_.country_)*/0} {}
struct BroadcastRoomInfo_BroadcastRoomPlayerInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BroadcastRoomInfo_BroadcastRoomPlayerInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BroadcastRoomInfo_BroadcastRoomPlayerInfoDefaultTypeInternal() {}
  union {
    BroadcastRoomInfo_BroadcastRoomPlayerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BroadcastRoomInfo_BroadcastRoomPlayerInfoDefaultTypeInternal _BroadcastRoomInfo_BroadcastRoomPlayerInfo_default_instance_;
PROTOBUF_CONSTEXPR BroadcastRoomInfo::BroadcastRoomInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.broadcaster_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.player_info_black_)*/nullptr
  , /*decltype(_impl_.player_info_white_)*/nullptr
  , /*decltype(_impl_.room_id_)*/int64_t{0}
  , /*decltype(_impl_.room_type_)*/0
  , /*decltype(_impl_.room_state_)*/0
  , /*decltype(_impl_.online_count_)*/int64_t{0}
  , /*decltype(_impl_.player_id_black_)*/int64_t{0}
  , /*decltype(_impl_.player_id_white_)*/int64_t{0}} {}
struct BroadcastRoomInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BroadcastRoomInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BroadcastRoomInfoDefaultTypeInternal() {}
  union {
    BroadcastRoomInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BroadcastRoomInfoDefaultTypeInternal _BroadcastRoomInfo_default_instance_;
}  // namespace openfoxwq
static ::_pb::Metadata file_level_metadata_proto_2fcommon_2eproto[12];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_proto_2fcommon_2eproto[7];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_proto_2fcommon_2eproto = nullptr;

const uint32_t TableStruct_proto_2fcommon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::openfoxwq::VersionInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::VersionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openfoxwq::VersionInfo, _impl_.version1_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::VersionInfo, _impl_.version2_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::VersionInfo, _impl_.update_info_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::VersionInfo, _impl_.install_url_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::VersionInfo, _impl_.qgi_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::VersionInfo, _impl_.qgi_hash_),
  2,
  3,
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::openfoxwq::ProxyLineInfo_ProxyAddressInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::ProxyLineInfo_ProxyAddressInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openfoxwq::ProxyLineInfo_ProxyAddressInfo, _impl_.host1_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::ProxyLineInfo_ProxyAddressInfo, _impl_.port1_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::ProxyLineInfo_ProxyAddressInfo, _impl_.host2_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::ProxyLineInfo_ProxyAddressInfo, _impl_.port2_),
  0,
  2,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::openfoxwq::ProxyLineInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::ProxyLineInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openfoxwq::ProxyLineInfo, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::ProxyLineInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::ProxyLineInfo, _impl_.address_info_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LobbySvrInfo_NameLocEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LobbySvrInfo_NameLocEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LobbySvrInfo_NameLocEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LobbySvrInfo_NameLocEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LobbySvrInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LobbySvrInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LobbySvrInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LobbySvrInfo, _impl_.broadcast_host_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LobbySvrInfo, _impl_.broadcast_port_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LobbySvrInfo, _impl_.num_players_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LobbySvrInfo, _impl_.num_matches_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LobbySvrInfo, _impl_.unknown_host_1_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LobbySvrInfo, _impl_.unknown_port_1_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LobbySvrInfo, _impl_.unknown_host_2_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LobbySvrInfo, _impl_.unknown_port_2_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LobbySvrInfo, _impl_.unknown_host_3_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LobbySvrInfo, _impl_.unknown_port_3_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LobbySvrInfo, _impl_.unknown_host_4_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LobbySvrInfo, _impl_.unknown_port_4_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LobbySvrInfo, _impl_.play_host_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LobbySvrInfo, _impl_.play_port_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LobbySvrInfo, _impl_.name_loc_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LobbySvrInfo, _impl_.unknown_field_7_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LobbySvrInfo, _impl_.unknown_field_8_),
  0,
  1,
  11,
  7,
  8,
  2,
  12,
  3,
  13,
  4,
  14,
  5,
  15,
  6,
  16,
  ~0u,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::openfoxwq::PlayerInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::PlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openfoxwq::PlayerInfo, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::PlayerInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::PlayerInfo, _impl_.name_native_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::PlayerInfo, _impl_.rank_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::PlayerInfo, _impl_.country_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::PlayerInfo, _impl_.club_id_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::PlayerInfo, _impl_.accepting_matches_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::PlayerInfo, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::PlayerInfo, _impl_.ranked_wins_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::PlayerInfo, _impl_.ranked_losses_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::PlayerInfo, _impl_.fox_coin_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::PlayerInfo, _impl_.unknown_field_8_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::PlayerInfo, _impl_.unknown_field_13_),
  2,
  0,
  1,
  3,
  4,
  5,
  7,
  8,
  9,
  10,
  12,
  6,
  11,
  PROTOBUF_FIELD_OFFSET(::openfoxwq::ExtraPlayerInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::ExtraPlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openfoxwq::ExtraPlayerInfo, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::ExtraPlayerInfo, _impl_.current_results_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::ExtraPlayerInfo, _impl_.ranked_results_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::ExtraPlayerInfo, _impl_.free_results_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::openfoxwq::GameResults, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::GameResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openfoxwq::GameResults, _impl_.wins_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::GameResults, _impl_.losses_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::GameResults, _impl_.draws_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::openfoxwq::ExtendedGameResults, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::ExtendedGameResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openfoxwq::ExtendedGameResults, _impl_.typ_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::ExtendedGameResults, _impl_.wins_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::ExtendedGameResults, _impl_.losses_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::ExtendedGameResults, _impl_.draws_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::openfoxwq::UnhandledMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::UnhandledMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openfoxwq::UnhandledMessage, _impl_.tag_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::UnhandledMessage, _impl_.data_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo, _impl_.name_alt_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo, _impl_.rank_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo, _impl_.country_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::openfoxwq::BroadcastRoomInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::BroadcastRoomInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openfoxwq::BroadcastRoomInfo, _impl_.room_id_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::BroadcastRoomInfo, _impl_.room_type_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::BroadcastRoomInfo, _impl_.room_state_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::BroadcastRoomInfo, _impl_.broadcaster_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::BroadcastRoomInfo, _impl_.online_count_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::BroadcastRoomInfo, _impl_.player_id_black_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::BroadcastRoomInfo, _impl_.player_id_white_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::BroadcastRoomInfo, _impl_.player_info_black_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::BroadcastRoomInfo, _impl_.player_info_white_),
  3,
  4,
  5,
  0,
  6,
  7,
  8,
  1,
  2,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, -1, sizeof(::openfoxwq::VersionInfo)},
  { 18, 28, -1, sizeof(::openfoxwq::ProxyLineInfo_ProxyAddressInfo)},
  { 32, 41, -1, sizeof(::openfoxwq::ProxyLineInfo)},
  { 44, 52, -1, sizeof(::openfoxwq::LobbySvrInfo_NameLocEntry_DoNotUse)},
  { 54, 78, -1, sizeof(::openfoxwq::LobbySvrInfo)},
  { 96, 115, -1, sizeof(::openfoxwq::PlayerInfo)},
  { 128, 138, -1, sizeof(::openfoxwq::ExtraPlayerInfo)},
  { 142, 151, -1, sizeof(::openfoxwq::GameResults)},
  { 154, 164, -1, sizeof(::openfoxwq::ExtendedGameResults)},
  { 168, 176, -1, sizeof(::openfoxwq::UnhandledMessage)},
  { 178, 188, -1, sizeof(::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo)},
  { 192, 207, -1, sizeof(::openfoxwq::BroadcastRoomInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::openfoxwq::_VersionInfo_default_instance_._instance,
  &::openfoxwq::_ProxyLineInfo_ProxyAddressInfo_default_instance_._instance,
  &::openfoxwq::_ProxyLineInfo_default_instance_._instance,
  &::openfoxwq::_LobbySvrInfo_NameLocEntry_DoNotUse_default_instance_._instance,
  &::openfoxwq::_LobbySvrInfo_default_instance_._instance,
  &::openfoxwq::_PlayerInfo_default_instance_._instance,
  &::openfoxwq::_ExtraPlayerInfo_default_instance_._instance,
  &::openfoxwq::_GameResults_default_instance_._instance,
  &::openfoxwq::_ExtendedGameResults_default_instance_._instance,
  &::openfoxwq::_UnhandledMessage_default_instance_._instance,
  &::openfoxwq::_BroadcastRoomInfo_BroadcastRoomPlayerInfo_default_instance_._instance,
  &::openfoxwq::_BroadcastRoomInfo_default_instance_._instance,
};

const char descriptor_table_protodef_proto_2fcommon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022proto/common.proto\022\topenfoxwq\"z\n\013Versi"
  "onInfo\022\020\n\010version1\030\001 \002(\003\022\020\n\010version2\030\002 \002"
  "(\003\022\023\n\013update_info\030\003 \001(\t\022\023\n\013install_url\030\005"
  " \001(\t\022\013\n\003qgi\030\006 \003(\t\022\020\n\010qgi_hash\030\007 \003(\t\"\275\001\n\r"
  "ProxyLineInfo\022\r\n\005index\030\001 \002(\003\022\014\n\004name\030\002 \002"
  "(\t\022\?\n\014address_info\030\003 \002(\0132).openfoxwq.Pro"
  "xyLineInfo.ProxyAddressInfo\032N\n\020ProxyAddr"
  "essInfo\022\r\n\005host1\030\001 \002(\t\022\r\n\005port1\030\002 \002(\003\022\r\n"
  "\005host2\030\003 \002(\t\022\r\n\005port2\030\004 \002(\003\"\366\003\n\014LobbySvr"
  "Info\022\014\n\004name\030\002 \001(\t\022\026\n\016broadcast_host\030\005 \001"
  "(\t\022\026\n\016broadcast_port\030\006 \001(\005\022\023\n\013num_player"
  "s\030\003 \001(\003\022\023\n\013num_matches\030\004 \001(\003\022\026\n\016unknown_"
  "host_1\030\r \001(\t\022\026\n\016unknown_port_1\030\016 \001(\005\022\026\n\016"
  "unknown_host_2\030\017 \001(\t\022\026\n\016unknown_port_2\030\020"
  " \001(\005\022\026\n\016unknown_host_3\030\021 \001(\t\022\026\n\016unknown_"
  "port_3\030\022 \001(\005\022\026\n\016unknown_host_4\030\023 \001(\t\022\026\n\016"
  "unknown_port_4\030\024 \001(\005\022\021\n\tplay_host\030\025 \001(\t\022"
  "\021\n\tplay_port\030\026 \001(\005\0226\n\010name_loc\030\027 \003(\0132$.o"
  "penfoxwq.LobbySvrInfo.NameLocEntry\022\027\n\017un"
  "known_field_7\030\007 \001(\003\022\027\n\017unknown_field_8\030\010"
  " \001(\003\032.\n\014NameLocEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005val"
  "ue\030\002 \001(\t:\0028\001\"\314\002\n\nPlayerInfo\022\021\n\tplayer_id"
  "\030\001 \002(\003\022\014\n\004name\030\002 \001(\t\022\023\n\013name_native\030\003 \001("
  "\t\022\035\n\004rank\030\004 \001(\0162\017.openfoxwq.Rank\022#\n\007coun"
  "try\030\005 \001(\0162\022.openfoxwq.Country\022\017\n\007club_id"
  "\030\006 \001(\003\022\031\n\021accepting_matches\030\007 \001(\010\022\'\n\006sta"
  "tus\030\t \001(\0162\027.openfoxwq.PlayerStatus\022\023\n\013ra"
  "nked_wins\030\n \001(\003\022\025\n\rranked_losses\030\013 \001(\003\022\020"
  "\n\010fox_coin\030\025 \001(\003\022\027\n\017unknown_field_8\030\010 \001("
  "\003\022\030\n\020unknown_field_13\030\r \001(\003\"\263\001\n\017ExtraPla"
  "yerInfo\022\021\n\tplayer_id\030\001 \001(\003\022/\n\017current_re"
  "sults\030\t \001(\0132\026.openfoxwq.GameResults\022.\n\016r"
  "anked_results\030\n \001(\0132\026.openfoxwq.GameResu"
  "lts\022,\n\014free_results\030\013 \001(\0132\026.openfoxwq.Ga"
  "meResults\":\n\013GameResults\022\014\n\004wins\030\001 \002(\003\022\016"
  "\n\006losses\030\002 \002(\003\022\r\n\005draws\030\003 \002(\003\"j\n\023Extende"
  "dGameResults\022&\n\003typ\030\001 \002(\0162\031.openfoxwq.Ga"
  "meResultType\022\014\n\004wins\030\002 \002(\003\022\016\n\006losses\030\003 \002"
  "(\003\022\r\n\005draws\030\004 \002(\003\"-\n\020UnhandledMessage\022\013\n"
  "\003tag\030\001 \002(\t\022\014\n\004data\030\002 \002(\t\"\367\005\n\021BroadcastRo"
  "omInfo\022\017\n\007room_id\030\001 \002(\003\0228\n\troom_type\030\003 \002"
  "(\0162%.openfoxwq.BroadcastRoomInfo.RoomTyp"
  "e\022:\n\nroom_state\030\010 \001(\0162&.openfoxwq.Broadc"
  "astRoomInfo.RoomState\022\023\n\013broadcaster\030\t \001"
  "(\t\022\024\n\014online_count\030\n \002(\003\022\027\n\017player_id_bl"
  "ack\030\013 \002(\003\022\027\n\017player_id_white\030\014 \002(\003\022O\n\021pl"
  "ayer_info_black\030\r \002(\01324.openfoxwq.Broadc"
  "astRoomInfo.BroadcastRoomPlayerInfo\022O\n\021p"
  "layer_info_white\030\016 \002(\01324.openfoxwq.Broad"
  "castRoomInfo.BroadcastRoomPlayerInfo\032}\n\027"
  "BroadcastRoomPlayerInfo\022\014\n\004name\030\001 \001(\t\022\020\n"
  "\010name_alt\030\002 \001(\t\022\035\n\004rank\030\003 \001(\0162\017.openfoxw"
  "q.Rank\022#\n\007country\030\004 \001(\0162\022.openfoxwq.Coun"
  "try\"b\n\010RoomType\022\016\n\nRT_UNKNOWN\020\000\022\014\n\010RT_MA"
  "TCH\020\001\022\020\n\014RT_BROADCAST\020\004\022\021\n\rRT_COMMENTARY"
  "\020\005\022\023\n\017RT_CHAMPIONSHIP\020\006\"y\n\tRoomState\022\016\n\n"
  "RS_UNKNOWN\020\000\022\016\n\nRS_OPENING\020\001\022\016\n\nRS_1PERI"
  "OD\020\002\022\021\n\rRS_MIDDLEGAME\020\003\022\016\n\nRS_ENDGAME\020\004\022"
  "\n\n\006RS_END\020\005\022\r\n\tRS_REVIEW\020\006*6\n\005Color\022\017\n\013C"
  "OL_UNKNOWN\020\000\022\r\n\tCOL_BLACK\020\001\022\r\n\tCOL_WHITE"
  "\020\002*\377\003\n\004Rank\022\014\n\010RANK_18K\020\000\022\014\n\010RANK_17K\020\001\022"
  "\014\n\010RANK_16K\020\002\022\014\n\010RANK_15K\020\003\022\014\n\010RANK_14K\020"
  "\004\022\014\n\010RANK_13K\020\005\022\014\n\010RANK_12K\020\006\022\014\n\010RANK_11"
  "K\020\007\022\014\n\010RANK_10K\020\010\022\013\n\007RANK_9K\020\t\022\013\n\007RANK_8"
  "K\020\n\022\013\n\007RANK_7K\020\013\022\013\n\007RANK_6K\020\014\022\013\n\007RANK_5K"
  "\020\r\022\013\n\007RANK_4K\020\016\022\013\n\007RANK_3K\020\017\022\013\n\007RANK_2K\020"
  "\020\022\013\n\007RANK_1K\020\021\022\013\n\007RANK_1D\020\022\022\013\n\007RANK_2D\020\023"
  "\022\013\n\007RANK_3D\020\024\022\013\n\007RANK_4D\020\025\022\013\n\007RANK_5D\020\026\022"
  "\013\n\007RANK_6D\020\027\022\013\n\007RANK_7D\020\030\022\013\n\007RANK_8D\020\031\022\013"
  "\n\007RANK_9D\020\032\022\014\n\010RANK_10D\020\033\022\013\n\007RANK_1P\020d\022\013"
  "\n\007RANK_2P\020e\022\013\n\007RANK_3P\020f\022\013\n\007RANK_4P\020g\022\013\n"
  "\007RANK_5P\020h\022\013\n\007RANK_6P\020i\022\013\n\007RANK_7P\020j\022\013\n\007"
  "RANK_8P\020k\022\013\n\007RANK_9P\020l\022\014\n\010RANK_10P\020m*\231\002\n"
  "\007Country\022\013\n\007UNKNOWN\020\000\022\007\n\003USA\020\001\022\n\n\006RUSSIA"
  "\020\007\022\017\n\013SOUTHAFRICA\020\033\022\017\n\013NETHERLANDS\020\037\022\n\n\006"
  "FRANCE\020!\022\t\n\005ITALY\020\'\022\n\n\006SWEDEN\020.\022\013\n\007GERMA"
  "NY\0201\022\t\n\005CHILE\0208\022\017\n\013PHILIPPINES\020\?\022\r\n\tSING"
  "APORE\020A\022\t\n\005JAPAN\020Q\022\n\n\006TAIWAN\020S\022\t\n\005KOREA\020"
  "R\022\t\n\005CHINA\020V\022\014\n\007ALBANIA\020\343\002\022\014\n\007UKRAINE\020\374\002"
  "\022\r\n\010HONGKONG\020\324\006\022\n\n\005MACAU\020\325\006\022\013\n\006CANADA\020\347V"
  "*F\n\014PlayerStatus\022\020\n\014PSTATUS_IDLE\020\000\022\021\n\rPS"
  "TATUS_MATCH\020\001\022\021\n\rPSTATUS_WATCH\020\002*L\n\016Game"
  "ResultType\022\013\n\007GRT_ALL\020\000\022\017\n\013GRT_CURRENT\020\001"
  "\022\016\n\nGRT_RANKED\020\002\022\014\n\010GRT_FREE\020\005B%Z#github"
  ".com/ale64bit/openfoxwq/proto"
  ;
static ::_pbi::once_flag descriptor_table_proto_2fcommon_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_proto_2fcommon_2eproto = {
    false, false, 3389, descriptor_table_protodef_proto_2fcommon_2eproto,
    "proto/common.proto",
    &descriptor_table_proto_2fcommon_2eproto_once, nullptr, 0, 12,
    schemas, file_default_instances, TableStruct_proto_2fcommon_2eproto::offsets,
    file_level_metadata_proto_2fcommon_2eproto, file_level_enum_descriptors_proto_2fcommon_2eproto,
    file_level_service_descriptors_proto_2fcommon_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_proto_2fcommon_2eproto_getter() {
  return &descriptor_table_proto_2fcommon_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_proto_2fcommon_2eproto(&descriptor_table_proto_2fcommon_2eproto);
namespace openfoxwq {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BroadcastRoomInfo_RoomType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fcommon_2eproto);
  return file_level_enum_descriptors_proto_2fcommon_2eproto[0];
}
bool BroadcastRoomInfo_RoomType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr BroadcastRoomInfo_RoomType BroadcastRoomInfo::RT_UNKNOWN;
constexpr BroadcastRoomInfo_RoomType BroadcastRoomInfo::RT_MATCH;
constexpr BroadcastRoomInfo_RoomType BroadcastRoomInfo::RT_BROADCAST;
constexpr BroadcastRoomInfo_RoomType BroadcastRoomInfo::RT_COMMENTARY;
constexpr BroadcastRoomInfo_RoomType BroadcastRoomInfo::RT_CHAMPIONSHIP;
constexpr BroadcastRoomInfo_RoomType BroadcastRoomInfo::RoomType_MIN;
constexpr BroadcastRoomInfo_RoomType BroadcastRoomInfo::RoomType_MAX;
constexpr int BroadcastRoomInfo::RoomType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BroadcastRoomInfo_RoomState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fcommon_2eproto);
  return file_level_enum_descriptors_proto_2fcommon_2eproto[1];
}
bool BroadcastRoomInfo_RoomState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr BroadcastRoomInfo_RoomState BroadcastRoomInfo::RS_UNKNOWN;
constexpr BroadcastRoomInfo_RoomState BroadcastRoomInfo::RS_OPENING;
constexpr BroadcastRoomInfo_RoomState BroadcastRoomInfo::RS_1PERIOD;
constexpr BroadcastRoomInfo_RoomState BroadcastRoomInfo::RS_MIDDLEGAME;
constexpr BroadcastRoomInfo_RoomState BroadcastRoomInfo::RS_ENDGAME;
constexpr BroadcastRoomInfo_RoomState BroadcastRoomInfo::RS_END;
constexpr BroadcastRoomInfo_RoomState BroadcastRoomInfo::RS_REVIEW;
constexpr BroadcastRoomInfo_RoomState BroadcastRoomInfo::RoomState_MIN;
constexpr BroadcastRoomInfo_RoomState BroadcastRoomInfo::RoomState_MAX;
constexpr int BroadcastRoomInfo::RoomState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Color_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fcommon_2eproto);
  return file_level_enum_descriptors_proto_2fcommon_2eproto[2];
}
bool Color_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Rank_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fcommon_2eproto);
  return file_level_enum_descriptors_proto_2fcommon_2eproto[3];
}
bool Rank_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Country_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fcommon_2eproto);
  return file_level_enum_descriptors_proto_2fcommon_2eproto[4];
}
bool Country_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 7:
    case 27:
    case 31:
    case 33:
    case 39:
    case 46:
    case 49:
    case 56:
    case 63:
    case 65:
    case 81:
    case 82:
    case 83:
    case 86:
    case 355:
    case 380:
    case 852:
    case 853:
    case 11111:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlayerStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fcommon_2eproto);
  return file_level_enum_descriptors_proto_2fcommon_2eproto[5];
}
bool PlayerStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GameResultType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fcommon_2eproto);
  return file_level_enum_descriptors_proto_2fcommon_2eproto[6];
}
bool GameResultType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class VersionInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<VersionInfo>()._impl_._has_bits_);
  static void set_has_version1(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_version2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_update_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_install_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000c) ^ 0x0000000c) != 0;
  }
};

VersionInfo::VersionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openfoxwq.VersionInfo)
}
VersionInfo::VersionInfo(const VersionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VersionInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.qgi_){from._impl_.qgi_}
    , decltype(_impl_.qgi_hash_){from._impl_.qgi_hash_}
    , decltype(_impl_.update_info_){}
    , decltype(_impl_.install_url_){}
    , decltype(_impl_.version1_){}
    , decltype(_impl_.version2_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.update_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.update_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_update_info()) {
    _this->_impl_.update_info_.Set(from._internal_update_info(), 
      _this->GetArenaForAllocation());
  }
  _impl_.install_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.install_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_install_url()) {
    _this->_impl_.install_url_.Set(from._internal_install_url(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.version1_, &from._impl_.version1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.version2_) -
    reinterpret_cast<char*>(&_impl_.version1_)) + sizeof(_impl_.version2_));
  // @@protoc_insertion_point(copy_constructor:openfoxwq.VersionInfo)
}

inline void VersionInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.qgi_){arena}
    , decltype(_impl_.qgi_hash_){arena}
    , decltype(_impl_.update_info_){}
    , decltype(_impl_.install_url_){}
    , decltype(_impl_.version1_){int64_t{0}}
    , decltype(_impl_.version2_){int64_t{0}}
  };
  _impl_.update_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.update_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.install_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.install_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VersionInfo::~VersionInfo() {
  // @@protoc_insertion_point(destructor:openfoxwq.VersionInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VersionInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.qgi_.~RepeatedPtrField();
  _impl_.qgi_hash_.~RepeatedPtrField();
  _impl_.update_info_.Destroy();
  _impl_.install_url_.Destroy();
}

void VersionInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VersionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:openfoxwq.VersionInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.qgi_.Clear();
  _impl_.qgi_hash_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.update_info_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.install_url_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.version1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.version2_) -
        reinterpret_cast<char*>(&_impl_.version1_)) + sizeof(_impl_.version2_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VersionInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 version1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_version1(&has_bits);
          _impl_.version1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 version2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_version2(&has_bits);
          _impl_.version2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string update_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_update_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "openfoxwq.VersionInfo.update_info");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string install_url = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_install_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "openfoxwq.VersionInfo.install_url");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated string qgi = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_qgi();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "openfoxwq.VersionInfo.qgi");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string qgi_hash = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_qgi_hash();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "openfoxwq.VersionInfo.qgi_hash");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VersionInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openfoxwq.VersionInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int64 version1 = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_version1(), target);
  }

  // required int64 version2 = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_version2(), target);
  }

  // optional string update_info = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_update_info().data(), static_cast<int>(this->_internal_update_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "openfoxwq.VersionInfo.update_info");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_update_info(), target);
  }

  // optional string install_url = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_install_url().data(), static_cast<int>(this->_internal_install_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "openfoxwq.VersionInfo.install_url");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_install_url(), target);
  }

  // repeated string qgi = 6;
  for (int i = 0, n = this->_internal_qgi_size(); i < n; i++) {
    const auto& s = this->_internal_qgi(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "openfoxwq.VersionInfo.qgi");
    target = stream->WriteString(6, s, target);
  }

  // repeated string qgi_hash = 7;
  for (int i = 0, n = this->_internal_qgi_hash_size(); i < n; i++) {
    const auto& s = this->_internal_qgi_hash(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "openfoxwq.VersionInfo.qgi_hash");
    target = stream->WriteString(7, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openfoxwq.VersionInfo)
  return target;
}

size_t VersionInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:openfoxwq.VersionInfo)
  size_t total_size = 0;

  if (_internal_has_version1()) {
    // required int64 version1 = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_version1());
  }

  if (_internal_has_version2()) {
    // required int64 version2 = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_version2());
  }

  return total_size;
}
size_t VersionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openfoxwq.VersionInfo)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000c) ^ 0x0000000c) == 0) {  // All required fields are present.
    // required int64 version1 = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_version1());

    // required int64 version2 = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_version2());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string qgi = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.qgi_.size());
  for (int i = 0, n = _impl_.qgi_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.qgi_.Get(i));
  }

  // repeated string qgi_hash = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.qgi_hash_.size());
  for (int i = 0, n = _impl_.qgi_hash_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.qgi_hash_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string update_info = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_update_info());
    }

    // optional string install_url = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_install_url());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VersionInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VersionInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VersionInfo::GetClassData() const { return &_class_data_; }


void VersionInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VersionInfo*>(&to_msg);
  auto& from = static_cast<const VersionInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openfoxwq.VersionInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.qgi_.MergeFrom(from._impl_.qgi_);
  _this->_impl_.qgi_hash_.MergeFrom(from._impl_.qgi_hash_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_update_info(from._internal_update_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_install_url(from._internal_install_url());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.version1_ = from._impl_.version1_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.version2_ = from._impl_.version2_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VersionInfo::CopyFrom(const VersionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openfoxwq.VersionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersionInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void VersionInfo::InternalSwap(VersionInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.qgi_.InternalSwap(&other->_impl_.qgi_);
  _impl_.qgi_hash_.InternalSwap(&other->_impl_.qgi_hash_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.update_info_, lhs_arena,
      &other->_impl_.update_info_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.install_url_, lhs_arena,
      &other->_impl_.install_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VersionInfo, _impl_.version2_)
      + sizeof(VersionInfo::_impl_.version2_)
      - PROTOBUF_FIELD_OFFSET(VersionInfo, _impl_.version1_)>(
          reinterpret_cast<char*>(&_impl_.version1_),
          reinterpret_cast<char*>(&other->_impl_.version1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VersionInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fcommon_2eproto_getter, &descriptor_table_proto_2fcommon_2eproto_once,
      file_level_metadata_proto_2fcommon_2eproto[0]);
}

// ===================================================================

class ProxyLineInfo_ProxyAddressInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ProxyLineInfo_ProxyAddressInfo>()._impl_._has_bits_);
  static void set_has_host1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_port1(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_host2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_port2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

ProxyLineInfo_ProxyAddressInfo::ProxyLineInfo_ProxyAddressInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openfoxwq.ProxyLineInfo.ProxyAddressInfo)
}
ProxyLineInfo_ProxyAddressInfo::ProxyLineInfo_ProxyAddressInfo(const ProxyLineInfo_ProxyAddressInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProxyLineInfo_ProxyAddressInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.host1_){}
    , decltype(_impl_.host2_){}
    , decltype(_impl_.port1_){}
    , decltype(_impl_.port2_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.host1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_host1()) {
    _this->_impl_.host1_.Set(from._internal_host1(), 
      _this->GetArenaForAllocation());
  }
  _impl_.host2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_host2()) {
    _this->_impl_.host2_.Set(from._internal_host2(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.port1_, &from._impl_.port1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.port2_) -
    reinterpret_cast<char*>(&_impl_.port1_)) + sizeof(_impl_.port2_));
  // @@protoc_insertion_point(copy_constructor:openfoxwq.ProxyLineInfo.ProxyAddressInfo)
}

inline void ProxyLineInfo_ProxyAddressInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.host1_){}
    , decltype(_impl_.host2_){}
    , decltype(_impl_.port1_){int64_t{0}}
    , decltype(_impl_.port2_){int64_t{0}}
  };
  _impl_.host1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.host2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProxyLineInfo_ProxyAddressInfo::~ProxyLineInfo_ProxyAddressInfo() {
  // @@protoc_insertion_point(destructor:openfoxwq.ProxyLineInfo.ProxyAddressInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProxyLineInfo_ProxyAddressInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.host1_.Destroy();
  _impl_.host2_.Destroy();
}

void ProxyLineInfo_ProxyAddressInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProxyLineInfo_ProxyAddressInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:openfoxwq.ProxyLineInfo.ProxyAddressInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.host1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.host2_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.port1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.port2_) -
        reinterpret_cast<char*>(&_impl_.port1_)) + sizeof(_impl_.port2_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProxyLineInfo_ProxyAddressInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string host1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_host1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "openfoxwq.ProxyLineInfo.ProxyAddressInfo.host1");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required int64 port1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_port1(&has_bits);
          _impl_.port1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string host2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_host2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "openfoxwq.ProxyLineInfo.ProxyAddressInfo.host2");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required int64 port2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_port2(&has_bits);
          _impl_.port2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProxyLineInfo_ProxyAddressInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openfoxwq.ProxyLineInfo.ProxyAddressInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string host1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_host1().data(), static_cast<int>(this->_internal_host1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "openfoxwq.ProxyLineInfo.ProxyAddressInfo.host1");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_host1(), target);
  }

  // required int64 port1 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_port1(), target);
  }

  // required string host2 = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_host2().data(), static_cast<int>(this->_internal_host2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "openfoxwq.ProxyLineInfo.ProxyAddressInfo.host2");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_host2(), target);
  }

  // required int64 port2 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_port2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openfoxwq.ProxyLineInfo.ProxyAddressInfo)
  return target;
}

size_t ProxyLineInfo_ProxyAddressInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:openfoxwq.ProxyLineInfo.ProxyAddressInfo)
  size_t total_size = 0;

  if (_internal_has_host1()) {
    // required string host1 = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host1());
  }

  if (_internal_has_host2()) {
    // required string host2 = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host2());
  }

  if (_internal_has_port1()) {
    // required int64 port1 = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_port1());
  }

  if (_internal_has_port2()) {
    // required int64 port2 = 4;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_port2());
  }

  return total_size;
}
size_t ProxyLineInfo_ProxyAddressInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openfoxwq.ProxyLineInfo.ProxyAddressInfo)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string host1 = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host1());

    // required string host2 = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host2());

    // required int64 port1 = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_port1());

    // required int64 port2 = 4;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_port2());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProxyLineInfo_ProxyAddressInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProxyLineInfo_ProxyAddressInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProxyLineInfo_ProxyAddressInfo::GetClassData() const { return &_class_data_; }


void ProxyLineInfo_ProxyAddressInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProxyLineInfo_ProxyAddressInfo*>(&to_msg);
  auto& from = static_cast<const ProxyLineInfo_ProxyAddressInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openfoxwq.ProxyLineInfo.ProxyAddressInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_host1(from._internal_host1());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_host2(from._internal_host2());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.port1_ = from._impl_.port1_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.port2_ = from._impl_.port2_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProxyLineInfo_ProxyAddressInfo::CopyFrom(const ProxyLineInfo_ProxyAddressInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openfoxwq.ProxyLineInfo.ProxyAddressInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProxyLineInfo_ProxyAddressInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ProxyLineInfo_ProxyAddressInfo::InternalSwap(ProxyLineInfo_ProxyAddressInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.host1_, lhs_arena,
      &other->_impl_.host1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.host2_, lhs_arena,
      &other->_impl_.host2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProxyLineInfo_ProxyAddressInfo, _impl_.port2_)
      + sizeof(ProxyLineInfo_ProxyAddressInfo::_impl_.port2_)
      - PROTOBUF_FIELD_OFFSET(ProxyLineInfo_ProxyAddressInfo, _impl_.port1_)>(
          reinterpret_cast<char*>(&_impl_.port1_),
          reinterpret_cast<char*>(&other->_impl_.port1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProxyLineInfo_ProxyAddressInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fcommon_2eproto_getter, &descriptor_table_proto_2fcommon_2eproto_once,
      file_level_metadata_proto_2fcommon_2eproto[1]);
}

// ===================================================================

class ProxyLineInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ProxyLineInfo>()._impl_._has_bits_);
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::openfoxwq::ProxyLineInfo_ProxyAddressInfo& address_info(const ProxyLineInfo* msg);
  static void set_has_address_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::openfoxwq::ProxyLineInfo_ProxyAddressInfo&
ProxyLineInfo::_Internal::address_info(const ProxyLineInfo* msg) {
  return *msg->_impl_.address_info_;
}
ProxyLineInfo::ProxyLineInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openfoxwq.ProxyLineInfo)
}
ProxyLineInfo::ProxyLineInfo(const ProxyLineInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProxyLineInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.address_info_){nullptr}
    , decltype(_impl_.index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_address_info()) {
    _this->_impl_.address_info_ = new ::openfoxwq::ProxyLineInfo_ProxyAddressInfo(*from._impl_.address_info_);
  }
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:openfoxwq.ProxyLineInfo)
}

inline void ProxyLineInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.address_info_){nullptr}
    , decltype(_impl_.index_){int64_t{0}}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProxyLineInfo::~ProxyLineInfo() {
  // @@protoc_insertion_point(destructor:openfoxwq.ProxyLineInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProxyLineInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.address_info_;
}

void ProxyLineInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProxyLineInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:openfoxwq.ProxyLineInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.address_info_ != nullptr);
      _impl_.address_info_->Clear();
    }
  }
  _impl_.index_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProxyLineInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_index(&has_bits);
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "openfoxwq.ProxyLineInfo.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required .openfoxwq.ProxyLineInfo.ProxyAddressInfo address_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_address_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProxyLineInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openfoxwq.ProxyLineInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int64 index = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_index(), target);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "openfoxwq.ProxyLineInfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // required .openfoxwq.ProxyLineInfo.ProxyAddressInfo address_info = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::address_info(this),
        _Internal::address_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openfoxwq.ProxyLineInfo)
  return target;
}

size_t ProxyLineInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:openfoxwq.ProxyLineInfo)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_address_info()) {
    // required .openfoxwq.ProxyLineInfo.ProxyAddressInfo address_info = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.address_info_);
  }

  if (_internal_has_index()) {
    // required int64 index = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_index());
  }

  return total_size;
}
size_t ProxyLineInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openfoxwq.ProxyLineInfo)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required .openfoxwq.ProxyLineInfo.ProxyAddressInfo address_info = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.address_info_);

    // required int64 index = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProxyLineInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProxyLineInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProxyLineInfo::GetClassData() const { return &_class_data_; }


void ProxyLineInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProxyLineInfo*>(&to_msg);
  auto& from = static_cast<const ProxyLineInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openfoxwq.ProxyLineInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_address_info()->::openfoxwq::ProxyLineInfo_ProxyAddressInfo::MergeFrom(
          from._internal_address_info());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.index_ = from._impl_.index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProxyLineInfo::CopyFrom(const ProxyLineInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openfoxwq.ProxyLineInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProxyLineInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_address_info()) {
    if (!_impl_.address_info_->IsInitialized()) return false;
  }
  return true;
}

void ProxyLineInfo::InternalSwap(ProxyLineInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProxyLineInfo, _impl_.index_)
      + sizeof(ProxyLineInfo::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(ProxyLineInfo, _impl_.address_info_)>(
          reinterpret_cast<char*>(&_impl_.address_info_),
          reinterpret_cast<char*>(&other->_impl_.address_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProxyLineInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fcommon_2eproto_getter, &descriptor_table_proto_2fcommon_2eproto_once,
      file_level_metadata_proto_2fcommon_2eproto[2]);
}

// ===================================================================

LobbySvrInfo_NameLocEntry_DoNotUse::LobbySvrInfo_NameLocEntry_DoNotUse() {}
LobbySvrInfo_NameLocEntry_DoNotUse::LobbySvrInfo_NameLocEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void LobbySvrInfo_NameLocEntry_DoNotUse::MergeFrom(const LobbySvrInfo_NameLocEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata LobbySvrInfo_NameLocEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fcommon_2eproto_getter, &descriptor_table_proto_2fcommon_2eproto_once,
      file_level_metadata_proto_2fcommon_2eproto[3]);
}

// ===================================================================

class LobbySvrInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<LobbySvrInfo>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_broadcast_host(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_broadcast_port(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_num_players(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_num_matches(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_unknown_host_1(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_unknown_port_1(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_unknown_host_2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_unknown_port_2(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_unknown_host_3(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_unknown_port_3(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_unknown_host_4(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_unknown_port_4(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_play_host(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_play_port(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_unknown_field_7(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_unknown_field_8(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

LobbySvrInfo::LobbySvrInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &LobbySvrInfo::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:openfoxwq.LobbySvrInfo)
}
LobbySvrInfo::LobbySvrInfo(const LobbySvrInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LobbySvrInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.name_loc_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.broadcast_host_){}
    , decltype(_impl_.unknown_host_1_){}
    , decltype(_impl_.unknown_host_2_){}
    , decltype(_impl_.unknown_host_3_){}
    , decltype(_impl_.unknown_host_4_){}
    , decltype(_impl_.play_host_){}
    , decltype(_impl_.num_players_){}
    , decltype(_impl_.num_matches_){}
    , decltype(_impl_.unknown_field_7_){}
    , decltype(_impl_.unknown_field_8_){}
    , decltype(_impl_.broadcast_port_){}
    , decltype(_impl_.unknown_port_1_){}
    , decltype(_impl_.unknown_port_2_){}
    , decltype(_impl_.unknown_port_3_){}
    , decltype(_impl_.unknown_port_4_){}
    , decltype(_impl_.play_port_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.name_loc_.MergeFrom(from._impl_.name_loc_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.broadcast_host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.broadcast_host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_broadcast_host()) {
    _this->_impl_.broadcast_host_.Set(from._internal_broadcast_host(), 
      _this->GetArenaForAllocation());
  }
  _impl_.unknown_host_1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unknown_host_1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_unknown_host_1()) {
    _this->_impl_.unknown_host_1_.Set(from._internal_unknown_host_1(), 
      _this->GetArenaForAllocation());
  }
  _impl_.unknown_host_2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unknown_host_2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_unknown_host_2()) {
    _this->_impl_.unknown_host_2_.Set(from._internal_unknown_host_2(), 
      _this->GetArenaForAllocation());
  }
  _impl_.unknown_host_3_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unknown_host_3_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_unknown_host_3()) {
    _this->_impl_.unknown_host_3_.Set(from._internal_unknown_host_3(), 
      _this->GetArenaForAllocation());
  }
  _impl_.unknown_host_4_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unknown_host_4_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_unknown_host_4()) {
    _this->_impl_.unknown_host_4_.Set(from._internal_unknown_host_4(), 
      _this->GetArenaForAllocation());
  }
  _impl_.play_host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.play_host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_play_host()) {
    _this->_impl_.play_host_.Set(from._internal_play_host(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.num_players_, &from._impl_.num_players_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.play_port_) -
    reinterpret_cast<char*>(&_impl_.num_players_)) + sizeof(_impl_.play_port_));
  // @@protoc_insertion_point(copy_constructor:openfoxwq.LobbySvrInfo)
}

inline void LobbySvrInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.name_loc_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.broadcast_host_){}
    , decltype(_impl_.unknown_host_1_){}
    , decltype(_impl_.unknown_host_2_){}
    , decltype(_impl_.unknown_host_3_){}
    , decltype(_impl_.unknown_host_4_){}
    , decltype(_impl_.play_host_){}
    , decltype(_impl_.num_players_){int64_t{0}}
    , decltype(_impl_.num_matches_){int64_t{0}}
    , decltype(_impl_.unknown_field_7_){int64_t{0}}
    , decltype(_impl_.unknown_field_8_){int64_t{0}}
    , decltype(_impl_.broadcast_port_){0}
    , decltype(_impl_.unknown_port_1_){0}
    , decltype(_impl_.unknown_port_2_){0}
    , decltype(_impl_.unknown_port_3_){0}
    , decltype(_impl_.unknown_port_4_){0}
    , decltype(_impl_.play_port_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.broadcast_host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.broadcast_host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.unknown_host_1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unknown_host_1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.unknown_host_2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unknown_host_2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.unknown_host_3_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unknown_host_3_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.unknown_host_4_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unknown_host_4_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.play_host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.play_host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LobbySvrInfo::~LobbySvrInfo() {
  // @@protoc_insertion_point(destructor:openfoxwq.LobbySvrInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void LobbySvrInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_loc_.Destruct();
  _impl_.name_loc_.~MapField();
  _impl_.name_.Destroy();
  _impl_.broadcast_host_.Destroy();
  _impl_.unknown_host_1_.Destroy();
  _impl_.unknown_host_2_.Destroy();
  _impl_.unknown_host_3_.Destroy();
  _impl_.unknown_host_4_.Destroy();
  _impl_.play_host_.Destroy();
}

void LobbySvrInfo::ArenaDtor(void* object) {
  LobbySvrInfo* _this = reinterpret_cast< LobbySvrInfo* >(object);
  _this->_impl_.name_loc_.Destruct();
}
void LobbySvrInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LobbySvrInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:openfoxwq.LobbySvrInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_loc_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.broadcast_host_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.unknown_host_1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.unknown_host_2_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.unknown_host_3_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.unknown_host_4_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.play_host_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.num_players_ = int64_t{0};
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.num_matches_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.unknown_port_4_) -
        reinterpret_cast<char*>(&_impl_.num_matches_)) + sizeof(_impl_.unknown_port_4_));
  }
  _impl_.play_port_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LobbySvrInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "openfoxwq.LobbySvrInfo.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int64 num_players = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_num_players(&has_bits);
          _impl_.num_players_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 num_matches = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_num_matches(&has_bits);
          _impl_.num_matches_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string broadcast_host = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_broadcast_host();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "openfoxwq.LobbySvrInfo.broadcast_host");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 broadcast_port = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_broadcast_port(&has_bits);
          _impl_.broadcast_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 unknown_field_7 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_unknown_field_7(&has_bits);
          _impl_.unknown_field_7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 unknown_field_8 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_unknown_field_8(&has_bits);
          _impl_.unknown_field_8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string unknown_host_1 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_unknown_host_1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "openfoxwq.LobbySvrInfo.unknown_host_1");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 unknown_port_1 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_unknown_port_1(&has_bits);
          _impl_.unknown_port_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string unknown_host_2 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_unknown_host_2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "openfoxwq.LobbySvrInfo.unknown_host_2");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 unknown_port_2 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_unknown_port_2(&has_bits);
          _impl_.unknown_port_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string unknown_host_3 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_unknown_host_3();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "openfoxwq.LobbySvrInfo.unknown_host_3");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 unknown_port_3 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_unknown_port_3(&has_bits);
          _impl_.unknown_port_3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string unknown_host_4 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_unknown_host_4();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "openfoxwq.LobbySvrInfo.unknown_host_4");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 unknown_port_4 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_unknown_port_4(&has_bits);
          _impl_.unknown_port_4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string play_host = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_play_host();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "openfoxwq.LobbySvrInfo.play_host");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 play_port = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_play_port(&has_bits);
          _impl_.play_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<int32, string> name_loc = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.name_loc_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LobbySvrInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openfoxwq.LobbySvrInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "openfoxwq.LobbySvrInfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional int64 num_players = 3;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_num_players(), target);
  }

  // optional int64 num_matches = 4;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_num_matches(), target);
  }

  // optional string broadcast_host = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_broadcast_host().data(), static_cast<int>(this->_internal_broadcast_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "openfoxwq.LobbySvrInfo.broadcast_host");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_broadcast_host(), target);
  }

  // optional int32 broadcast_port = 6;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_broadcast_port(), target);
  }

  // optional int64 unknown_field_7 = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_unknown_field_7(), target);
  }

  // optional int64 unknown_field_8 = 8;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_unknown_field_8(), target);
  }

  // optional string unknown_host_1 = 13;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_unknown_host_1().data(), static_cast<int>(this->_internal_unknown_host_1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "openfoxwq.LobbySvrInfo.unknown_host_1");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_unknown_host_1(), target);
  }

  // optional int32 unknown_port_1 = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_unknown_port_1(), target);
  }

  // optional string unknown_host_2 = 15;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_unknown_host_2().data(), static_cast<int>(this->_internal_unknown_host_2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "openfoxwq.LobbySvrInfo.unknown_host_2");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_unknown_host_2(), target);
  }

  // optional int32 unknown_port_2 = 16;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_unknown_port_2(), target);
  }

  // optional string unknown_host_3 = 17;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_unknown_host_3().data(), static_cast<int>(this->_internal_unknown_host_3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "openfoxwq.LobbySvrInfo.unknown_host_3");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_unknown_host_3(), target);
  }

  // optional int32 unknown_port_3 = 18;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_unknown_port_3(), target);
  }

  // optional string unknown_host_4 = 19;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_unknown_host_4().data(), static_cast<int>(this->_internal_unknown_host_4().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "openfoxwq.LobbySvrInfo.unknown_host_4");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_unknown_host_4(), target);
  }

  // optional int32 unknown_port_4 = 20;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(20, this->_internal_unknown_port_4(), target);
  }

  // optional string play_host = 21;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_play_host().data(), static_cast<int>(this->_internal_play_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "openfoxwq.LobbySvrInfo.play_host");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_play_host(), target);
  }

  // optional int32 play_port = 22;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(22, this->_internal_play_port(), target);
  }

  // map<int32, string> name_loc = 23;
  if (!this->_internal_name_loc().empty()) {
    using MapType = ::_pb::Map<int32_t, std::string>;
    using WireHelper = LobbySvrInfo_NameLocEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_name_loc();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "openfoxwq.LobbySvrInfo.NameLocEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(23, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(23, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openfoxwq.LobbySvrInfo)
  return target;
}

size_t LobbySvrInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openfoxwq.LobbySvrInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, string> name_loc = 23;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_name_loc_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >::const_iterator
      it = this->_internal_name_loc().begin();
      it != this->_internal_name_loc().end(); ++it) {
    total_size += LobbySvrInfo_NameLocEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string broadcast_host = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_broadcast_host());
    }

    // optional string unknown_host_1 = 13;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_unknown_host_1());
    }

    // optional string unknown_host_2 = 15;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_unknown_host_2());
    }

    // optional string unknown_host_3 = 17;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_unknown_host_3());
    }

    // optional string unknown_host_4 = 19;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_unknown_host_4());
    }

    // optional string play_host = 21;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_play_host());
    }

    // optional int64 num_players = 3;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_num_players());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int64 num_matches = 4;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_num_matches());
    }

    // optional int64 unknown_field_7 = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_unknown_field_7());
    }

    // optional int64 unknown_field_8 = 8;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_unknown_field_8());
    }

    // optional int32 broadcast_port = 6;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_broadcast_port());
    }

    // optional int32 unknown_port_1 = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_unknown_port_1());
    }

    // optional int32 unknown_port_2 = 16;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_unknown_port_2());
    }

    // optional int32 unknown_port_3 = 18;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_unknown_port_3());
    }

    // optional int32 unknown_port_4 = 20;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_unknown_port_4());
    }

  }
  // optional int32 play_port = 22;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_play_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LobbySvrInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LobbySvrInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LobbySvrInfo::GetClassData() const { return &_class_data_; }


void LobbySvrInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LobbySvrInfo*>(&to_msg);
  auto& from = static_cast<const LobbySvrInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openfoxwq.LobbySvrInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.name_loc_.MergeFrom(from._impl_.name_loc_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_broadcast_host(from._internal_broadcast_host());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_unknown_host_1(from._internal_unknown_host_1());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_unknown_host_2(from._internal_unknown_host_2());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_unknown_host_3(from._internal_unknown_host_3());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_unknown_host_4(from._internal_unknown_host_4());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_play_host(from._internal_play_host());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.num_players_ = from._impl_.num_players_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.num_matches_ = from._impl_.num_matches_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.unknown_field_7_ = from._impl_.unknown_field_7_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.unknown_field_8_ = from._impl_.unknown_field_8_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.broadcast_port_ = from._impl_.broadcast_port_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.unknown_port_1_ = from._impl_.unknown_port_1_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.unknown_port_2_ = from._impl_.unknown_port_2_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.unknown_port_3_ = from._impl_.unknown_port_3_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.unknown_port_4_ = from._impl_.unknown_port_4_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _this->_internal_set_play_port(from._internal_play_port());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LobbySvrInfo::CopyFrom(const LobbySvrInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openfoxwq.LobbySvrInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LobbySvrInfo::IsInitialized() const {
  return true;
}

void LobbySvrInfo::InternalSwap(LobbySvrInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.name_loc_.InternalSwap(&other->_impl_.name_loc_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.broadcast_host_, lhs_arena,
      &other->_impl_.broadcast_host_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.unknown_host_1_, lhs_arena,
      &other->_impl_.unknown_host_1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.unknown_host_2_, lhs_arena,
      &other->_impl_.unknown_host_2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.unknown_host_3_, lhs_arena,
      &other->_impl_.unknown_host_3_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.unknown_host_4_, lhs_arena,
      &other->_impl_.unknown_host_4_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.play_host_, lhs_arena,
      &other->_impl_.play_host_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LobbySvrInfo, _impl_.play_port_)
      + sizeof(LobbySvrInfo::_impl_.play_port_)
      - PROTOBUF_FIELD_OFFSET(LobbySvrInfo, _impl_.num_players_)>(
          reinterpret_cast<char*>(&_impl_.num_players_),
          reinterpret_cast<char*>(&other->_impl_.num_players_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LobbySvrInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fcommon_2eproto_getter, &descriptor_table_proto_2fcommon_2eproto_once,
      file_level_metadata_proto_2fcommon_2eproto[4]);
}

// ===================================================================

class PlayerInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerInfo>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name_native(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_country(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_accepting_matches(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_ranked_wins(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_ranked_losses(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_fox_coin(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_unknown_field_8(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_unknown_field_13(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

PlayerInfo::PlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openfoxwq.PlayerInfo)
}
PlayerInfo::PlayerInfo(const PlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.name_native_){}
    , decltype(_impl_.player_id_){}
    , decltype(_impl_.rank_){}
    , decltype(_impl_.country_){}
    , decltype(_impl_.club_id_){}
    , decltype(_impl_.unknown_field_8_){}
    , decltype(_impl_.accepting_matches_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.ranked_wins_){}
    , decltype(_impl_.ranked_losses_){}
    , decltype(_impl_.unknown_field_13_){}
    , decltype(_impl_.fox_coin_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_native_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_native_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name_native()) {
    _this->_impl_.name_native_.Set(from._internal_name_native(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.player_id_, &from._impl_.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.fox_coin_) -
    reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.fox_coin_));
  // @@protoc_insertion_point(copy_constructor:openfoxwq.PlayerInfo)
}

inline void PlayerInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.name_native_){}
    , decltype(_impl_.player_id_){int64_t{0}}
    , decltype(_impl_.rank_){0}
    , decltype(_impl_.country_){0}
    , decltype(_impl_.club_id_){int64_t{0}}
    , decltype(_impl_.unknown_field_8_){int64_t{0}}
    , decltype(_impl_.accepting_matches_){false}
    , decltype(_impl_.status_){0}
    , decltype(_impl_.ranked_wins_){int64_t{0}}
    , decltype(_impl_.ranked_losses_){int64_t{0}}
    , decltype(_impl_.unknown_field_13_){int64_t{0}}
    , decltype(_impl_.fox_coin_){int64_t{0}}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_native_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_native_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PlayerInfo::~PlayerInfo() {
  // @@protoc_insertion_point(destructor:openfoxwq.PlayerInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.name_native_.Destroy();
}

void PlayerInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:openfoxwq.PlayerInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.name_native_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.accepting_matches_) -
        reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.accepting_matches_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&_impl_.status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.fox_coin_) -
        reinterpret_cast<char*>(&_impl_.status_)) + sizeof(_impl_.fox_coin_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "openfoxwq.PlayerInfo.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string name_native = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name_native();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "openfoxwq.PlayerInfo.name_native");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .openfoxwq.Rank rank = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::openfoxwq::Rank_IsValid(val))) {
            _internal_set_rank(static_cast<::openfoxwq::Rank>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .openfoxwq.Country country = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::openfoxwq::Country_IsValid(val))) {
            _internal_set_country(static_cast<::openfoxwq::Country>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int64 club_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_club_id(&has_bits);
          _impl_.club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool accepting_matches = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_accepting_matches(&has_bits);
          _impl_.accepting_matches_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 unknown_field_8 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_unknown_field_8(&has_bits);
          _impl_.unknown_field_8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .openfoxwq.PlayerStatus status = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::openfoxwq::PlayerStatus_IsValid(val))) {
            _internal_set_status(static_cast<::openfoxwq::PlayerStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int64 ranked_wins = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_ranked_wins(&has_bits);
          _impl_.ranked_wins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 ranked_losses = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_ranked_losses(&has_bits);
          _impl_.ranked_losses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 unknown_field_13 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_unknown_field_13(&has_bits);
          _impl_.unknown_field_13_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 fox_coin = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_fox_coin(&has_bits);
          _impl_.fox_coin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openfoxwq.PlayerInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int64 player_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_player_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "openfoxwq.PlayerInfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional string name_native = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name_native().data(), static_cast<int>(this->_internal_name_native().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "openfoxwq.PlayerInfo.name_native");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name_native(), target);
  }

  // optional .openfoxwq.Rank rank = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_rank(), target);
  }

  // optional .openfoxwq.Country country = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_country(), target);
  }

  // optional int64 club_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_club_id(), target);
  }

  // optional bool accepting_matches = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_accepting_matches(), target);
  }

  // optional int64 unknown_field_8 = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_unknown_field_8(), target);
  }

  // optional .openfoxwq.PlayerStatus status = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_status(), target);
  }

  // optional int64 ranked_wins = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_ranked_wins(), target);
  }

  // optional int64 ranked_losses = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_ranked_losses(), target);
  }

  // optional int64 unknown_field_13 = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(13, this->_internal_unknown_field_13(), target);
  }

  // optional int64 fox_coin = 21;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(21, this->_internal_fox_coin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openfoxwq.PlayerInfo)
  return target;
}

size_t PlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openfoxwq.PlayerInfo)
  size_t total_size = 0;

  // required int64 player_id = 1;
  if (_internal_has_player_id()) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_player_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string name_native = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name_native());
    }

  }
  if (cached_has_bits & 0x000000f8u) {
    // optional .openfoxwq.Rank rank = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_rank());
    }

    // optional .openfoxwq.Country country = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_country());
    }

    // optional int64 club_id = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_club_id());
    }

    // optional int64 unknown_field_8 = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_unknown_field_8());
    }

    // optional bool accepting_matches = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional .openfoxwq.PlayerStatus status = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
    }

    // optional int64 ranked_wins = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ranked_wins());
    }

    // optional int64 ranked_losses = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ranked_losses());
    }

    // optional int64 unknown_field_13 = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_unknown_field_13());
    }

    // optional int64 fox_coin = 21;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_fox_coin());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerInfo::GetClassData() const { return &_class_data_; }


void PlayerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerInfo*>(&to_msg);
  auto& from = static_cast<const PlayerInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openfoxwq.PlayerInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_name_native(from._internal_name_native());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.rank_ = from._impl_.rank_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.country_ = from._impl_.country_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.club_id_ = from._impl_.club_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.unknown_field_8_ = from._impl_.unknown_field_8_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.accepting_matches_ = from._impl_.accepting_matches_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.status_ = from._impl_.status_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.ranked_wins_ = from._impl_.ranked_wins_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.ranked_losses_ = from._impl_.ranked_losses_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.unknown_field_13_ = from._impl_.unknown_field_13_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.fox_coin_ = from._impl_.fox_coin_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerInfo::CopyFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openfoxwq.PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void PlayerInfo::InternalSwap(PlayerInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_native_, lhs_arena,
      &other->_impl_.name_native_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerInfo, _impl_.fox_coin_)
      + sizeof(PlayerInfo::_impl_.fox_coin_)
      - PROTOBUF_FIELD_OFFSET(PlayerInfo, _impl_.player_id_)>(
          reinterpret_cast<char*>(&_impl_.player_id_),
          reinterpret_cast<char*>(&other->_impl_.player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fcommon_2eproto_getter, &descriptor_table_proto_2fcommon_2eproto_once,
      file_level_metadata_proto_2fcommon_2eproto[5]);
}

// ===================================================================

class ExtraPlayerInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ExtraPlayerInfo>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::openfoxwq::GameResults& current_results(const ExtraPlayerInfo* msg);
  static void set_has_current_results(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::openfoxwq::GameResults& ranked_results(const ExtraPlayerInfo* msg);
  static void set_has_ranked_results(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::openfoxwq::GameResults& free_results(const ExtraPlayerInfo* msg);
  static void set_has_free_results(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::openfoxwq::GameResults&
ExtraPlayerInfo::_Internal::current_results(const ExtraPlayerInfo* msg) {
  return *msg->_impl_.current_results_;
}
const ::openfoxwq::GameResults&
ExtraPlayerInfo::_Internal::ranked_results(const ExtraPlayerInfo* msg) {
  return *msg->_impl_.ranked_results_;
}
const ::openfoxwq::GameResults&
ExtraPlayerInfo::_Internal::free_results(const ExtraPlayerInfo* msg) {
  return *msg->_impl_.free_results_;
}
ExtraPlayerInfo::ExtraPlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openfoxwq.ExtraPlayerInfo)
}
ExtraPlayerInfo::ExtraPlayerInfo(const ExtraPlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExtraPlayerInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.current_results_){nullptr}
    , decltype(_impl_.ranked_results_){nullptr}
    , decltype(_impl_.free_results_){nullptr}
    , decltype(_impl_.player_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_current_results()) {
    _this->_impl_.current_results_ = new ::openfoxwq::GameResults(*from._impl_.current_results_);
  }
  if (from._internal_has_ranked_results()) {
    _this->_impl_.ranked_results_ = new ::openfoxwq::GameResults(*from._impl_.ranked_results_);
  }
  if (from._internal_has_free_results()) {
    _this->_impl_.free_results_ = new ::openfoxwq::GameResults(*from._impl_.free_results_);
  }
  _this->_impl_.player_id_ = from._impl_.player_id_;
  // @@protoc_insertion_point(copy_constructor:openfoxwq.ExtraPlayerInfo)
}

inline void ExtraPlayerInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.current_results_){nullptr}
    , decltype(_impl_.ranked_results_){nullptr}
    , decltype(_impl_.free_results_){nullptr}
    , decltype(_impl_.player_id_){int64_t{0}}
  };
}

ExtraPlayerInfo::~ExtraPlayerInfo() {
  // @@protoc_insertion_point(destructor:openfoxwq.ExtraPlayerInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExtraPlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.current_results_;
  if (this != internal_default_instance()) delete _impl_.ranked_results_;
  if (this != internal_default_instance()) delete _impl_.free_results_;
}

void ExtraPlayerInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExtraPlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:openfoxwq.ExtraPlayerInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.current_results_ != nullptr);
      _impl_.current_results_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.ranked_results_ != nullptr);
      _impl_.ranked_results_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.free_results_ != nullptr);
      _impl_.free_results_->Clear();
    }
  }
  _impl_.player_id_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExtraPlayerInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .openfoxwq.GameResults current_results = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_results(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .openfoxwq.GameResults ranked_results = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_ranked_results(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .openfoxwq.GameResults free_results = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_free_results(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExtraPlayerInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openfoxwq.ExtraPlayerInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 player_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_player_id(), target);
  }

  // optional .openfoxwq.GameResults current_results = 9;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::current_results(this),
        _Internal::current_results(this).GetCachedSize(), target, stream);
  }

  // optional .openfoxwq.GameResults ranked_results = 10;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::ranked_results(this),
        _Internal::ranked_results(this).GetCachedSize(), target, stream);
  }

  // optional .openfoxwq.GameResults free_results = 11;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::free_results(this),
        _Internal::free_results(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openfoxwq.ExtraPlayerInfo)
  return target;
}

size_t ExtraPlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openfoxwq.ExtraPlayerInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .openfoxwq.GameResults current_results = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.current_results_);
    }

    // optional .openfoxwq.GameResults ranked_results = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ranked_results_);
    }

    // optional .openfoxwq.GameResults free_results = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.free_results_);
    }

    // optional int64 player_id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_player_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExtraPlayerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExtraPlayerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExtraPlayerInfo::GetClassData() const { return &_class_data_; }


void ExtraPlayerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExtraPlayerInfo*>(&to_msg);
  auto& from = static_cast<const ExtraPlayerInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openfoxwq.ExtraPlayerInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_current_results()->::openfoxwq::GameResults::MergeFrom(
          from._internal_current_results());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_ranked_results()->::openfoxwq::GameResults::MergeFrom(
          from._internal_ranked_results());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_free_results()->::openfoxwq::GameResults::MergeFrom(
          from._internal_free_results());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExtraPlayerInfo::CopyFrom(const ExtraPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openfoxwq.ExtraPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtraPlayerInfo::IsInitialized() const {
  if (_internal_has_current_results()) {
    if (!_impl_.current_results_->IsInitialized()) return false;
  }
  if (_internal_has_ranked_results()) {
    if (!_impl_.ranked_results_->IsInitialized()) return false;
  }
  if (_internal_has_free_results()) {
    if (!_impl_.free_results_->IsInitialized()) return false;
  }
  return true;
}

void ExtraPlayerInfo::InternalSwap(ExtraPlayerInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExtraPlayerInfo, _impl_.player_id_)
      + sizeof(ExtraPlayerInfo::_impl_.player_id_)
      - PROTOBUF_FIELD_OFFSET(ExtraPlayerInfo, _impl_.current_results_)>(
          reinterpret_cast<char*>(&_impl_.current_results_),
          reinterpret_cast<char*>(&other->_impl_.current_results_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExtraPlayerInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fcommon_2eproto_getter, &descriptor_table_proto_2fcommon_2eproto_once,
      file_level_metadata_proto_2fcommon_2eproto[6]);
}

// ===================================================================

class GameResults::_Internal {
 public:
  using HasBits = decltype(std::declval<GameResults>()._impl_._has_bits_);
  static void set_has_wins(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_losses(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_draws(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

GameResults::GameResults(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openfoxwq.GameResults)
}
GameResults::GameResults(const GameResults& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameResults* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.wins_){}
    , decltype(_impl_.losses_){}
    , decltype(_impl_.draws_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.wins_, &from._impl_.wins_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.draws_) -
    reinterpret_cast<char*>(&_impl_.wins_)) + sizeof(_impl_.draws_));
  // @@protoc_insertion_point(copy_constructor:openfoxwq.GameResults)
}

inline void GameResults::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.wins_){int64_t{0}}
    , decltype(_impl_.losses_){int64_t{0}}
    , decltype(_impl_.draws_){int64_t{0}}
  };
}

GameResults::~GameResults() {
  // @@protoc_insertion_point(destructor:openfoxwq.GameResults)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameResults::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameResults::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameResults::Clear() {
// @@protoc_insertion_point(message_clear_start:openfoxwq.GameResults)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.wins_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.draws_) -
        reinterpret_cast<char*>(&_impl_.wins_)) + sizeof(_impl_.draws_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameResults::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 wins = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_wins(&has_bits);
          _impl_.wins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 losses = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_losses(&has_bits);
          _impl_.losses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 draws = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_draws(&has_bits);
          _impl_.draws_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameResults::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openfoxwq.GameResults)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int64 wins = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_wins(), target);
  }

  // required int64 losses = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_losses(), target);
  }

  // required int64 draws = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_draws(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openfoxwq.GameResults)
  return target;
}

size_t GameResults::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:openfoxwq.GameResults)
  size_t total_size = 0;

  if (_internal_has_wins()) {
    // required int64 wins = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_wins());
  }

  if (_internal_has_losses()) {
    // required int64 losses = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_losses());
  }

  if (_internal_has_draws()) {
    // required int64 draws = 3;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_draws());
  }

  return total_size;
}
size_t GameResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openfoxwq.GameResults)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int64 wins = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_wins());

    // required int64 losses = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_losses());

    // required int64 draws = 3;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_draws());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameResults::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameResults::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameResults::GetClassData() const { return &_class_data_; }


void GameResults::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameResults*>(&to_msg);
  auto& from = static_cast<const GameResults&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openfoxwq.GameResults)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.wins_ = from._impl_.wins_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.losses_ = from._impl_.losses_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.draws_ = from._impl_.draws_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameResults::CopyFrom(const GameResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openfoxwq.GameResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameResults::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void GameResults::InternalSwap(GameResults* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameResults, _impl_.draws_)
      + sizeof(GameResults::_impl_.draws_)
      - PROTOBUF_FIELD_OFFSET(GameResults, _impl_.wins_)>(
          reinterpret_cast<char*>(&_impl_.wins_),
          reinterpret_cast<char*>(&other->_impl_.wins_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameResults::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fcommon_2eproto_getter, &descriptor_table_proto_2fcommon_2eproto_once,
      file_level_metadata_proto_2fcommon_2eproto[7]);
}

// ===================================================================

class ExtendedGameResults::_Internal {
 public:
  using HasBits = decltype(std::declval<ExtendedGameResults>()._impl_._has_bits_);
  static void set_has_typ(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_wins(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_losses(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_draws(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

ExtendedGameResults::ExtendedGameResults(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openfoxwq.ExtendedGameResults)
}
ExtendedGameResults::ExtendedGameResults(const ExtendedGameResults& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExtendedGameResults* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.wins_){}
    , decltype(_impl_.losses_){}
    , decltype(_impl_.draws_){}
    , decltype(_impl_.typ_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.wins_, &from._impl_.wins_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.typ_) -
    reinterpret_cast<char*>(&_impl_.wins_)) + sizeof(_impl_.typ_));
  // @@protoc_insertion_point(copy_constructor:openfoxwq.ExtendedGameResults)
}

inline void ExtendedGameResults::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.wins_){int64_t{0}}
    , decltype(_impl_.losses_){int64_t{0}}
    , decltype(_impl_.draws_){int64_t{0}}
    , decltype(_impl_.typ_){0}
  };
}

ExtendedGameResults::~ExtendedGameResults() {
  // @@protoc_insertion_point(destructor:openfoxwq.ExtendedGameResults)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExtendedGameResults::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ExtendedGameResults::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExtendedGameResults::Clear() {
// @@protoc_insertion_point(message_clear_start:openfoxwq.ExtendedGameResults)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.wins_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.typ_) -
        reinterpret_cast<char*>(&_impl_.wins_)) + sizeof(_impl_.typ_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExtendedGameResults::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .openfoxwq.GameResultType typ = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::openfoxwq::GameResultType_IsValid(val))) {
            _internal_set_typ(static_cast<::openfoxwq::GameResultType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required int64 wins = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_wins(&has_bits);
          _impl_.wins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 losses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_losses(&has_bits);
          _impl_.losses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 draws = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_draws(&has_bits);
          _impl_.draws_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExtendedGameResults::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openfoxwq.ExtendedGameResults)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .openfoxwq.GameResultType typ = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_typ(), target);
  }

  // required int64 wins = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_wins(), target);
  }

  // required int64 losses = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_losses(), target);
  }

  // required int64 draws = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_draws(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openfoxwq.ExtendedGameResults)
  return target;
}

size_t ExtendedGameResults::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:openfoxwq.ExtendedGameResults)
  size_t total_size = 0;

  if (_internal_has_wins()) {
    // required int64 wins = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_wins());
  }

  if (_internal_has_losses()) {
    // required int64 losses = 3;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_losses());
  }

  if (_internal_has_draws()) {
    // required int64 draws = 4;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_draws());
  }

  if (_internal_has_typ()) {
    // required .openfoxwq.GameResultType typ = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_typ());
  }

  return total_size;
}
size_t ExtendedGameResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openfoxwq.ExtendedGameResults)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int64 wins = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_wins());

    // required int64 losses = 3;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_losses());

    // required int64 draws = 4;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_draws());

    // required .openfoxwq.GameResultType typ = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_typ());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExtendedGameResults::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExtendedGameResults::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExtendedGameResults::GetClassData() const { return &_class_data_; }


void ExtendedGameResults::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExtendedGameResults*>(&to_msg);
  auto& from = static_cast<const ExtendedGameResults&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openfoxwq.ExtendedGameResults)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.wins_ = from._impl_.wins_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.losses_ = from._impl_.losses_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.draws_ = from._impl_.draws_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.typ_ = from._impl_.typ_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExtendedGameResults::CopyFrom(const ExtendedGameResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openfoxwq.ExtendedGameResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtendedGameResults::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ExtendedGameResults::InternalSwap(ExtendedGameResults* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExtendedGameResults, _impl_.typ_)
      + sizeof(ExtendedGameResults::_impl_.typ_)
      - PROTOBUF_FIELD_OFFSET(ExtendedGameResults, _impl_.wins_)>(
          reinterpret_cast<char*>(&_impl_.wins_),
          reinterpret_cast<char*>(&other->_impl_.wins_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExtendedGameResults::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fcommon_2eproto_getter, &descriptor_table_proto_2fcommon_2eproto_once,
      file_level_metadata_proto_2fcommon_2eproto[8]);
}

// ===================================================================

class UnhandledMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<UnhandledMessage>()._impl_._has_bits_);
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

UnhandledMessage::UnhandledMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openfoxwq.UnhandledMessage)
}
UnhandledMessage::UnhandledMessage(const UnhandledMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnhandledMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tag_){}
    , decltype(_impl_.data_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tag()) {
    _this->_impl_.tag_.Set(from._internal_tag(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_data()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:openfoxwq.UnhandledMessage)
}

inline void UnhandledMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tag_){}
    , decltype(_impl_.data_){}
  };
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UnhandledMessage::~UnhandledMessage() {
  // @@protoc_insertion_point(destructor:openfoxwq.UnhandledMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnhandledMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tag_.Destroy();
  _impl_.data_.Destroy();
}

void UnhandledMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnhandledMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:openfoxwq.UnhandledMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.data_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnhandledMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "openfoxwq.UnhandledMessage.tag");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "openfoxwq.UnhandledMessage.data");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnhandledMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openfoxwq.UnhandledMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string tag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "openfoxwq.UnhandledMessage.tag");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tag(), target);
  }

  // required string data = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "openfoxwq.UnhandledMessage.data");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openfoxwq.UnhandledMessage)
  return target;
}

size_t UnhandledMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:openfoxwq.UnhandledMessage)
  size_t total_size = 0;

  if (_internal_has_tag()) {
    // required string tag = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  if (_internal_has_data()) {
    // required string data = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  return total_size;
}
size_t UnhandledMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openfoxwq.UnhandledMessage)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string tag = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());

    // required string data = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnhandledMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnhandledMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnhandledMessage::GetClassData() const { return &_class_data_; }


void UnhandledMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnhandledMessage*>(&to_msg);
  auto& from = static_cast<const UnhandledMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openfoxwq.UnhandledMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_tag(from._internal_tag());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_data(from._internal_data());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnhandledMessage::CopyFrom(const UnhandledMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openfoxwq.UnhandledMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnhandledMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void UnhandledMessage::InternalSwap(UnhandledMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tag_, lhs_arena,
      &other->_impl_.tag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UnhandledMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fcommon_2eproto_getter, &descriptor_table_proto_2fcommon_2eproto_once,
      file_level_metadata_proto_2fcommon_2eproto[9]);
}

// ===================================================================

class BroadcastRoomInfo_BroadcastRoomPlayerInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<BroadcastRoomInfo_BroadcastRoomPlayerInfo>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name_alt(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_country(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

BroadcastRoomInfo_BroadcastRoomPlayerInfo::BroadcastRoomInfo_BroadcastRoomPlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openfoxwq.BroadcastRoomInfo.BroadcastRoomPlayerInfo)
}
BroadcastRoomInfo_BroadcastRoomPlayerInfo::BroadcastRoomInfo_BroadcastRoomPlayerInfo(const BroadcastRoomInfo_BroadcastRoomPlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BroadcastRoomInfo_BroadcastRoomPlayerInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.name_alt_){}
    , decltype(_impl_.rank_){}
    , decltype(_impl_.country_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_alt_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_alt_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name_alt()) {
    _this->_impl_.name_alt_.Set(from._internal_name_alt(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.rank_, &from._impl_.rank_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.country_) -
    reinterpret_cast<char*>(&_impl_.rank_)) + sizeof(_impl_.country_));
  // @@protoc_insertion_point(copy_constructor:openfoxwq.BroadcastRoomInfo.BroadcastRoomPlayerInfo)
}

inline void BroadcastRoomInfo_BroadcastRoomPlayerInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.name_alt_){}
    , decltype(_impl_.rank_){0}
    , decltype(_impl_.country_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_alt_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_alt_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BroadcastRoomInfo_BroadcastRoomPlayerInfo::~BroadcastRoomInfo_BroadcastRoomPlayerInfo() {
  // @@protoc_insertion_point(destructor:openfoxwq.BroadcastRoomInfo.BroadcastRoomPlayerInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BroadcastRoomInfo_BroadcastRoomPlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.name_alt_.Destroy();
}

void BroadcastRoomInfo_BroadcastRoomPlayerInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BroadcastRoomInfo_BroadcastRoomPlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:openfoxwq.BroadcastRoomInfo.BroadcastRoomPlayerInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.name_alt_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.rank_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.country_) -
        reinterpret_cast<char*>(&_impl_.rank_)) + sizeof(_impl_.country_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BroadcastRoomInfo_BroadcastRoomPlayerInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "openfoxwq.BroadcastRoomInfo.BroadcastRoomPlayerInfo.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string name_alt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name_alt();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "openfoxwq.BroadcastRoomInfo.BroadcastRoomPlayerInfo.name_alt");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .openfoxwq.Rank rank = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::openfoxwq::Rank_IsValid(val))) {
            _internal_set_rank(static_cast<::openfoxwq::Rank>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .openfoxwq.Country country = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::openfoxwq::Country_IsValid(val))) {
            _internal_set_country(static_cast<::openfoxwq::Country>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BroadcastRoomInfo_BroadcastRoomPlayerInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openfoxwq.BroadcastRoomInfo.BroadcastRoomPlayerInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "openfoxwq.BroadcastRoomInfo.BroadcastRoomPlayerInfo.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string name_alt = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name_alt().data(), static_cast<int>(this->_internal_name_alt().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "openfoxwq.BroadcastRoomInfo.BroadcastRoomPlayerInfo.name_alt");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name_alt(), target);
  }

  // optional .openfoxwq.Rank rank = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_rank(), target);
  }

  // optional .openfoxwq.Country country = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_country(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openfoxwq.BroadcastRoomInfo.BroadcastRoomPlayerInfo)
  return target;
}

size_t BroadcastRoomInfo_BroadcastRoomPlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openfoxwq.BroadcastRoomInfo.BroadcastRoomPlayerInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string name_alt = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name_alt());
    }

    // optional .openfoxwq.Rank rank = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_rank());
    }

    // optional .openfoxwq.Country country = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_country());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BroadcastRoomInfo_BroadcastRoomPlayerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BroadcastRoomInfo_BroadcastRoomPlayerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BroadcastRoomInfo_BroadcastRoomPlayerInfo::GetClassData() const { return &_class_data_; }


void BroadcastRoomInfo_BroadcastRoomPlayerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BroadcastRoomInfo_BroadcastRoomPlayerInfo*>(&to_msg);
  auto& from = static_cast<const BroadcastRoomInfo_BroadcastRoomPlayerInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openfoxwq.BroadcastRoomInfo.BroadcastRoomPlayerInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_name_alt(from._internal_name_alt());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.rank_ = from._impl_.rank_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.country_ = from._impl_.country_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BroadcastRoomInfo_BroadcastRoomPlayerInfo::CopyFrom(const BroadcastRoomInfo_BroadcastRoomPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openfoxwq.BroadcastRoomInfo.BroadcastRoomPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastRoomInfo_BroadcastRoomPlayerInfo::IsInitialized() const {
  return true;
}

void BroadcastRoomInfo_BroadcastRoomPlayerInfo::InternalSwap(BroadcastRoomInfo_BroadcastRoomPlayerInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_alt_, lhs_arena,
      &other->_impl_.name_alt_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BroadcastRoomInfo_BroadcastRoomPlayerInfo, _impl_.country_)
      + sizeof(BroadcastRoomInfo_BroadcastRoomPlayerInfo::_impl_.country_)
      - PROTOBUF_FIELD_OFFSET(BroadcastRoomInfo_BroadcastRoomPlayerInfo, _impl_.rank_)>(
          reinterpret_cast<char*>(&_impl_.rank_),
          reinterpret_cast<char*>(&other->_impl_.rank_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BroadcastRoomInfo_BroadcastRoomPlayerInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fcommon_2eproto_getter, &descriptor_table_proto_2fcommon_2eproto_once,
      file_level_metadata_proto_2fcommon_2eproto[10]);
}

// ===================================================================

class BroadcastRoomInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<BroadcastRoomInfo>()._impl_._has_bits_);
  static void set_has_room_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_room_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_room_state(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_broadcaster(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_online_count(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_player_id_black(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_player_id_white(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo& player_info_black(const BroadcastRoomInfo* msg);
  static void set_has_player_info_black(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo& player_info_white(const BroadcastRoomInfo* msg);
  static void set_has_player_info_white(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000001de) ^ 0x000001de) != 0;
  }
};

const ::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo&
BroadcastRoomInfo::_Internal::player_info_black(const BroadcastRoomInfo* msg) {
  return *msg->_impl_.player_info_black_;
}
const ::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo&
BroadcastRoomInfo::_Internal::player_info_white(const BroadcastRoomInfo* msg) {
  return *msg->_impl_.player_info_white_;
}
BroadcastRoomInfo::BroadcastRoomInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openfoxwq.BroadcastRoomInfo)
}
BroadcastRoomInfo::BroadcastRoomInfo(const BroadcastRoomInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BroadcastRoomInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.broadcaster_){}
    , decltype(_impl_.player_info_black_){nullptr}
    , decltype(_impl_.player_info_white_){nullptr}
    , decltype(_impl_.room_id_){}
    , decltype(_impl_.room_type_){}
    , decltype(_impl_.room_state_){}
    , decltype(_impl_.online_count_){}
    , decltype(_impl_.player_id_black_){}
    , decltype(_impl_.player_id_white_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.broadcaster_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.broadcaster_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_broadcaster()) {
    _this->_impl_.broadcaster_.Set(from._internal_broadcaster(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_player_info_black()) {
    _this->_impl_.player_info_black_ = new ::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo(*from._impl_.player_info_black_);
  }
  if (from._internal_has_player_info_white()) {
    _this->_impl_.player_info_white_ = new ::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo(*from._impl_.player_info_white_);
  }
  ::memcpy(&_impl_.room_id_, &from._impl_.room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_id_white_) -
    reinterpret_cast<char*>(&_impl_.room_id_)) + sizeof(_impl_.player_id_white_));
  // @@protoc_insertion_point(copy_constructor:openfoxwq.BroadcastRoomInfo)
}

inline void BroadcastRoomInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.broadcaster_){}
    , decltype(_impl_.player_info_black_){nullptr}
    , decltype(_impl_.player_info_white_){nullptr}
    , decltype(_impl_.room_id_){int64_t{0}}
    , decltype(_impl_.room_type_){0}
    , decltype(_impl_.room_state_){0}
    , decltype(_impl_.online_count_){int64_t{0}}
    , decltype(_impl_.player_id_black_){int64_t{0}}
    , decltype(_impl_.player_id_white_){int64_t{0}}
  };
  _impl_.broadcaster_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.broadcaster_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BroadcastRoomInfo::~BroadcastRoomInfo() {
  // @@protoc_insertion_point(destructor:openfoxwq.BroadcastRoomInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BroadcastRoomInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.broadcaster_.Destroy();
  if (this != internal_default_instance()) delete _impl_.player_info_black_;
  if (this != internal_default_instance()) delete _impl_.player_info_white_;
}

void BroadcastRoomInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BroadcastRoomInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:openfoxwq.BroadcastRoomInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.broadcaster_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.player_info_black_ != nullptr);
      _impl_.player_info_black_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.player_info_white_ != nullptr);
      _impl_.player_info_white_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.room_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.player_id_black_) -
        reinterpret_cast<char*>(&_impl_.room_id_)) + sizeof(_impl_.player_id_black_));
  }
  _impl_.player_id_white_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BroadcastRoomInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 room_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_room_id(&has_bits);
          _impl_.room_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .openfoxwq.BroadcastRoomInfo.RoomType room_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::openfoxwq::BroadcastRoomInfo_RoomType_IsValid(val))) {
            _internal_set_room_type(static_cast<::openfoxwq::BroadcastRoomInfo_RoomType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .openfoxwq.BroadcastRoomInfo.RoomState room_state = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::openfoxwq::BroadcastRoomInfo_RoomState_IsValid(val))) {
            _internal_set_room_state(static_cast<::openfoxwq::BroadcastRoomInfo_RoomState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string broadcaster = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_broadcaster();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "openfoxwq.BroadcastRoomInfo.broadcaster");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required int64 online_count = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_online_count(&has_bits);
          _impl_.online_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 player_id_black = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_player_id_black(&has_bits);
          _impl_.player_id_black_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 player_id_white = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_player_id_white(&has_bits);
          _impl_.player_id_white_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .openfoxwq.BroadcastRoomInfo.BroadcastRoomPlayerInfo player_info_black = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_info_black(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .openfoxwq.BroadcastRoomInfo.BroadcastRoomPlayerInfo player_info_white = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_info_white(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BroadcastRoomInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openfoxwq.BroadcastRoomInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int64 room_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_room_id(), target);
  }

  // required .openfoxwq.BroadcastRoomInfo.RoomType room_type = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_room_type(), target);
  }

  // optional .openfoxwq.BroadcastRoomInfo.RoomState room_state = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_room_state(), target);
  }

  // optional string broadcaster = 9;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_broadcaster().data(), static_cast<int>(this->_internal_broadcaster().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "openfoxwq.BroadcastRoomInfo.broadcaster");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_broadcaster(), target);
  }

  // required int64 online_count = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_online_count(), target);
  }

  // required int64 player_id_black = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_player_id_black(), target);
  }

  // required int64 player_id_white = 12;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_player_id_white(), target);
  }

  // required .openfoxwq.BroadcastRoomInfo.BroadcastRoomPlayerInfo player_info_black = 13;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::player_info_black(this),
        _Internal::player_info_black(this).GetCachedSize(), target, stream);
  }

  // required .openfoxwq.BroadcastRoomInfo.BroadcastRoomPlayerInfo player_info_white = 14;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::player_info_white(this),
        _Internal::player_info_white(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openfoxwq.BroadcastRoomInfo)
  return target;
}

size_t BroadcastRoomInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:openfoxwq.BroadcastRoomInfo)
  size_t total_size = 0;

  if (_internal_has_player_info_black()) {
    // required .openfoxwq.BroadcastRoomInfo.BroadcastRoomPlayerInfo player_info_black = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_info_black_);
  }

  if (_internal_has_player_info_white()) {
    // required .openfoxwq.BroadcastRoomInfo.BroadcastRoomPlayerInfo player_info_white = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_info_white_);
  }

  if (_internal_has_room_id()) {
    // required int64 room_id = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_room_id());
  }

  if (_internal_has_room_type()) {
    // required .openfoxwq.BroadcastRoomInfo.RoomType room_type = 3;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_room_type());
  }

  if (_internal_has_online_count()) {
    // required int64 online_count = 10;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_online_count());
  }

  if (_internal_has_player_id_black()) {
    // required int64 player_id_black = 11;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_player_id_black());
  }

  if (_internal_has_player_id_white()) {
    // required int64 player_id_white = 12;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_player_id_white());
  }

  return total_size;
}
size_t BroadcastRoomInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openfoxwq.BroadcastRoomInfo)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x000001de) ^ 0x000001de) == 0) {  // All required fields are present.
    // required .openfoxwq.BroadcastRoomInfo.BroadcastRoomPlayerInfo player_info_black = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_info_black_);

    // required .openfoxwq.BroadcastRoomInfo.BroadcastRoomPlayerInfo player_info_white = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_info_white_);

    // required int64 room_id = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_room_id());

    // required .openfoxwq.BroadcastRoomInfo.RoomType room_type = 3;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_room_type());

    // required int64 online_count = 10;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_online_count());

    // required int64 player_id_black = 11;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_player_id_black());

    // required int64 player_id_white = 12;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_player_id_white());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string broadcaster = 9;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_broadcaster());
  }

  // optional .openfoxwq.BroadcastRoomInfo.RoomState room_state = 8;
  if (cached_has_bits & 0x00000020u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_room_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BroadcastRoomInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BroadcastRoomInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BroadcastRoomInfo::GetClassData() const { return &_class_data_; }


void BroadcastRoomInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BroadcastRoomInfo*>(&to_msg);
  auto& from = static_cast<const BroadcastRoomInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openfoxwq.BroadcastRoomInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_broadcaster(from._internal_broadcaster());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_player_info_black()->::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo::MergeFrom(
          from._internal_player_info_black());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_player_info_white()->::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo::MergeFrom(
          from._internal_player_info_white());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.room_id_ = from._impl_.room_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.room_type_ = from._impl_.room_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.room_state_ = from._impl_.room_state_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.online_count_ = from._impl_.online_count_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.player_id_black_ = from._impl_.player_id_black_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_player_id_white(from._internal_player_id_white());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BroadcastRoomInfo::CopyFrom(const BroadcastRoomInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openfoxwq.BroadcastRoomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastRoomInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void BroadcastRoomInfo::InternalSwap(BroadcastRoomInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.broadcaster_, lhs_arena,
      &other->_impl_.broadcaster_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BroadcastRoomInfo, _impl_.player_id_white_)
      + sizeof(BroadcastRoomInfo::_impl_.player_id_white_)
      - PROTOBUF_FIELD_OFFSET(BroadcastRoomInfo, _impl_.player_info_black_)>(
          reinterpret_cast<char*>(&_impl_.player_info_black_),
          reinterpret_cast<char*>(&other->_impl_.player_info_black_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BroadcastRoomInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fcommon_2eproto_getter, &descriptor_table_proto_2fcommon_2eproto_once,
      file_level_metadata_proto_2fcommon_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace openfoxwq
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::openfoxwq::VersionInfo*
Arena::CreateMaybeMessage< ::openfoxwq::VersionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openfoxwq::VersionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::openfoxwq::ProxyLineInfo_ProxyAddressInfo*
Arena::CreateMaybeMessage< ::openfoxwq::ProxyLineInfo_ProxyAddressInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openfoxwq::ProxyLineInfo_ProxyAddressInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::openfoxwq::ProxyLineInfo*
Arena::CreateMaybeMessage< ::openfoxwq::ProxyLineInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openfoxwq::ProxyLineInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::openfoxwq::LobbySvrInfo_NameLocEntry_DoNotUse*
Arena::CreateMaybeMessage< ::openfoxwq::LobbySvrInfo_NameLocEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openfoxwq::LobbySvrInfo_NameLocEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::openfoxwq::LobbySvrInfo*
Arena::CreateMaybeMessage< ::openfoxwq::LobbySvrInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openfoxwq::LobbySvrInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::openfoxwq::PlayerInfo*
Arena::CreateMaybeMessage< ::openfoxwq::PlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openfoxwq::PlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::openfoxwq::ExtraPlayerInfo*
Arena::CreateMaybeMessage< ::openfoxwq::ExtraPlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openfoxwq::ExtraPlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::openfoxwq::GameResults*
Arena::CreateMaybeMessage< ::openfoxwq::GameResults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openfoxwq::GameResults >(arena);
}
template<> PROTOBUF_NOINLINE ::openfoxwq::ExtendedGameResults*
Arena::CreateMaybeMessage< ::openfoxwq::ExtendedGameResults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openfoxwq::ExtendedGameResults >(arena);
}
template<> PROTOBUF_NOINLINE ::openfoxwq::UnhandledMessage*
Arena::CreateMaybeMessage< ::openfoxwq::UnhandledMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openfoxwq::UnhandledMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo*
Arena::CreateMaybeMessage< ::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::openfoxwq::BroadcastRoomInfo*
Arena::CreateMaybeMessage< ::openfoxwq::BroadcastRoomInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openfoxwq::BroadcastRoomInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
