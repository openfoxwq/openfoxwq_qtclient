// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/common.proto

#include "proto/common.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace openfoxwq {
PROTOBUF_CONSTEXPR VersionInfo::VersionInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.qgi_)*/{}
  , /*decltype(_impl_.qgi_hash_)*/{}
  , /*decltype(_impl_.update_info_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.install_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version1_)*/int64_t{0}
  , /*decltype(_impl_.version2_)*/int64_t{0}} {}
struct VersionInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VersionInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VersionInfoDefaultTypeInternal() {}
  union {
    VersionInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VersionInfoDefaultTypeInternal _VersionInfo_default_instance_;
PROTOBUF_CONSTEXPR ProxyLineInfo_ProxyAddressInfo::ProxyLineInfo_ProxyAddressInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.host1_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.host2_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.port1_)*/int64_t{0}
  , /*decltype(_impl_.port2_)*/int64_t{0}} {}
struct ProxyLineInfo_ProxyAddressInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProxyLineInfo_ProxyAddressInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProxyLineInfo_ProxyAddressInfoDefaultTypeInternal() {}
  union {
    ProxyLineInfo_ProxyAddressInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProxyLineInfo_ProxyAddressInfoDefaultTypeInternal _ProxyLineInfo_ProxyAddressInfo_default_instance_;
PROTOBUF_CONSTEXPR ProxyLineInfo::ProxyLineInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.address_info_)*/nullptr
  , /*decltype(_impl_.index_)*/int64_t{0}} {}
struct ProxyLineInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProxyLineInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProxyLineInfoDefaultTypeInternal() {}
  union {
    ProxyLineInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProxyLineInfoDefaultTypeInternal _ProxyLineInfo_default_instance_;
PROTOBUF_CONSTEXPR LobbySvrInfo_NameLocEntry_DoNotUse::LobbySvrInfo_NameLocEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct LobbySvrInfo_NameLocEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LobbySvrInfo_NameLocEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LobbySvrInfo_NameLocEntry_DoNotUseDefaultTypeInternal() {}
  union {
    LobbySvrInfo_NameLocEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LobbySvrInfo_NameLocEntry_DoNotUseDefaultTypeInternal _LobbySvrInfo_NameLocEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR LobbySvrInfo::LobbySvrInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_loc_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.broadcast_host_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.unknown_host_1_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.unknown_host_2_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.unknown_host_3_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.unknown_host_4_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.play_host_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.num_players_)*/int64_t{0}
  , /*decltype(_impl_.num_matches_)*/int64_t{0}
  , /*decltype(_impl_.unknown_field_7_)*/int64_t{0}
  , /*decltype(_impl_.unknown_field_8_)*/int64_t{0}
  , /*decltype(_impl_.broadcast_port_)*/0
  , /*decltype(_impl_.unknown_port_1_)*/0
  , /*decltype(_impl_.unknown_port_2_)*/0
  , /*decltype(_impl_.unknown_port_3_)*/0
  , /*decltype(_impl_.unknown_port_4_)*/0
  , /*decltype(_impl_.play_port_)*/0} {}
struct LobbySvrInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LobbySvrInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LobbySvrInfoDefaultTypeInternal() {}
  union {
    LobbySvrInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LobbySvrInfoDefaultTypeInternal _LobbySvrInfo_default_instance_;
PROTOBUF_CONSTEXPR PlayerInfo::PlayerInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_native_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.player_id_)*/int64_t{0}
  , /*decltype(_impl_.rank_)*/0
  , /*decltype(_impl_.country_)*/0
  , /*decltype(_impl_.club_id_)*/int64_t{0}
  , /*decltype(_impl_.unknown_field_8_)*/int64_t{0}
  , /*decltype(_impl_.ranked_wins_)*/int64_t{0}
  , /*decltype(_impl_.ranked_losses_)*/int64_t{0}
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_.sex_)*/0
  , /*decltype(_impl_.unknown_field_13_)*/int64_t{0}
  , /*decltype(_impl_.foxcoin_)*/int64_t{0}
  , /*decltype(_impl_.flair_)*/0
  , /*decltype(_impl_.accepting_matches_)*/false
  , /*decltype(_impl_.ai_)*/false
  , /*decltype(_impl_.amateur_6d_)*/false
  , /*decltype(_impl_.membership_valid_until_)*/int64_t{0}
  , /*decltype(_impl_.membership_type_)*/0} {}
struct PlayerInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerInfoDefaultTypeInternal() {}
  union {
    PlayerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerInfoDefaultTypeInternal _PlayerInfo_default_instance_;
PROTOBUF_CONSTEXPR MatchSettings::MatchSettings(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.player_id_first_)*/int64_t{0}
  , /*decltype(_impl_.player_id_second_)*/int64_t{0}
  , /*decltype(_impl_.handicap_)*/int64_t{0}
  , /*decltype(_impl_.komi_)*/int64_t{0}
  , /*decltype(_impl_.main_time_sec_)*/int64_t{0}
  , /*decltype(_impl_.byoyomi_time_sec_)*/int64_t{0}
  , /*decltype(_impl_.byoyomi_periods_)*/int64_t{0}
  , /*decltype(_impl_.board_size_)*/int64_t{0}
  , /*decltype(_impl_.chinese_rules_)*/false} {}
struct MatchSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MatchSettingsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MatchSettingsDefaultTypeInternal() {}
  union {
    MatchSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MatchSettingsDefaultTypeInternal _MatchSettings_default_instance_;
PROTOBUF_CONSTEXPR RoomSettings::RoomSettings(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.board_size_)*/int64_t{0}
  , /*decltype(_impl_.handicap_)*/int64_t{0}
  , /*decltype(_impl_.komi_)*/int64_t{0}
  , /*decltype(_impl_.player_id_black_)*/int64_t{0}
  , /*decltype(_impl_.main_time_sec_)*/int64_t{0}
  , /*decltype(_impl_.byoyomi_time_sec_)*/int64_t{0}
  , /*decltype(_impl_.byoyomi_periods_)*/int64_t{0}
  , /*decltype(_impl_.player_id_white_)*/int64_t{0}} {}
struct RoomSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoomSettingsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoomSettingsDefaultTypeInternal() {}
  union {
    RoomSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoomSettingsDefaultTypeInternal _RoomSettings_default_instance_;
PROTOBUF_CONSTEXPR RoomId::RoomId(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_1_)*/int64_t{0}
  , /*decltype(_impl_.id_2_)*/int64_t{0}
  , /*decltype(_impl_.id_3_)*/int64_t{0}
  , /*decltype(_impl_.id_4_)*/int64_t{0}} {}
struct RoomIdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoomIdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoomIdDefaultTypeInternal() {}
  union {
    RoomId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoomIdDefaultTypeInternal _RoomId_default_instance_;
PROTOBUF_CONSTEXPR BroadcastInfo_BroadcastPlayerInfo::BroadcastInfo_BroadcastPlayerInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_alt_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rank_)*/0
  , /*decltype(_impl_.country_)*/0} {}
struct BroadcastInfo_BroadcastPlayerInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BroadcastInfo_BroadcastPlayerInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BroadcastInfo_BroadcastPlayerInfoDefaultTypeInternal() {}
  union {
    BroadcastInfo_BroadcastPlayerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BroadcastInfo_BroadcastPlayerInfoDefaultTypeInternal _BroadcastInfo_BroadcastPlayerInfo_default_instance_;
PROTOBUF_CONSTEXPR BroadcastInfo::BroadcastInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.broadcaster_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.player_info_black_)*/nullptr
  , /*decltype(_impl_.player_info_white_)*/nullptr
  , /*decltype(_impl_.id_)*/int64_t{0}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_.online_count_)*/int64_t{0}
  , /*decltype(_impl_.player_id_black_)*/int64_t{0}
  , /*decltype(_impl_.player_id_white_)*/int64_t{0}} {}
struct BroadcastInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BroadcastInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BroadcastInfoDefaultTypeInternal() {}
  union {
    BroadcastInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BroadcastInfoDefaultTypeInternal _BroadcastInfo_default_instance_;
}  // namespace openfoxwq
static ::_pb::Metadata file_level_metadata_proto_2fcommon_2eproto[11];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_proto_2fcommon_2eproto[9];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_proto_2fcommon_2eproto = nullptr;

const uint32_t TableStruct_proto_2fcommon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::openfoxwq::VersionInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::VersionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openfoxwq::VersionInfo, _impl_.version1_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::VersionInfo, _impl_.version2_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::VersionInfo, _impl_.update_info_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::VersionInfo, _impl_.install_url_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::VersionInfo, _impl_.qgi_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::VersionInfo, _impl_.qgi_hash_),
  2,
  3,
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::openfoxwq::ProxyLineInfo_ProxyAddressInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::ProxyLineInfo_ProxyAddressInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openfoxwq::ProxyLineInfo_ProxyAddressInfo, _impl_.host1_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::ProxyLineInfo_ProxyAddressInfo, _impl_.port1_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::ProxyLineInfo_ProxyAddressInfo, _impl_.host2_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::ProxyLineInfo_ProxyAddressInfo, _impl_.port2_),
  0,
  2,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::openfoxwq::ProxyLineInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::ProxyLineInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openfoxwq::ProxyLineInfo, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::ProxyLineInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::ProxyLineInfo, _impl_.address_info_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LobbySvrInfo_NameLocEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LobbySvrInfo_NameLocEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LobbySvrInfo_NameLocEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LobbySvrInfo_NameLocEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LobbySvrInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LobbySvrInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LobbySvrInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LobbySvrInfo, _impl_.broadcast_host_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LobbySvrInfo, _impl_.broadcast_port_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LobbySvrInfo, _impl_.num_players_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LobbySvrInfo, _impl_.num_matches_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LobbySvrInfo, _impl_.unknown_host_1_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LobbySvrInfo, _impl_.unknown_port_1_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LobbySvrInfo, _impl_.unknown_host_2_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LobbySvrInfo, _impl_.unknown_port_2_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LobbySvrInfo, _impl_.unknown_host_3_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LobbySvrInfo, _impl_.unknown_port_3_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LobbySvrInfo, _impl_.unknown_host_4_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LobbySvrInfo, _impl_.unknown_port_4_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LobbySvrInfo, _impl_.play_host_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LobbySvrInfo, _impl_.play_port_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LobbySvrInfo, _impl_.name_loc_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LobbySvrInfo, _impl_.unknown_field_7_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::LobbySvrInfo, _impl_.unknown_field_8_),
  0,
  1,
  11,
  7,
  8,
  2,
  12,
  3,
  13,
  4,
  14,
  5,
  15,
  6,
  16,
  ~0u,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::openfoxwq::PlayerInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::PlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openfoxwq::PlayerInfo, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::PlayerInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::PlayerInfo, _impl_.name_native_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::PlayerInfo, _impl_.rank_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::PlayerInfo, _impl_.country_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::PlayerInfo, _impl_.club_id_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::PlayerInfo, _impl_.accepting_matches_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::PlayerInfo, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::PlayerInfo, _impl_.ranked_wins_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::PlayerInfo, _impl_.ranked_losses_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::PlayerInfo, _impl_.sex_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::PlayerInfo, _impl_.foxcoin_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::PlayerInfo, _impl_.flair_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::PlayerInfo, _impl_.membership_type_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::PlayerInfo, _impl_.membership_valid_until_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::PlayerInfo, _impl_.ai_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::PlayerInfo, _impl_.amateur_6d_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::PlayerInfo, _impl_.unknown_field_8_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::PlayerInfo, _impl_.unknown_field_13_),
  2,
  0,
  1,
  3,
  4,
  5,
  14,
  9,
  7,
  8,
  10,
  12,
  13,
  18,
  17,
  15,
  16,
  6,
  11,
  PROTOBUF_FIELD_OFFSET(::openfoxwq::MatchSettings, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::MatchSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openfoxwq::MatchSettings, _impl_.player_id_first_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::MatchSettings, _impl_.player_id_second_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::MatchSettings, _impl_.handicap_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::MatchSettings, _impl_.komi_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::MatchSettings, _impl_.main_time_sec_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::MatchSettings, _impl_.byoyomi_time_sec_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::MatchSettings, _impl_.byoyomi_periods_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::MatchSettings, _impl_.chinese_rules_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::MatchSettings, _impl_.board_size_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  8,
  7,
  PROTOBUF_FIELD_OFFSET(::openfoxwq::RoomSettings, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::RoomSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openfoxwq::RoomSettings, _impl_.board_size_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::RoomSettings, _impl_.handicap_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::RoomSettings, _impl_.komi_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::RoomSettings, _impl_.player_id_black_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::RoomSettings, _impl_.main_time_sec_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::RoomSettings, _impl_.byoyomi_time_sec_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::RoomSettings, _impl_.byoyomi_periods_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::RoomSettings, _impl_.player_id_white_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::openfoxwq::RoomId, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::RoomId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openfoxwq::RoomId, _impl_.id_1_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::RoomId, _impl_.id_2_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::RoomId, _impl_.id_3_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::RoomId, _impl_.id_4_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::openfoxwq::BroadcastInfo_BroadcastPlayerInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::BroadcastInfo_BroadcastPlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openfoxwq::BroadcastInfo_BroadcastPlayerInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::BroadcastInfo_BroadcastPlayerInfo, _impl_.name_alt_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::BroadcastInfo_BroadcastPlayerInfo, _impl_.rank_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::BroadcastInfo_BroadcastPlayerInfo, _impl_.country_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::openfoxwq::BroadcastInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::BroadcastInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openfoxwq::BroadcastInfo, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::BroadcastInfo, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::BroadcastInfo, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::BroadcastInfo, _impl_.broadcaster_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::BroadcastInfo, _impl_.online_count_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::BroadcastInfo, _impl_.player_id_black_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::BroadcastInfo, _impl_.player_id_white_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::BroadcastInfo, _impl_.player_info_black_),
  PROTOBUF_FIELD_OFFSET(::openfoxwq::BroadcastInfo, _impl_.player_info_white_),
  3,
  4,
  5,
  0,
  6,
  7,
  8,
  1,
  2,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, -1, sizeof(::openfoxwq::VersionInfo)},
  { 18, 28, -1, sizeof(::openfoxwq::ProxyLineInfo_ProxyAddressInfo)},
  { 32, 41, -1, sizeof(::openfoxwq::ProxyLineInfo)},
  { 44, 52, -1, sizeof(::openfoxwq::LobbySvrInfo_NameLocEntry_DoNotUse)},
  { 54, 78, -1, sizeof(::openfoxwq::LobbySvrInfo)},
  { 96, 121, -1, sizeof(::openfoxwq::PlayerInfo)},
  { 140, 155, -1, sizeof(::openfoxwq::MatchSettings)},
  { 164, 178, -1, sizeof(::openfoxwq::RoomSettings)},
  { 186, 196, -1, sizeof(::openfoxwq::RoomId)},
  { 200, 210, -1, sizeof(::openfoxwq::BroadcastInfo_BroadcastPlayerInfo)},
  { 214, 229, -1, sizeof(::openfoxwq::BroadcastInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::openfoxwq::_VersionInfo_default_instance_._instance,
  &::openfoxwq::_ProxyLineInfo_ProxyAddressInfo_default_instance_._instance,
  &::openfoxwq::_ProxyLineInfo_default_instance_._instance,
  &::openfoxwq::_LobbySvrInfo_NameLocEntry_DoNotUse_default_instance_._instance,
  &::openfoxwq::_LobbySvrInfo_default_instance_._instance,
  &::openfoxwq::_PlayerInfo_default_instance_._instance,
  &::openfoxwq::_MatchSettings_default_instance_._instance,
  &::openfoxwq::_RoomSettings_default_instance_._instance,
  &::openfoxwq::_RoomId_default_instance_._instance,
  &::openfoxwq::_BroadcastInfo_BroadcastPlayerInfo_default_instance_._instance,
  &::openfoxwq::_BroadcastInfo_default_instance_._instance,
};

const char descriptor_table_protodef_proto_2fcommon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022proto/common.proto\022\topenfoxwq\"z\n\013Versi"
  "onInfo\022\020\n\010version1\030\001 \002(\003\022\020\n\010version2\030\002 \002"
  "(\003\022\023\n\013update_info\030\003 \001(\t\022\023\n\013install_url\030\005"
  " \001(\t\022\013\n\003qgi\030\006 \003(\t\022\020\n\010qgi_hash\030\007 \003(\t\"\275\001\n\r"
  "ProxyLineInfo\022\r\n\005index\030\001 \002(\003\022\014\n\004name\030\002 \002"
  "(\t\022\?\n\014address_info\030\003 \002(\0132).openfoxwq.Pro"
  "xyLineInfo.ProxyAddressInfo\032N\n\020ProxyAddr"
  "essInfo\022\r\n\005host1\030\001 \002(\t\022\r\n\005port1\030\002 \002(\003\022\r\n"
  "\005host2\030\003 \002(\t\022\r\n\005port2\030\004 \002(\003\"\366\003\n\014LobbySvr"
  "Info\022\014\n\004name\030\002 \001(\t\022\026\n\016broadcast_host\030\005 \001"
  "(\t\022\026\n\016broadcast_port\030\006 \001(\005\022\023\n\013num_player"
  "s\030\003 \001(\003\022\023\n\013num_matches\030\004 \001(\003\022\026\n\016unknown_"
  "host_1\030\r \001(\t\022\026\n\016unknown_port_1\030\016 \001(\005\022\026\n\016"
  "unknown_host_2\030\017 \001(\t\022\026\n\016unknown_port_2\030\020"
  " \001(\005\022\026\n\016unknown_host_3\030\021 \001(\t\022\026\n\016unknown_"
  "port_3\030\022 \001(\005\022\026\n\016unknown_host_4\030\023 \001(\t\022\026\n\016"
  "unknown_port_4\030\024 \001(\005\022\021\n\tplay_host\030\025 \001(\t\022"
  "\021\n\tplay_port\030\026 \001(\005\0226\n\010name_loc\030\027 \003(\0132$.o"
  "penfoxwq.LobbySvrInfo.NameLocEntry\022\027\n\017un"
  "known_field_7\030\007 \001(\003\022\027\n\017unknown_field_8\030\010"
  " \001(\003\032.\n\014NameLocEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005val"
  "ue\030\002 \001(\t:\0028\001\"\375\003\n\nPlayerInfo\022\021\n\tplayer_id"
  "\030\001 \002(\003\022\014\n\004name\030\002 \001(\t\022\023\n\013name_native\030\003 \001("
  "\t\022\035\n\004rank\030\004 \001(\0162\017.openfoxwq.Rank\022#\n\007coun"
  "try\030\005 \001(\0162\022.openfoxwq.Country\022\017\n\007club_id"
  "\030\006 \001(\003\022\031\n\021accepting_matches\030\007 \001(\010\022\'\n\006sta"
  "tus\030\t \001(\0162\027.openfoxwq.PlayerStatus\022\023\n\013ra"
  "nked_wins\030\n \001(\003\022\025\n\rranked_losses\030\013 \001(\003\022\033"
  "\n\003sex\030\016 \001(\0162\016.openfoxwq.Sex\022\017\n\007foxcoin\030\025"
  " \001(\003\022\037\n\005flair\030\032 \001(\0162\020.openfoxwq.Flair\0222\n"
  "\017membership_type\030\033 \001(\0162\031.openfoxwq.Membe"
  "rshipType\022\036\n\026membership_valid_until\030\034 \001("
  "\003\022\n\n\002ai\030$ \001(\010\022\022\n\namateur_6d\030% \001(\010\022\027\n\017unk"
  "nown_field_8\030\010 \001(\003\022\030\n\020unknown_field_13\030\r"
  " \001(\003\"\327\001\n\rMatchSettings\022\027\n\017player_id_firs"
  "t\030\001 \002(\003\022\030\n\020player_id_second\030\002 \002(\003\022\020\n\010han"
  "dicap\030\004 \001(\003\022\014\n\004komi\030\005 \001(\003\022\025\n\rmain_time_s"
  "ec\030\007 \002(\003\022\030\n\020byoyomi_time_sec\030\010 \002(\003\022\027\n\017by"
  "oyomi_periods\030\t \002(\003\022\025\n\rchinese_rules\030\n \001"
  "(\010\022\022\n\nboard_size\030\020 \002(\003\"\276\001\n\014RoomSettings\022"
  "\022\n\nboard_size\030\001 \001(\003\022\020\n\010handicap\030\003 \001(\003\022\014\n"
  "\004komi\030\004 \001(\003\022\027\n\017player_id_black\030\005 \001(\003\022\025\n\r"
  "main_time_sec\030\006 \001(\003\022\030\n\020byoyomi_time_sec\030"
  "\007 \001(\003\022\027\n\017byoyomi_periods\030\010 \001(\003\022\027\n\017player"
  "_id_white\030\032 \001(\003\"@\n\006RoomId\022\014\n\004id_1\030\001 \001(\003\022"
  "\014\n\004id_2\030\002 \001(\003\022\014\n\004id_3\030\003 \001(\003\022\014\n\004id_4\030\004 \001("
  "\003\"\334\005\n\rBroadcastInfo\022\n\n\002id\030\001 \002(\003\0224\n\004type\030"
  "\003 \002(\0162&.openfoxwq.BroadcastInfo.Broadcas"
  "tType\0226\n\005state\030\010 \001(\0162\'.openfoxwq.Broadca"
  "stInfo.BroadcastState\022\023\n\013broadcaster\030\t \001"
  "(\t\022\024\n\014online_count\030\n \002(\003\022\027\n\017player_id_bl"
  "ack\030\013 \002(\003\022\027\n\017player_id_white\030\014 \002(\003\022G\n\021pl"
  "ayer_info_black\030\r \002(\0132,.openfoxwq.Broadc"
  "astInfo.BroadcastPlayerInfo\022G\n\021player_in"
  "fo_white\030\016 \002(\0132,.openfoxwq.BroadcastInfo"
  ".BroadcastPlayerInfo\032y\n\023BroadcastPlayerI"
  "nfo\022\014\n\004name\030\001 \001(\t\022\020\n\010name_alt\030\002 \001(\t\022\035\n\004r"
  "ank\030\003 \001(\0162\017.openfoxwq.Rank\022#\n\007country\030\004 "
  "\001(\0162\022.openfoxwq.Country\"g\n\rBroadcastType"
  "\022\016\n\nRT_UNKNOWN\020\000\022\014\n\010RT_MATCH\020\001\022\020\n\014RT_BRO"
  "ADCAST\020\004\022\021\n\rRT_COMMENTARY\020\005\022\023\n\017RT_CHAMPI"
  "ONSHIP\020\006\"~\n\016BroadcastState\022\016\n\nRS_UNKNOWN"
  "\020\000\022\016\n\nRS_OPENING\020\001\022\016\n\nRS_1PERIOD\020\002\022\021\n\rRS"
  "_MIDDLEGAME\020\003\022\016\n\nRS_ENDGAME\020\004\022\n\n\006RS_END\020"
  "\005\022\r\n\tRS_REVIEW\020\006*3\n\005Color\022\014\n\010COL_NONE\020\000\022"
  "\r\n\tCOL_BLACK\020\001\022\r\n\tCOL_WHITE\020\002*\377\003\n\004Rank\022\014"
  "\n\010RANK_18K\020\000\022\014\n\010RANK_17K\020\001\022\014\n\010RANK_16K\020\002"
  "\022\014\n\010RANK_15K\020\003\022\014\n\010RANK_14K\020\004\022\014\n\010RANK_13K"
  "\020\005\022\014\n\010RANK_12K\020\006\022\014\n\010RANK_11K\020\007\022\014\n\010RANK_1"
  "0K\020\010\022\013\n\007RANK_9K\020\t\022\013\n\007RANK_8K\020\n\022\013\n\007RANK_7"
  "K\020\013\022\013\n\007RANK_6K\020\014\022\013\n\007RANK_5K\020\r\022\013\n\007RANK_4K"
  "\020\016\022\013\n\007RANK_3K\020\017\022\013\n\007RANK_2K\020\020\022\013\n\007RANK_1K\020"
  "\021\022\013\n\007RANK_1D\020\022\022\013\n\007RANK_2D\020\023\022\013\n\007RANK_3D\020\024"
  "\022\013\n\007RANK_4D\020\025\022\013\n\007RANK_5D\020\026\022\013\n\007RANK_6D\020\027\022"
  "\013\n\007RANK_7D\020\030\022\013\n\007RANK_8D\020\031\022\013\n\007RANK_9D\020\032\022\014"
  "\n\010RANK_10D\020\033\022\013\n\007RANK_1P\020d\022\013\n\007RANK_2P\020e\022\013"
  "\n\007RANK_3P\020f\022\013\n\007RANK_4P\020g\022\013\n\007RANK_5P\020h\022\013\n"
  "\007RANK_6P\020i\022\013\n\007RANK_7P\020j\022\013\n\007RANK_8P\020k\022\013\n\007"
  "RANK_9P\020l\022\014\n\010RANK_10P\020m*\330\004\n\007Country\022\013\n\007U"
  "NKNOWN\020\000\022\007\n\003USA\020\001\022\n\n\006RUSSIA\020\007\022\t\n\005EGYPT\020\024"
  "\022\017\n\013SOUTHAFRICA\020\033\022\n\n\006GREECE\020\036\022\017\n\013NETHERL"
  "ANDS\020\037\022\013\n\007BELGIUM\020 \022\n\n\006FRANCE\020!\022\t\n\005SPAIN"
  "\020\"\022\013\n\007HUNGARY\020$\022\t\n\005ITALY\020\'\022\013\n\007AUSTRIA\020+\022"
  "\006\n\002UK\020,\022\n\n\006SWEDEN\020.\022\n\n\006NORWAY\020/\022\n\n\006POLAN"
  "D\0200\022\n\n\006MEXICO\0204\022\t\n\005CHILE\0208\022\014\n\010MALAYSIA\020<"
  "\022\r\n\tAUSTRALIA\020=\022\r\n\tINDONESIA\020>\022\017\n\013PHILIP"
  "PINES\020\?\022\016\n\nNEWZEALAND\020@\022\r\n\tSINGAPORE\020A\022\014"
  "\n\010THAILAND\020B\022\t\n\005JAPAN\020Q\022\t\n\005KOREA\020R\022\n\n\006TA"
  "IWAN\020S\022\013\n\007VIETNAM\020T\022\t\n\005CHINA\020V\022\n\n\006TURKEY"
  "\020Z\022\014\n\007NIGERIA\020\352\001\022\014\n\007GERMANY\020\335\002\022\r\n\010PORTUG"
  "AL\020\337\002\022\014\n\007ALBANIA\020\343\002\022\r\n\010BULGARIA\020\347\002\022\013\n\006LA"
  "TVIA\020\363\002\022\014\n\007BELARUS\020\367\002\022\014\n\007UKRAINE\020\374\002\022\r\n\010H"
  "ONGKONG\020\324\006\022\n\n\005MACAU\020\325\006\022\020\n\013SAUDIARABIA\020\307\007"
  "\022\013\n\006ISRAEL\020\315\007\022\013\n\006CANADA\020\347V*F\n\014PlayerStat"
  "us\022\020\n\014PSTATUS_IDLE\020\000\022\021\n\rPSTATUS_MATCH\020\001\022"
  "\021\n\rPSTATUS_WATCH\020\002*#\n\003Sex\022\014\n\010SEX_MALE\020\000\022"
  "\016\n\nSEX_FEMALE\020\001*\204\001\n\005Flair\022\016\n\nFLAIR_NONE\020"
  "\000\022\r\n\tFLAIR_PRO\020\001\022\024\n\020FLAIR_GOLD_CROWN\020\002\022\025"
  "\n\021FLAIR_TOP_AMATEUR\020\003\022\026\n\022FLAIR_SILVER_CR"
  "OWN\020\004\022\027\n\023FLAIR_ELITE_AMATEUR\020\005*Q\n\016Member"
  "shipType\022\023\n\017MEMBERSHIP_NONE\020\000\022\025\n\021MEMBERS"
  "HIP_SILVER\020\001\022\023\n\017MEMBERSHIP_GOLD\020\002B&Z$git"
  "hub.com/openfoxwq/openfoxwq/proto"
  ;
static ::_pbi::once_flag descriptor_table_proto_2fcommon_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_proto_2fcommon_2eproto = {
    false, false, 4113, descriptor_table_protodef_proto_2fcommon_2eproto,
    "proto/common.proto",
    &descriptor_table_proto_2fcommon_2eproto_once, nullptr, 0, 11,
    schemas, file_default_instances, TableStruct_proto_2fcommon_2eproto::offsets,
    file_level_metadata_proto_2fcommon_2eproto, file_level_enum_descriptors_proto_2fcommon_2eproto,
    file_level_service_descriptors_proto_2fcommon_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_proto_2fcommon_2eproto_getter() {
  return &descriptor_table_proto_2fcommon_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_proto_2fcommon_2eproto(&descriptor_table_proto_2fcommon_2eproto);
namespace openfoxwq {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BroadcastInfo_BroadcastType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fcommon_2eproto);
  return file_level_enum_descriptors_proto_2fcommon_2eproto[0];
}
bool BroadcastInfo_BroadcastType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr BroadcastInfo_BroadcastType BroadcastInfo::RT_UNKNOWN;
constexpr BroadcastInfo_BroadcastType BroadcastInfo::RT_MATCH;
constexpr BroadcastInfo_BroadcastType BroadcastInfo::RT_BROADCAST;
constexpr BroadcastInfo_BroadcastType BroadcastInfo::RT_COMMENTARY;
constexpr BroadcastInfo_BroadcastType BroadcastInfo::RT_CHAMPIONSHIP;
constexpr BroadcastInfo_BroadcastType BroadcastInfo::BroadcastType_MIN;
constexpr BroadcastInfo_BroadcastType BroadcastInfo::BroadcastType_MAX;
constexpr int BroadcastInfo::BroadcastType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BroadcastInfo_BroadcastState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fcommon_2eproto);
  return file_level_enum_descriptors_proto_2fcommon_2eproto[1];
}
bool BroadcastInfo_BroadcastState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr BroadcastInfo_BroadcastState BroadcastInfo::RS_UNKNOWN;
constexpr BroadcastInfo_BroadcastState BroadcastInfo::RS_OPENING;
constexpr BroadcastInfo_BroadcastState BroadcastInfo::RS_1PERIOD;
constexpr BroadcastInfo_BroadcastState BroadcastInfo::RS_MIDDLEGAME;
constexpr BroadcastInfo_BroadcastState BroadcastInfo::RS_ENDGAME;
constexpr BroadcastInfo_BroadcastState BroadcastInfo::RS_END;
constexpr BroadcastInfo_BroadcastState BroadcastInfo::RS_REVIEW;
constexpr BroadcastInfo_BroadcastState BroadcastInfo::BroadcastState_MIN;
constexpr BroadcastInfo_BroadcastState BroadcastInfo::BroadcastState_MAX;
constexpr int BroadcastInfo::BroadcastState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Color_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fcommon_2eproto);
  return file_level_enum_descriptors_proto_2fcommon_2eproto[2];
}
bool Color_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Rank_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fcommon_2eproto);
  return file_level_enum_descriptors_proto_2fcommon_2eproto[3];
}
bool Rank_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Country_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fcommon_2eproto);
  return file_level_enum_descriptors_proto_2fcommon_2eproto[4];
}
bool Country_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 7:
    case 20:
    case 27:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 36:
    case 39:
    case 43:
    case 44:
    case 46:
    case 47:
    case 48:
    case 52:
    case 56:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 81:
    case 82:
    case 83:
    case 84:
    case 86:
    case 90:
    case 234:
    case 349:
    case 351:
    case 355:
    case 359:
    case 371:
    case 375:
    case 380:
    case 852:
    case 853:
    case 967:
    case 973:
    case 11111:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlayerStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fcommon_2eproto);
  return file_level_enum_descriptors_proto_2fcommon_2eproto[5];
}
bool PlayerStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Sex_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fcommon_2eproto);
  return file_level_enum_descriptors_proto_2fcommon_2eproto[6];
}
bool Sex_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Flair_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fcommon_2eproto);
  return file_level_enum_descriptors_proto_2fcommon_2eproto[7];
}
bool Flair_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MembershipType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fcommon_2eproto);
  return file_level_enum_descriptors_proto_2fcommon_2eproto[8];
}
bool MembershipType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class VersionInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<VersionInfo>()._impl_._has_bits_);
  static void set_has_version1(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_version2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_update_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_install_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000c) ^ 0x0000000c) != 0;
  }
};

VersionInfo::VersionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openfoxwq.VersionInfo)
}
VersionInfo::VersionInfo(const VersionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VersionInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.qgi_){from._impl_.qgi_}
    , decltype(_impl_.qgi_hash_){from._impl_.qgi_hash_}
    , decltype(_impl_.update_info_){}
    , decltype(_impl_.install_url_){}
    , decltype(_impl_.version1_){}
    , decltype(_impl_.version2_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.update_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.update_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_update_info()) {
    _this->_impl_.update_info_.Set(from._internal_update_info(), 
      _this->GetArenaForAllocation());
  }
  _impl_.install_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.install_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_install_url()) {
    _this->_impl_.install_url_.Set(from._internal_install_url(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.version1_, &from._impl_.version1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.version2_) -
    reinterpret_cast<char*>(&_impl_.version1_)) + sizeof(_impl_.version2_));
  // @@protoc_insertion_point(copy_constructor:openfoxwq.VersionInfo)
}

inline void VersionInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.qgi_){arena}
    , decltype(_impl_.qgi_hash_){arena}
    , decltype(_impl_.update_info_){}
    , decltype(_impl_.install_url_){}
    , decltype(_impl_.version1_){int64_t{0}}
    , decltype(_impl_.version2_){int64_t{0}}
  };
  _impl_.update_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.update_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.install_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.install_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VersionInfo::~VersionInfo() {
  // @@protoc_insertion_point(destructor:openfoxwq.VersionInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VersionInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.qgi_.~RepeatedPtrField();
  _impl_.qgi_hash_.~RepeatedPtrField();
  _impl_.update_info_.Destroy();
  _impl_.install_url_.Destroy();
}

void VersionInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VersionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:openfoxwq.VersionInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.qgi_.Clear();
  _impl_.qgi_hash_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.update_info_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.install_url_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.version1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.version2_) -
        reinterpret_cast<char*>(&_impl_.version1_)) + sizeof(_impl_.version2_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VersionInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 version1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_version1(&has_bits);
          _impl_.version1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 version2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_version2(&has_bits);
          _impl_.version2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string update_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_update_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "openfoxwq.VersionInfo.update_info");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string install_url = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_install_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "openfoxwq.VersionInfo.install_url");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated string qgi = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_qgi();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "openfoxwq.VersionInfo.qgi");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string qgi_hash = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_qgi_hash();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "openfoxwq.VersionInfo.qgi_hash");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VersionInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openfoxwq.VersionInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int64 version1 = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_version1(), target);
  }

  // required int64 version2 = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_version2(), target);
  }

  // optional string update_info = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_update_info().data(), static_cast<int>(this->_internal_update_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "openfoxwq.VersionInfo.update_info");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_update_info(), target);
  }

  // optional string install_url = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_install_url().data(), static_cast<int>(this->_internal_install_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "openfoxwq.VersionInfo.install_url");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_install_url(), target);
  }

  // repeated string qgi = 6;
  for (int i = 0, n = this->_internal_qgi_size(); i < n; i++) {
    const auto& s = this->_internal_qgi(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "openfoxwq.VersionInfo.qgi");
    target = stream->WriteString(6, s, target);
  }

  // repeated string qgi_hash = 7;
  for (int i = 0, n = this->_internal_qgi_hash_size(); i < n; i++) {
    const auto& s = this->_internal_qgi_hash(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "openfoxwq.VersionInfo.qgi_hash");
    target = stream->WriteString(7, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openfoxwq.VersionInfo)
  return target;
}

size_t VersionInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:openfoxwq.VersionInfo)
  size_t total_size = 0;

  if (_internal_has_version1()) {
    // required int64 version1 = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_version1());
  }

  if (_internal_has_version2()) {
    // required int64 version2 = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_version2());
  }

  return total_size;
}
size_t VersionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openfoxwq.VersionInfo)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000c) ^ 0x0000000c) == 0) {  // All required fields are present.
    // required int64 version1 = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_version1());

    // required int64 version2 = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_version2());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string qgi = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.qgi_.size());
  for (int i = 0, n = _impl_.qgi_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.qgi_.Get(i));
  }

  // repeated string qgi_hash = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.qgi_hash_.size());
  for (int i = 0, n = _impl_.qgi_hash_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.qgi_hash_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string update_info = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_update_info());
    }

    // optional string install_url = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_install_url());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VersionInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VersionInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VersionInfo::GetClassData() const { return &_class_data_; }


void VersionInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VersionInfo*>(&to_msg);
  auto& from = static_cast<const VersionInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openfoxwq.VersionInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.qgi_.MergeFrom(from._impl_.qgi_);
  _this->_impl_.qgi_hash_.MergeFrom(from._impl_.qgi_hash_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_update_info(from._internal_update_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_install_url(from._internal_install_url());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.version1_ = from._impl_.version1_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.version2_ = from._impl_.version2_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VersionInfo::CopyFrom(const VersionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openfoxwq.VersionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersionInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void VersionInfo::InternalSwap(VersionInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.qgi_.InternalSwap(&other->_impl_.qgi_);
  _impl_.qgi_hash_.InternalSwap(&other->_impl_.qgi_hash_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.update_info_, lhs_arena,
      &other->_impl_.update_info_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.install_url_, lhs_arena,
      &other->_impl_.install_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VersionInfo, _impl_.version2_)
      + sizeof(VersionInfo::_impl_.version2_)
      - PROTOBUF_FIELD_OFFSET(VersionInfo, _impl_.version1_)>(
          reinterpret_cast<char*>(&_impl_.version1_),
          reinterpret_cast<char*>(&other->_impl_.version1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VersionInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fcommon_2eproto_getter, &descriptor_table_proto_2fcommon_2eproto_once,
      file_level_metadata_proto_2fcommon_2eproto[0]);
}

// ===================================================================

class ProxyLineInfo_ProxyAddressInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ProxyLineInfo_ProxyAddressInfo>()._impl_._has_bits_);
  static void set_has_host1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_port1(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_host2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_port2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

ProxyLineInfo_ProxyAddressInfo::ProxyLineInfo_ProxyAddressInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openfoxwq.ProxyLineInfo.ProxyAddressInfo)
}
ProxyLineInfo_ProxyAddressInfo::ProxyLineInfo_ProxyAddressInfo(const ProxyLineInfo_ProxyAddressInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProxyLineInfo_ProxyAddressInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.host1_){}
    , decltype(_impl_.host2_){}
    , decltype(_impl_.port1_){}
    , decltype(_impl_.port2_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.host1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_host1()) {
    _this->_impl_.host1_.Set(from._internal_host1(), 
      _this->GetArenaForAllocation());
  }
  _impl_.host2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_host2()) {
    _this->_impl_.host2_.Set(from._internal_host2(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.port1_, &from._impl_.port1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.port2_) -
    reinterpret_cast<char*>(&_impl_.port1_)) + sizeof(_impl_.port2_));
  // @@protoc_insertion_point(copy_constructor:openfoxwq.ProxyLineInfo.ProxyAddressInfo)
}

inline void ProxyLineInfo_ProxyAddressInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.host1_){}
    , decltype(_impl_.host2_){}
    , decltype(_impl_.port1_){int64_t{0}}
    , decltype(_impl_.port2_){int64_t{0}}
  };
  _impl_.host1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.host2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProxyLineInfo_ProxyAddressInfo::~ProxyLineInfo_ProxyAddressInfo() {
  // @@protoc_insertion_point(destructor:openfoxwq.ProxyLineInfo.ProxyAddressInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProxyLineInfo_ProxyAddressInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.host1_.Destroy();
  _impl_.host2_.Destroy();
}

void ProxyLineInfo_ProxyAddressInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProxyLineInfo_ProxyAddressInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:openfoxwq.ProxyLineInfo.ProxyAddressInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.host1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.host2_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.port1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.port2_) -
        reinterpret_cast<char*>(&_impl_.port1_)) + sizeof(_impl_.port2_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProxyLineInfo_ProxyAddressInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string host1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_host1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "openfoxwq.ProxyLineInfo.ProxyAddressInfo.host1");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required int64 port1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_port1(&has_bits);
          _impl_.port1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string host2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_host2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "openfoxwq.ProxyLineInfo.ProxyAddressInfo.host2");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required int64 port2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_port2(&has_bits);
          _impl_.port2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProxyLineInfo_ProxyAddressInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openfoxwq.ProxyLineInfo.ProxyAddressInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string host1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_host1().data(), static_cast<int>(this->_internal_host1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "openfoxwq.ProxyLineInfo.ProxyAddressInfo.host1");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_host1(), target);
  }

  // required int64 port1 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_port1(), target);
  }

  // required string host2 = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_host2().data(), static_cast<int>(this->_internal_host2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "openfoxwq.ProxyLineInfo.ProxyAddressInfo.host2");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_host2(), target);
  }

  // required int64 port2 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_port2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openfoxwq.ProxyLineInfo.ProxyAddressInfo)
  return target;
}

size_t ProxyLineInfo_ProxyAddressInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:openfoxwq.ProxyLineInfo.ProxyAddressInfo)
  size_t total_size = 0;

  if (_internal_has_host1()) {
    // required string host1 = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host1());
  }

  if (_internal_has_host2()) {
    // required string host2 = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host2());
  }

  if (_internal_has_port1()) {
    // required int64 port1 = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_port1());
  }

  if (_internal_has_port2()) {
    // required int64 port2 = 4;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_port2());
  }

  return total_size;
}
size_t ProxyLineInfo_ProxyAddressInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openfoxwq.ProxyLineInfo.ProxyAddressInfo)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string host1 = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host1());

    // required string host2 = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host2());

    // required int64 port1 = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_port1());

    // required int64 port2 = 4;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_port2());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProxyLineInfo_ProxyAddressInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProxyLineInfo_ProxyAddressInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProxyLineInfo_ProxyAddressInfo::GetClassData() const { return &_class_data_; }


void ProxyLineInfo_ProxyAddressInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProxyLineInfo_ProxyAddressInfo*>(&to_msg);
  auto& from = static_cast<const ProxyLineInfo_ProxyAddressInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openfoxwq.ProxyLineInfo.ProxyAddressInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_host1(from._internal_host1());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_host2(from._internal_host2());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.port1_ = from._impl_.port1_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.port2_ = from._impl_.port2_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProxyLineInfo_ProxyAddressInfo::CopyFrom(const ProxyLineInfo_ProxyAddressInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openfoxwq.ProxyLineInfo.ProxyAddressInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProxyLineInfo_ProxyAddressInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ProxyLineInfo_ProxyAddressInfo::InternalSwap(ProxyLineInfo_ProxyAddressInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.host1_, lhs_arena,
      &other->_impl_.host1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.host2_, lhs_arena,
      &other->_impl_.host2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProxyLineInfo_ProxyAddressInfo, _impl_.port2_)
      + sizeof(ProxyLineInfo_ProxyAddressInfo::_impl_.port2_)
      - PROTOBUF_FIELD_OFFSET(ProxyLineInfo_ProxyAddressInfo, _impl_.port1_)>(
          reinterpret_cast<char*>(&_impl_.port1_),
          reinterpret_cast<char*>(&other->_impl_.port1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProxyLineInfo_ProxyAddressInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fcommon_2eproto_getter, &descriptor_table_proto_2fcommon_2eproto_once,
      file_level_metadata_proto_2fcommon_2eproto[1]);
}

// ===================================================================

class ProxyLineInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ProxyLineInfo>()._impl_._has_bits_);
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::openfoxwq::ProxyLineInfo_ProxyAddressInfo& address_info(const ProxyLineInfo* msg);
  static void set_has_address_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::openfoxwq::ProxyLineInfo_ProxyAddressInfo&
ProxyLineInfo::_Internal::address_info(const ProxyLineInfo* msg) {
  return *msg->_impl_.address_info_;
}
ProxyLineInfo::ProxyLineInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openfoxwq.ProxyLineInfo)
}
ProxyLineInfo::ProxyLineInfo(const ProxyLineInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProxyLineInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.address_info_){nullptr}
    , decltype(_impl_.index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_address_info()) {
    _this->_impl_.address_info_ = new ::openfoxwq::ProxyLineInfo_ProxyAddressInfo(*from._impl_.address_info_);
  }
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:openfoxwq.ProxyLineInfo)
}

inline void ProxyLineInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.address_info_){nullptr}
    , decltype(_impl_.index_){int64_t{0}}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProxyLineInfo::~ProxyLineInfo() {
  // @@protoc_insertion_point(destructor:openfoxwq.ProxyLineInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProxyLineInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.address_info_;
}

void ProxyLineInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProxyLineInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:openfoxwq.ProxyLineInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.address_info_ != nullptr);
      _impl_.address_info_->Clear();
    }
  }
  _impl_.index_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProxyLineInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_index(&has_bits);
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "openfoxwq.ProxyLineInfo.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required .openfoxwq.ProxyLineInfo.ProxyAddressInfo address_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_address_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProxyLineInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openfoxwq.ProxyLineInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int64 index = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_index(), target);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "openfoxwq.ProxyLineInfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // required .openfoxwq.ProxyLineInfo.ProxyAddressInfo address_info = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::address_info(this),
        _Internal::address_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openfoxwq.ProxyLineInfo)
  return target;
}

size_t ProxyLineInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:openfoxwq.ProxyLineInfo)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_address_info()) {
    // required .openfoxwq.ProxyLineInfo.ProxyAddressInfo address_info = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.address_info_);
  }

  if (_internal_has_index()) {
    // required int64 index = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_index());
  }

  return total_size;
}
size_t ProxyLineInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openfoxwq.ProxyLineInfo)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required .openfoxwq.ProxyLineInfo.ProxyAddressInfo address_info = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.address_info_);

    // required int64 index = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProxyLineInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProxyLineInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProxyLineInfo::GetClassData() const { return &_class_data_; }


void ProxyLineInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProxyLineInfo*>(&to_msg);
  auto& from = static_cast<const ProxyLineInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openfoxwq.ProxyLineInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_address_info()->::openfoxwq::ProxyLineInfo_ProxyAddressInfo::MergeFrom(
          from._internal_address_info());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.index_ = from._impl_.index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProxyLineInfo::CopyFrom(const ProxyLineInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openfoxwq.ProxyLineInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProxyLineInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_address_info()) {
    if (!_impl_.address_info_->IsInitialized()) return false;
  }
  return true;
}

void ProxyLineInfo::InternalSwap(ProxyLineInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProxyLineInfo, _impl_.index_)
      + sizeof(ProxyLineInfo::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(ProxyLineInfo, _impl_.address_info_)>(
          reinterpret_cast<char*>(&_impl_.address_info_),
          reinterpret_cast<char*>(&other->_impl_.address_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProxyLineInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fcommon_2eproto_getter, &descriptor_table_proto_2fcommon_2eproto_once,
      file_level_metadata_proto_2fcommon_2eproto[2]);
}

// ===================================================================

LobbySvrInfo_NameLocEntry_DoNotUse::LobbySvrInfo_NameLocEntry_DoNotUse() {}
LobbySvrInfo_NameLocEntry_DoNotUse::LobbySvrInfo_NameLocEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void LobbySvrInfo_NameLocEntry_DoNotUse::MergeFrom(const LobbySvrInfo_NameLocEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata LobbySvrInfo_NameLocEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fcommon_2eproto_getter, &descriptor_table_proto_2fcommon_2eproto_once,
      file_level_metadata_proto_2fcommon_2eproto[3]);
}

// ===================================================================

class LobbySvrInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<LobbySvrInfo>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_broadcast_host(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_broadcast_port(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_num_players(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_num_matches(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_unknown_host_1(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_unknown_port_1(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_unknown_host_2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_unknown_port_2(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_unknown_host_3(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_unknown_port_3(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_unknown_host_4(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_unknown_port_4(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_play_host(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_play_port(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_unknown_field_7(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_unknown_field_8(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

LobbySvrInfo::LobbySvrInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &LobbySvrInfo::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:openfoxwq.LobbySvrInfo)
}
LobbySvrInfo::LobbySvrInfo(const LobbySvrInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LobbySvrInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.name_loc_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.broadcast_host_){}
    , decltype(_impl_.unknown_host_1_){}
    , decltype(_impl_.unknown_host_2_){}
    , decltype(_impl_.unknown_host_3_){}
    , decltype(_impl_.unknown_host_4_){}
    , decltype(_impl_.play_host_){}
    , decltype(_impl_.num_players_){}
    , decltype(_impl_.num_matches_){}
    , decltype(_impl_.unknown_field_7_){}
    , decltype(_impl_.unknown_field_8_){}
    , decltype(_impl_.broadcast_port_){}
    , decltype(_impl_.unknown_port_1_){}
    , decltype(_impl_.unknown_port_2_){}
    , decltype(_impl_.unknown_port_3_){}
    , decltype(_impl_.unknown_port_4_){}
    , decltype(_impl_.play_port_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.name_loc_.MergeFrom(from._impl_.name_loc_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.broadcast_host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.broadcast_host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_broadcast_host()) {
    _this->_impl_.broadcast_host_.Set(from._internal_broadcast_host(), 
      _this->GetArenaForAllocation());
  }
  _impl_.unknown_host_1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unknown_host_1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_unknown_host_1()) {
    _this->_impl_.unknown_host_1_.Set(from._internal_unknown_host_1(), 
      _this->GetArenaForAllocation());
  }
  _impl_.unknown_host_2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unknown_host_2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_unknown_host_2()) {
    _this->_impl_.unknown_host_2_.Set(from._internal_unknown_host_2(), 
      _this->GetArenaForAllocation());
  }
  _impl_.unknown_host_3_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unknown_host_3_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_unknown_host_3()) {
    _this->_impl_.unknown_host_3_.Set(from._internal_unknown_host_3(), 
      _this->GetArenaForAllocation());
  }
  _impl_.unknown_host_4_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unknown_host_4_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_unknown_host_4()) {
    _this->_impl_.unknown_host_4_.Set(from._internal_unknown_host_4(), 
      _this->GetArenaForAllocation());
  }
  _impl_.play_host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.play_host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_play_host()) {
    _this->_impl_.play_host_.Set(from._internal_play_host(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.num_players_, &from._impl_.num_players_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.play_port_) -
    reinterpret_cast<char*>(&_impl_.num_players_)) + sizeof(_impl_.play_port_));
  // @@protoc_insertion_point(copy_constructor:openfoxwq.LobbySvrInfo)
}

inline void LobbySvrInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.name_loc_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.broadcast_host_){}
    , decltype(_impl_.unknown_host_1_){}
    , decltype(_impl_.unknown_host_2_){}
    , decltype(_impl_.unknown_host_3_){}
    , decltype(_impl_.unknown_host_4_){}
    , decltype(_impl_.play_host_){}
    , decltype(_impl_.num_players_){int64_t{0}}
    , decltype(_impl_.num_matches_){int64_t{0}}
    , decltype(_impl_.unknown_field_7_){int64_t{0}}
    , decltype(_impl_.unknown_field_8_){int64_t{0}}
    , decltype(_impl_.broadcast_port_){0}
    , decltype(_impl_.unknown_port_1_){0}
    , decltype(_impl_.unknown_port_2_){0}
    , decltype(_impl_.unknown_port_3_){0}
    , decltype(_impl_.unknown_port_4_){0}
    , decltype(_impl_.play_port_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.broadcast_host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.broadcast_host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.unknown_host_1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unknown_host_1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.unknown_host_2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unknown_host_2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.unknown_host_3_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unknown_host_3_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.unknown_host_4_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unknown_host_4_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.play_host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.play_host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LobbySvrInfo::~LobbySvrInfo() {
  // @@protoc_insertion_point(destructor:openfoxwq.LobbySvrInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void LobbySvrInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_loc_.Destruct();
  _impl_.name_loc_.~MapField();
  _impl_.name_.Destroy();
  _impl_.broadcast_host_.Destroy();
  _impl_.unknown_host_1_.Destroy();
  _impl_.unknown_host_2_.Destroy();
  _impl_.unknown_host_3_.Destroy();
  _impl_.unknown_host_4_.Destroy();
  _impl_.play_host_.Destroy();
}

void LobbySvrInfo::ArenaDtor(void* object) {
  LobbySvrInfo* _this = reinterpret_cast< LobbySvrInfo* >(object);
  _this->_impl_.name_loc_.Destruct();
}
void LobbySvrInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LobbySvrInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:openfoxwq.LobbySvrInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_loc_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.broadcast_host_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.unknown_host_1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.unknown_host_2_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.unknown_host_3_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.unknown_host_4_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.play_host_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.num_players_ = int64_t{0};
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.num_matches_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.unknown_port_4_) -
        reinterpret_cast<char*>(&_impl_.num_matches_)) + sizeof(_impl_.unknown_port_4_));
  }
  _impl_.play_port_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LobbySvrInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "openfoxwq.LobbySvrInfo.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int64 num_players = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_num_players(&has_bits);
          _impl_.num_players_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 num_matches = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_num_matches(&has_bits);
          _impl_.num_matches_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string broadcast_host = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_broadcast_host();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "openfoxwq.LobbySvrInfo.broadcast_host");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 broadcast_port = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_broadcast_port(&has_bits);
          _impl_.broadcast_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 unknown_field_7 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_unknown_field_7(&has_bits);
          _impl_.unknown_field_7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 unknown_field_8 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_unknown_field_8(&has_bits);
          _impl_.unknown_field_8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string unknown_host_1 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_unknown_host_1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "openfoxwq.LobbySvrInfo.unknown_host_1");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 unknown_port_1 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_unknown_port_1(&has_bits);
          _impl_.unknown_port_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string unknown_host_2 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_unknown_host_2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "openfoxwq.LobbySvrInfo.unknown_host_2");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 unknown_port_2 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_unknown_port_2(&has_bits);
          _impl_.unknown_port_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string unknown_host_3 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_unknown_host_3();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "openfoxwq.LobbySvrInfo.unknown_host_3");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 unknown_port_3 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_unknown_port_3(&has_bits);
          _impl_.unknown_port_3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string unknown_host_4 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_unknown_host_4();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "openfoxwq.LobbySvrInfo.unknown_host_4");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 unknown_port_4 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_unknown_port_4(&has_bits);
          _impl_.unknown_port_4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string play_host = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_play_host();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "openfoxwq.LobbySvrInfo.play_host");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 play_port = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_play_port(&has_bits);
          _impl_.play_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<int32, string> name_loc = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.name_loc_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LobbySvrInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openfoxwq.LobbySvrInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "openfoxwq.LobbySvrInfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional int64 num_players = 3;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_num_players(), target);
  }

  // optional int64 num_matches = 4;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_num_matches(), target);
  }

  // optional string broadcast_host = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_broadcast_host().data(), static_cast<int>(this->_internal_broadcast_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "openfoxwq.LobbySvrInfo.broadcast_host");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_broadcast_host(), target);
  }

  // optional int32 broadcast_port = 6;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_broadcast_port(), target);
  }

  // optional int64 unknown_field_7 = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_unknown_field_7(), target);
  }

  // optional int64 unknown_field_8 = 8;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_unknown_field_8(), target);
  }

  // optional string unknown_host_1 = 13;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_unknown_host_1().data(), static_cast<int>(this->_internal_unknown_host_1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "openfoxwq.LobbySvrInfo.unknown_host_1");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_unknown_host_1(), target);
  }

  // optional int32 unknown_port_1 = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_unknown_port_1(), target);
  }

  // optional string unknown_host_2 = 15;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_unknown_host_2().data(), static_cast<int>(this->_internal_unknown_host_2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "openfoxwq.LobbySvrInfo.unknown_host_2");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_unknown_host_2(), target);
  }

  // optional int32 unknown_port_2 = 16;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_unknown_port_2(), target);
  }

  // optional string unknown_host_3 = 17;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_unknown_host_3().data(), static_cast<int>(this->_internal_unknown_host_3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "openfoxwq.LobbySvrInfo.unknown_host_3");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_unknown_host_3(), target);
  }

  // optional int32 unknown_port_3 = 18;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_unknown_port_3(), target);
  }

  // optional string unknown_host_4 = 19;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_unknown_host_4().data(), static_cast<int>(this->_internal_unknown_host_4().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "openfoxwq.LobbySvrInfo.unknown_host_4");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_unknown_host_4(), target);
  }

  // optional int32 unknown_port_4 = 20;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(20, this->_internal_unknown_port_4(), target);
  }

  // optional string play_host = 21;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_play_host().data(), static_cast<int>(this->_internal_play_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "openfoxwq.LobbySvrInfo.play_host");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_play_host(), target);
  }

  // optional int32 play_port = 22;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(22, this->_internal_play_port(), target);
  }

  // map<int32, string> name_loc = 23;
  if (!this->_internal_name_loc().empty()) {
    using MapType = ::_pb::Map<int32_t, std::string>;
    using WireHelper = LobbySvrInfo_NameLocEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_name_loc();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "openfoxwq.LobbySvrInfo.NameLocEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(23, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(23, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openfoxwq.LobbySvrInfo)
  return target;
}

size_t LobbySvrInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openfoxwq.LobbySvrInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, string> name_loc = 23;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_name_loc_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >::const_iterator
      it = this->_internal_name_loc().begin();
      it != this->_internal_name_loc().end(); ++it) {
    total_size += LobbySvrInfo_NameLocEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string broadcast_host = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_broadcast_host());
    }

    // optional string unknown_host_1 = 13;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_unknown_host_1());
    }

    // optional string unknown_host_2 = 15;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_unknown_host_2());
    }

    // optional string unknown_host_3 = 17;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_unknown_host_3());
    }

    // optional string unknown_host_4 = 19;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_unknown_host_4());
    }

    // optional string play_host = 21;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_play_host());
    }

    // optional int64 num_players = 3;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_num_players());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int64 num_matches = 4;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_num_matches());
    }

    // optional int64 unknown_field_7 = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_unknown_field_7());
    }

    // optional int64 unknown_field_8 = 8;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_unknown_field_8());
    }

    // optional int32 broadcast_port = 6;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_broadcast_port());
    }

    // optional int32 unknown_port_1 = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_unknown_port_1());
    }

    // optional int32 unknown_port_2 = 16;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_unknown_port_2());
    }

    // optional int32 unknown_port_3 = 18;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_unknown_port_3());
    }

    // optional int32 unknown_port_4 = 20;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_unknown_port_4());
    }

  }
  // optional int32 play_port = 22;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_play_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LobbySvrInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LobbySvrInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LobbySvrInfo::GetClassData() const { return &_class_data_; }


void LobbySvrInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LobbySvrInfo*>(&to_msg);
  auto& from = static_cast<const LobbySvrInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openfoxwq.LobbySvrInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.name_loc_.MergeFrom(from._impl_.name_loc_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_broadcast_host(from._internal_broadcast_host());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_unknown_host_1(from._internal_unknown_host_1());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_unknown_host_2(from._internal_unknown_host_2());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_unknown_host_3(from._internal_unknown_host_3());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_unknown_host_4(from._internal_unknown_host_4());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_play_host(from._internal_play_host());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.num_players_ = from._impl_.num_players_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.num_matches_ = from._impl_.num_matches_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.unknown_field_7_ = from._impl_.unknown_field_7_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.unknown_field_8_ = from._impl_.unknown_field_8_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.broadcast_port_ = from._impl_.broadcast_port_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.unknown_port_1_ = from._impl_.unknown_port_1_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.unknown_port_2_ = from._impl_.unknown_port_2_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.unknown_port_3_ = from._impl_.unknown_port_3_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.unknown_port_4_ = from._impl_.unknown_port_4_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _this->_internal_set_play_port(from._internal_play_port());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LobbySvrInfo::CopyFrom(const LobbySvrInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openfoxwq.LobbySvrInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LobbySvrInfo::IsInitialized() const {
  return true;
}

void LobbySvrInfo::InternalSwap(LobbySvrInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.name_loc_.InternalSwap(&other->_impl_.name_loc_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.broadcast_host_, lhs_arena,
      &other->_impl_.broadcast_host_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.unknown_host_1_, lhs_arena,
      &other->_impl_.unknown_host_1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.unknown_host_2_, lhs_arena,
      &other->_impl_.unknown_host_2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.unknown_host_3_, lhs_arena,
      &other->_impl_.unknown_host_3_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.unknown_host_4_, lhs_arena,
      &other->_impl_.unknown_host_4_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.play_host_, lhs_arena,
      &other->_impl_.play_host_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LobbySvrInfo, _impl_.play_port_)
      + sizeof(LobbySvrInfo::_impl_.play_port_)
      - PROTOBUF_FIELD_OFFSET(LobbySvrInfo, _impl_.num_players_)>(
          reinterpret_cast<char*>(&_impl_.num_players_),
          reinterpret_cast<char*>(&other->_impl_.num_players_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LobbySvrInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fcommon_2eproto_getter, &descriptor_table_proto_2fcommon_2eproto_once,
      file_level_metadata_proto_2fcommon_2eproto[4]);
}

// ===================================================================

class PlayerInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerInfo>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name_native(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_country(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_accepting_matches(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_ranked_wins(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ranked_losses(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_sex(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_foxcoin(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_flair(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_membership_type(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_membership_valid_until(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_ai(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_amateur_6d(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_unknown_field_8(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_unknown_field_13(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

PlayerInfo::PlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openfoxwq.PlayerInfo)
}
PlayerInfo::PlayerInfo(const PlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.name_native_){}
    , decltype(_impl_.player_id_){}
    , decltype(_impl_.rank_){}
    , decltype(_impl_.country_){}
    , decltype(_impl_.club_id_){}
    , decltype(_impl_.unknown_field_8_){}
    , decltype(_impl_.ranked_wins_){}
    , decltype(_impl_.ranked_losses_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.sex_){}
    , decltype(_impl_.unknown_field_13_){}
    , decltype(_impl_.foxcoin_){}
    , decltype(_impl_.flair_){}
    , decltype(_impl_.accepting_matches_){}
    , decltype(_impl_.ai_){}
    , decltype(_impl_.amateur_6d_){}
    , decltype(_impl_.membership_valid_until_){}
    , decltype(_impl_.membership_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_native_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_native_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name_native()) {
    _this->_impl_.name_native_.Set(from._internal_name_native(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.player_id_, &from._impl_.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.membership_type_) -
    reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.membership_type_));
  // @@protoc_insertion_point(copy_constructor:openfoxwq.PlayerInfo)
}

inline void PlayerInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.name_native_){}
    , decltype(_impl_.player_id_){int64_t{0}}
    , decltype(_impl_.rank_){0}
    , decltype(_impl_.country_){0}
    , decltype(_impl_.club_id_){int64_t{0}}
    , decltype(_impl_.unknown_field_8_){int64_t{0}}
    , decltype(_impl_.ranked_wins_){int64_t{0}}
    , decltype(_impl_.ranked_losses_){int64_t{0}}
    , decltype(_impl_.status_){0}
    , decltype(_impl_.sex_){0}
    , decltype(_impl_.unknown_field_13_){int64_t{0}}
    , decltype(_impl_.foxcoin_){int64_t{0}}
    , decltype(_impl_.flair_){0}
    , decltype(_impl_.accepting_matches_){false}
    , decltype(_impl_.ai_){false}
    , decltype(_impl_.amateur_6d_){false}
    , decltype(_impl_.membership_valid_until_){int64_t{0}}
    , decltype(_impl_.membership_type_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_native_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_native_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PlayerInfo::~PlayerInfo() {
  // @@protoc_insertion_point(destructor:openfoxwq.PlayerInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.name_native_.Destroy();
}

void PlayerInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:openfoxwq.PlayerInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.name_native_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ranked_wins_) -
        reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.ranked_wins_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.ranked_losses_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ai_) -
        reinterpret_cast<char*>(&_impl_.ranked_losses_)) + sizeof(_impl_.ai_));
  }
  if (cached_has_bits & 0x00070000u) {
    ::memset(&_impl_.amateur_6d_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.membership_type_) -
        reinterpret_cast<char*>(&_impl_.amateur_6d_)) + sizeof(_impl_.membership_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "openfoxwq.PlayerInfo.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string name_native = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name_native();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "openfoxwq.PlayerInfo.name_native");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .openfoxwq.Rank rank = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::openfoxwq::Rank_IsValid(val))) {
            _internal_set_rank(static_cast<::openfoxwq::Rank>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .openfoxwq.Country country = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::openfoxwq::Country_IsValid(val))) {
            _internal_set_country(static_cast<::openfoxwq::Country>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int64 club_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_club_id(&has_bits);
          _impl_.club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool accepting_matches = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_accepting_matches(&has_bits);
          _impl_.accepting_matches_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 unknown_field_8 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_unknown_field_8(&has_bits);
          _impl_.unknown_field_8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .openfoxwq.PlayerStatus status = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::openfoxwq::PlayerStatus_IsValid(val))) {
            _internal_set_status(static_cast<::openfoxwq::PlayerStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int64 ranked_wins = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_ranked_wins(&has_bits);
          _impl_.ranked_wins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 ranked_losses = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_ranked_losses(&has_bits);
          _impl_.ranked_losses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 unknown_field_13 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_unknown_field_13(&has_bits);
          _impl_.unknown_field_13_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .openfoxwq.Sex sex = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::openfoxwq::Sex_IsValid(val))) {
            _internal_set_sex(static_cast<::openfoxwq::Sex>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(14, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int64 foxcoin = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_foxcoin(&has_bits);
          _impl_.foxcoin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .openfoxwq.Flair flair = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::openfoxwq::Flair_IsValid(val))) {
            _internal_set_flair(static_cast<::openfoxwq::Flair>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(26, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .openfoxwq.MembershipType membership_type = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::openfoxwq::MembershipType_IsValid(val))) {
            _internal_set_membership_type(static_cast<::openfoxwq::MembershipType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(27, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int64 membership_valid_until = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_membership_valid_until(&has_bits);
          _impl_.membership_valid_until_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool ai = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_ai(&has_bits);
          _impl_.ai_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool amateur_6d = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_amateur_6d(&has_bits);
          _impl_.amateur_6d_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openfoxwq.PlayerInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int64 player_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_player_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "openfoxwq.PlayerInfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional string name_native = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name_native().data(), static_cast<int>(this->_internal_name_native().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "openfoxwq.PlayerInfo.name_native");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name_native(), target);
  }

  // optional .openfoxwq.Rank rank = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_rank(), target);
  }

  // optional .openfoxwq.Country country = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_country(), target);
  }

  // optional int64 club_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_club_id(), target);
  }

  // optional bool accepting_matches = 7;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_accepting_matches(), target);
  }

  // optional int64 unknown_field_8 = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_unknown_field_8(), target);
  }

  // optional .openfoxwq.PlayerStatus status = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_status(), target);
  }

  // optional int64 ranked_wins = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_ranked_wins(), target);
  }

  // optional int64 ranked_losses = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_ranked_losses(), target);
  }

  // optional int64 unknown_field_13 = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(13, this->_internal_unknown_field_13(), target);
  }

  // optional .openfoxwq.Sex sex = 14;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      14, this->_internal_sex(), target);
  }

  // optional int64 foxcoin = 21;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(21, this->_internal_foxcoin(), target);
  }

  // optional .openfoxwq.Flair flair = 26;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      26, this->_internal_flair(), target);
  }

  // optional .openfoxwq.MembershipType membership_type = 27;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      27, this->_internal_membership_type(), target);
  }

  // optional int64 membership_valid_until = 28;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(28, this->_internal_membership_valid_until(), target);
  }

  // optional bool ai = 36;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(36, this->_internal_ai(), target);
  }

  // optional bool amateur_6d = 37;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(37, this->_internal_amateur_6d(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openfoxwq.PlayerInfo)
  return target;
}

size_t PlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openfoxwq.PlayerInfo)
  size_t total_size = 0;

  // required int64 player_id = 1;
  if (_internal_has_player_id()) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_player_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string name_native = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name_native());
    }

  }
  if (cached_has_bits & 0x000000f8u) {
    // optional .openfoxwq.Rank rank = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_rank());
    }

    // optional .openfoxwq.Country country = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_country());
    }

    // optional int64 club_id = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_club_id());
    }

    // optional int64 unknown_field_8 = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_unknown_field_8());
    }

    // optional int64 ranked_wins = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ranked_wins());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int64 ranked_losses = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ranked_losses());
    }

    // optional .openfoxwq.PlayerStatus status = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
    }

    // optional .openfoxwq.Sex sex = 14;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_sex());
    }

    // optional int64 unknown_field_13 = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_unknown_field_13());
    }

    // optional int64 foxcoin = 21;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_foxcoin());
    }

    // optional .openfoxwq.Flair flair = 26;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_flair());
    }

    // optional bool accepting_matches = 7;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool ai = 36;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00070000u) {
    // optional bool amateur_6d = 37;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional int64 membership_valid_until = 28;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_membership_valid_until());
    }

    // optional .openfoxwq.MembershipType membership_type = 27;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_membership_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerInfo::GetClassData() const { return &_class_data_; }


void PlayerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerInfo*>(&to_msg);
  auto& from = static_cast<const PlayerInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openfoxwq.PlayerInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_name_native(from._internal_name_native());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.rank_ = from._impl_.rank_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.country_ = from._impl_.country_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.club_id_ = from._impl_.club_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.unknown_field_8_ = from._impl_.unknown_field_8_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.ranked_wins_ = from._impl_.ranked_wins_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.ranked_losses_ = from._impl_.ranked_losses_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.status_ = from._impl_.status_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.sex_ = from._impl_.sex_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.unknown_field_13_ = from._impl_.unknown_field_13_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.foxcoin_ = from._impl_.foxcoin_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.flair_ = from._impl_.flair_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.accepting_matches_ = from._impl_.accepting_matches_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.ai_ = from._impl_.ai_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.amateur_6d_ = from._impl_.amateur_6d_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.membership_valid_until_ = from._impl_.membership_valid_until_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.membership_type_ = from._impl_.membership_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerInfo::CopyFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openfoxwq.PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void PlayerInfo::InternalSwap(PlayerInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_native_, lhs_arena,
      &other->_impl_.name_native_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerInfo, _impl_.membership_type_)
      + sizeof(PlayerInfo::_impl_.membership_type_)
      - PROTOBUF_FIELD_OFFSET(PlayerInfo, _impl_.player_id_)>(
          reinterpret_cast<char*>(&_impl_.player_id_),
          reinterpret_cast<char*>(&other->_impl_.player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fcommon_2eproto_getter, &descriptor_table_proto_2fcommon_2eproto_once,
      file_level_metadata_proto_2fcommon_2eproto[5]);
}

// ===================================================================

class MatchSettings::_Internal {
 public:
  using HasBits = decltype(std::declval<MatchSettings>()._impl_._has_bits_);
  static void set_has_player_id_first(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_player_id_second(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_handicap(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_komi(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_main_time_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_byoyomi_time_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_byoyomi_periods(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_chinese_rules(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_board_size(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000000f3) ^ 0x000000f3) != 0;
  }
};

MatchSettings::MatchSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openfoxwq.MatchSettings)
}
MatchSettings::MatchSettings(const MatchSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MatchSettings* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_id_first_){}
    , decltype(_impl_.player_id_second_){}
    , decltype(_impl_.handicap_){}
    , decltype(_impl_.komi_){}
    , decltype(_impl_.main_time_sec_){}
    , decltype(_impl_.byoyomi_time_sec_){}
    , decltype(_impl_.byoyomi_periods_){}
    , decltype(_impl_.board_size_){}
    , decltype(_impl_.chinese_rules_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.player_id_first_, &from._impl_.player_id_first_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.chinese_rules_) -
    reinterpret_cast<char*>(&_impl_.player_id_first_)) + sizeof(_impl_.chinese_rules_));
  // @@protoc_insertion_point(copy_constructor:openfoxwq.MatchSettings)
}

inline void MatchSettings::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_id_first_){int64_t{0}}
    , decltype(_impl_.player_id_second_){int64_t{0}}
    , decltype(_impl_.handicap_){int64_t{0}}
    , decltype(_impl_.komi_){int64_t{0}}
    , decltype(_impl_.main_time_sec_){int64_t{0}}
    , decltype(_impl_.byoyomi_time_sec_){int64_t{0}}
    , decltype(_impl_.byoyomi_periods_){int64_t{0}}
    , decltype(_impl_.board_size_){int64_t{0}}
    , decltype(_impl_.chinese_rules_){false}
  };
}

MatchSettings::~MatchSettings() {
  // @@protoc_insertion_point(destructor:openfoxwq.MatchSettings)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MatchSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MatchSettings::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MatchSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:openfoxwq.MatchSettings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.player_id_first_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.board_size_) -
        reinterpret_cast<char*>(&_impl_.player_id_first_)) + sizeof(_impl_.board_size_));
  }
  _impl_.chinese_rules_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchSettings::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 player_id_first = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id_first(&has_bits);
          _impl_.player_id_first_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 player_id_second = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_player_id_second(&has_bits);
          _impl_.player_id_second_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 handicap = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_handicap(&has_bits);
          _impl_.handicap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 komi = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_komi(&has_bits);
          _impl_.komi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 main_time_sec = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_main_time_sec(&has_bits);
          _impl_.main_time_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 byoyomi_time_sec = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_byoyomi_time_sec(&has_bits);
          _impl_.byoyomi_time_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 byoyomi_periods = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_byoyomi_periods(&has_bits);
          _impl_.byoyomi_periods_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool chinese_rules = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_chinese_rules(&has_bits);
          _impl_.chinese_rules_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 board_size = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_board_size(&has_bits);
          _impl_.board_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MatchSettings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openfoxwq.MatchSettings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int64 player_id_first = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_player_id_first(), target);
  }

  // required int64 player_id_second = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_player_id_second(), target);
  }

  // optional int64 handicap = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_handicap(), target);
  }

  // optional int64 komi = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_komi(), target);
  }

  // required int64 main_time_sec = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_main_time_sec(), target);
  }

  // required int64 byoyomi_time_sec = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_byoyomi_time_sec(), target);
  }

  // required int64 byoyomi_periods = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_byoyomi_periods(), target);
  }

  // optional bool chinese_rules = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_chinese_rules(), target);
  }

  // required int64 board_size = 16;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(16, this->_internal_board_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openfoxwq.MatchSettings)
  return target;
}

size_t MatchSettings::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:openfoxwq.MatchSettings)
  size_t total_size = 0;

  if (_internal_has_player_id_first()) {
    // required int64 player_id_first = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_player_id_first());
  }

  if (_internal_has_player_id_second()) {
    // required int64 player_id_second = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_player_id_second());
  }

  if (_internal_has_main_time_sec()) {
    // required int64 main_time_sec = 7;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_main_time_sec());
  }

  if (_internal_has_byoyomi_time_sec()) {
    // required int64 byoyomi_time_sec = 8;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_byoyomi_time_sec());
  }

  if (_internal_has_byoyomi_periods()) {
    // required int64 byoyomi_periods = 9;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_byoyomi_periods());
  }

  if (_internal_has_board_size()) {
    // required int64 board_size = 16;
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_board_size());
  }

  return total_size;
}
size_t MatchSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openfoxwq.MatchSettings)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x000000f3) ^ 0x000000f3) == 0) {  // All required fields are present.
    // required int64 player_id_first = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_player_id_first());

    // required int64 player_id_second = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_player_id_second());

    // required int64 main_time_sec = 7;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_main_time_sec());

    // required int64 byoyomi_time_sec = 8;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_byoyomi_time_sec());

    // required int64 byoyomi_periods = 9;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_byoyomi_periods());

    // required int64 board_size = 16;
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_board_size());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional int64 handicap = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_handicap());
    }

    // optional int64 komi = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_komi());
    }

  }
  // optional bool chinese_rules = 10;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MatchSettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MatchSettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MatchSettings::GetClassData() const { return &_class_data_; }


void MatchSettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MatchSettings*>(&to_msg);
  auto& from = static_cast<const MatchSettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openfoxwq.MatchSettings)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.player_id_first_ = from._impl_.player_id_first_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.player_id_second_ = from._impl_.player_id_second_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.handicap_ = from._impl_.handicap_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.komi_ = from._impl_.komi_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.main_time_sec_ = from._impl_.main_time_sec_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.byoyomi_time_sec_ = from._impl_.byoyomi_time_sec_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.byoyomi_periods_ = from._impl_.byoyomi_periods_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.board_size_ = from._impl_.board_size_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_chinese_rules(from._internal_chinese_rules());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MatchSettings::CopyFrom(const MatchSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openfoxwq.MatchSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchSettings::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void MatchSettings::InternalSwap(MatchSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MatchSettings, _impl_.chinese_rules_)
      + sizeof(MatchSettings::_impl_.chinese_rules_)
      - PROTOBUF_FIELD_OFFSET(MatchSettings, _impl_.player_id_first_)>(
          reinterpret_cast<char*>(&_impl_.player_id_first_),
          reinterpret_cast<char*>(&other->_impl_.player_id_first_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchSettings::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fcommon_2eproto_getter, &descriptor_table_proto_2fcommon_2eproto_once,
      file_level_metadata_proto_2fcommon_2eproto[6]);
}

// ===================================================================

class RoomSettings::_Internal {
 public:
  using HasBits = decltype(std::declval<RoomSettings>()._impl_._has_bits_);
  static void set_has_board_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_handicap(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_komi(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_player_id_black(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_main_time_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_byoyomi_time_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_byoyomi_periods(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_player_id_white(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

RoomSettings::RoomSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openfoxwq.RoomSettings)
}
RoomSettings::RoomSettings(const RoomSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoomSettings* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.board_size_){}
    , decltype(_impl_.handicap_){}
    , decltype(_impl_.komi_){}
    , decltype(_impl_.player_id_black_){}
    , decltype(_impl_.main_time_sec_){}
    , decltype(_impl_.byoyomi_time_sec_){}
    , decltype(_impl_.byoyomi_periods_){}
    , decltype(_impl_.player_id_white_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.board_size_, &from._impl_.board_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_id_white_) -
    reinterpret_cast<char*>(&_impl_.board_size_)) + sizeof(_impl_.player_id_white_));
  // @@protoc_insertion_point(copy_constructor:openfoxwq.RoomSettings)
}

inline void RoomSettings::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.board_size_){int64_t{0}}
    , decltype(_impl_.handicap_){int64_t{0}}
    , decltype(_impl_.komi_){int64_t{0}}
    , decltype(_impl_.player_id_black_){int64_t{0}}
    , decltype(_impl_.main_time_sec_){int64_t{0}}
    , decltype(_impl_.byoyomi_time_sec_){int64_t{0}}
    , decltype(_impl_.byoyomi_periods_){int64_t{0}}
    , decltype(_impl_.player_id_white_){int64_t{0}}
  };
}

RoomSettings::~RoomSettings() {
  // @@protoc_insertion_point(destructor:openfoxwq.RoomSettings)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoomSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RoomSettings::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoomSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:openfoxwq.RoomSettings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.board_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.player_id_white_) -
        reinterpret_cast<char*>(&_impl_.board_size_)) + sizeof(_impl_.player_id_white_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomSettings::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 board_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_board_size(&has_bits);
          _impl_.board_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 handicap = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_handicap(&has_bits);
          _impl_.handicap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 komi = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_komi(&has_bits);
          _impl_.komi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 player_id_black = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_player_id_black(&has_bits);
          _impl_.player_id_black_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 main_time_sec = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_main_time_sec(&has_bits);
          _impl_.main_time_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 byoyomi_time_sec = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_byoyomi_time_sec(&has_bits);
          _impl_.byoyomi_time_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 byoyomi_periods = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_byoyomi_periods(&has_bits);
          _impl_.byoyomi_periods_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 player_id_white = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_player_id_white(&has_bits);
          _impl_.player_id_white_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoomSettings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openfoxwq.RoomSettings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 board_size = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_board_size(), target);
  }

  // optional int64 handicap = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_handicap(), target);
  }

  // optional int64 komi = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_komi(), target);
  }

  // optional int64 player_id_black = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_player_id_black(), target);
  }

  // optional int64 main_time_sec = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_main_time_sec(), target);
  }

  // optional int64 byoyomi_time_sec = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_byoyomi_time_sec(), target);
  }

  // optional int64 byoyomi_periods = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_byoyomi_periods(), target);
  }

  // optional int64 player_id_white = 26;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(26, this->_internal_player_id_white(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openfoxwq.RoomSettings)
  return target;
}

size_t RoomSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openfoxwq.RoomSettings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int64 board_size = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_board_size());
    }

    // optional int64 handicap = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_handicap());
    }

    // optional int64 komi = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_komi());
    }

    // optional int64 player_id_black = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_player_id_black());
    }

    // optional int64 main_time_sec = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_main_time_sec());
    }

    // optional int64 byoyomi_time_sec = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_byoyomi_time_sec());
    }

    // optional int64 byoyomi_periods = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_byoyomi_periods());
    }

    // optional int64 player_id_white = 26;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_player_id_white());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoomSettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoomSettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoomSettings::GetClassData() const { return &_class_data_; }


void RoomSettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoomSettings*>(&to_msg);
  auto& from = static_cast<const RoomSettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openfoxwq.RoomSettings)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.board_size_ = from._impl_.board_size_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.handicap_ = from._impl_.handicap_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.komi_ = from._impl_.komi_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.player_id_black_ = from._impl_.player_id_black_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.main_time_sec_ = from._impl_.main_time_sec_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.byoyomi_time_sec_ = from._impl_.byoyomi_time_sec_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.byoyomi_periods_ = from._impl_.byoyomi_periods_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.player_id_white_ = from._impl_.player_id_white_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoomSettings::CopyFrom(const RoomSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openfoxwq.RoomSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomSettings::IsInitialized() const {
  return true;
}

void RoomSettings::InternalSwap(RoomSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoomSettings, _impl_.player_id_white_)
      + sizeof(RoomSettings::_impl_.player_id_white_)
      - PROTOBUF_FIELD_OFFSET(RoomSettings, _impl_.board_size_)>(
          reinterpret_cast<char*>(&_impl_.board_size_),
          reinterpret_cast<char*>(&other->_impl_.board_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomSettings::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fcommon_2eproto_getter, &descriptor_table_proto_2fcommon_2eproto_once,
      file_level_metadata_proto_2fcommon_2eproto[7]);
}

// ===================================================================

class RoomId::_Internal {
 public:
  using HasBits = decltype(std::declval<RoomId>()._impl_._has_bits_);
  static void set_has_id_1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id_2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_id_3(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_id_4(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

RoomId::RoomId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openfoxwq.RoomId)
}
RoomId::RoomId(const RoomId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoomId* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_1_){}
    , decltype(_impl_.id_2_){}
    , decltype(_impl_.id_3_){}
    , decltype(_impl_.id_4_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_1_, &from._impl_.id_1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.id_4_) -
    reinterpret_cast<char*>(&_impl_.id_1_)) + sizeof(_impl_.id_4_));
  // @@protoc_insertion_point(copy_constructor:openfoxwq.RoomId)
}

inline void RoomId::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_1_){int64_t{0}}
    , decltype(_impl_.id_2_){int64_t{0}}
    , decltype(_impl_.id_3_){int64_t{0}}
    , decltype(_impl_.id_4_){int64_t{0}}
  };
}

RoomId::~RoomId() {
  // @@protoc_insertion_point(destructor:openfoxwq.RoomId)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoomId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RoomId::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoomId::Clear() {
// @@protoc_insertion_point(message_clear_start:openfoxwq.RoomId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.id_1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.id_4_) -
        reinterpret_cast<char*>(&_impl_.id_1_)) + sizeof(_impl_.id_4_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomId::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 id_1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id_1(&has_bits);
          _impl_.id_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 id_2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_id_2(&has_bits);
          _impl_.id_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 id_3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_id_3(&has_bits);
          _impl_.id_3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 id_4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_id_4(&has_bits);
          _impl_.id_4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoomId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openfoxwq.RoomId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 id_1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_id_1(), target);
  }

  // optional int64 id_2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_id_2(), target);
  }

  // optional int64 id_3 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_id_3(), target);
  }

  // optional int64 id_4 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_id_4(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openfoxwq.RoomId)
  return target;
}

size_t RoomId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openfoxwq.RoomId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int64 id_1 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id_1());
    }

    // optional int64 id_2 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id_2());
    }

    // optional int64 id_3 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id_3());
    }

    // optional int64 id_4 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id_4());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoomId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoomId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoomId::GetClassData() const { return &_class_data_; }


void RoomId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoomId*>(&to_msg);
  auto& from = static_cast<const RoomId&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openfoxwq.RoomId)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.id_1_ = from._impl_.id_1_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.id_2_ = from._impl_.id_2_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.id_3_ = from._impl_.id_3_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.id_4_ = from._impl_.id_4_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoomId::CopyFrom(const RoomId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openfoxwq.RoomId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomId::IsInitialized() const {
  return true;
}

void RoomId::InternalSwap(RoomId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoomId, _impl_.id_4_)
      + sizeof(RoomId::_impl_.id_4_)
      - PROTOBUF_FIELD_OFFSET(RoomId, _impl_.id_1_)>(
          reinterpret_cast<char*>(&_impl_.id_1_),
          reinterpret_cast<char*>(&other->_impl_.id_1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomId::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fcommon_2eproto_getter, &descriptor_table_proto_2fcommon_2eproto_once,
      file_level_metadata_proto_2fcommon_2eproto[8]);
}

// ===================================================================

class BroadcastInfo_BroadcastPlayerInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<BroadcastInfo_BroadcastPlayerInfo>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name_alt(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_country(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

BroadcastInfo_BroadcastPlayerInfo::BroadcastInfo_BroadcastPlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openfoxwq.BroadcastInfo.BroadcastPlayerInfo)
}
BroadcastInfo_BroadcastPlayerInfo::BroadcastInfo_BroadcastPlayerInfo(const BroadcastInfo_BroadcastPlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BroadcastInfo_BroadcastPlayerInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.name_alt_){}
    , decltype(_impl_.rank_){}
    , decltype(_impl_.country_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_alt_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_alt_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name_alt()) {
    _this->_impl_.name_alt_.Set(from._internal_name_alt(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.rank_, &from._impl_.rank_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.country_) -
    reinterpret_cast<char*>(&_impl_.rank_)) + sizeof(_impl_.country_));
  // @@protoc_insertion_point(copy_constructor:openfoxwq.BroadcastInfo.BroadcastPlayerInfo)
}

inline void BroadcastInfo_BroadcastPlayerInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.name_alt_){}
    , decltype(_impl_.rank_){0}
    , decltype(_impl_.country_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_alt_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_alt_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BroadcastInfo_BroadcastPlayerInfo::~BroadcastInfo_BroadcastPlayerInfo() {
  // @@protoc_insertion_point(destructor:openfoxwq.BroadcastInfo.BroadcastPlayerInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BroadcastInfo_BroadcastPlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.name_alt_.Destroy();
}

void BroadcastInfo_BroadcastPlayerInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BroadcastInfo_BroadcastPlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:openfoxwq.BroadcastInfo.BroadcastPlayerInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.name_alt_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.rank_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.country_) -
        reinterpret_cast<char*>(&_impl_.rank_)) + sizeof(_impl_.country_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BroadcastInfo_BroadcastPlayerInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "openfoxwq.BroadcastInfo.BroadcastPlayerInfo.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string name_alt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name_alt();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "openfoxwq.BroadcastInfo.BroadcastPlayerInfo.name_alt");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .openfoxwq.Rank rank = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::openfoxwq::Rank_IsValid(val))) {
            _internal_set_rank(static_cast<::openfoxwq::Rank>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .openfoxwq.Country country = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::openfoxwq::Country_IsValid(val))) {
            _internal_set_country(static_cast<::openfoxwq::Country>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BroadcastInfo_BroadcastPlayerInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openfoxwq.BroadcastInfo.BroadcastPlayerInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "openfoxwq.BroadcastInfo.BroadcastPlayerInfo.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string name_alt = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name_alt().data(), static_cast<int>(this->_internal_name_alt().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "openfoxwq.BroadcastInfo.BroadcastPlayerInfo.name_alt");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name_alt(), target);
  }

  // optional .openfoxwq.Rank rank = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_rank(), target);
  }

  // optional .openfoxwq.Country country = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_country(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openfoxwq.BroadcastInfo.BroadcastPlayerInfo)
  return target;
}

size_t BroadcastInfo_BroadcastPlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openfoxwq.BroadcastInfo.BroadcastPlayerInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string name_alt = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name_alt());
    }

    // optional .openfoxwq.Rank rank = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_rank());
    }

    // optional .openfoxwq.Country country = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_country());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BroadcastInfo_BroadcastPlayerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BroadcastInfo_BroadcastPlayerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BroadcastInfo_BroadcastPlayerInfo::GetClassData() const { return &_class_data_; }


void BroadcastInfo_BroadcastPlayerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BroadcastInfo_BroadcastPlayerInfo*>(&to_msg);
  auto& from = static_cast<const BroadcastInfo_BroadcastPlayerInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openfoxwq.BroadcastInfo.BroadcastPlayerInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_name_alt(from._internal_name_alt());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.rank_ = from._impl_.rank_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.country_ = from._impl_.country_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BroadcastInfo_BroadcastPlayerInfo::CopyFrom(const BroadcastInfo_BroadcastPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openfoxwq.BroadcastInfo.BroadcastPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastInfo_BroadcastPlayerInfo::IsInitialized() const {
  return true;
}

void BroadcastInfo_BroadcastPlayerInfo::InternalSwap(BroadcastInfo_BroadcastPlayerInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_alt_, lhs_arena,
      &other->_impl_.name_alt_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BroadcastInfo_BroadcastPlayerInfo, _impl_.country_)
      + sizeof(BroadcastInfo_BroadcastPlayerInfo::_impl_.country_)
      - PROTOBUF_FIELD_OFFSET(BroadcastInfo_BroadcastPlayerInfo, _impl_.rank_)>(
          reinterpret_cast<char*>(&_impl_.rank_),
          reinterpret_cast<char*>(&other->_impl_.rank_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BroadcastInfo_BroadcastPlayerInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fcommon_2eproto_getter, &descriptor_table_proto_2fcommon_2eproto_once,
      file_level_metadata_proto_2fcommon_2eproto[9]);
}

// ===================================================================

class BroadcastInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<BroadcastInfo>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_broadcaster(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_online_count(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_player_id_black(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_player_id_white(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::openfoxwq::BroadcastInfo_BroadcastPlayerInfo& player_info_black(const BroadcastInfo* msg);
  static void set_has_player_info_black(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::openfoxwq::BroadcastInfo_BroadcastPlayerInfo& player_info_white(const BroadcastInfo* msg);
  static void set_has_player_info_white(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000001de) ^ 0x000001de) != 0;
  }
};

const ::openfoxwq::BroadcastInfo_BroadcastPlayerInfo&
BroadcastInfo::_Internal::player_info_black(const BroadcastInfo* msg) {
  return *msg->_impl_.player_info_black_;
}
const ::openfoxwq::BroadcastInfo_BroadcastPlayerInfo&
BroadcastInfo::_Internal::player_info_white(const BroadcastInfo* msg) {
  return *msg->_impl_.player_info_white_;
}
BroadcastInfo::BroadcastInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openfoxwq.BroadcastInfo)
}
BroadcastInfo::BroadcastInfo(const BroadcastInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BroadcastInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.broadcaster_){}
    , decltype(_impl_.player_info_black_){nullptr}
    , decltype(_impl_.player_info_white_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.state_){}
    , decltype(_impl_.online_count_){}
    , decltype(_impl_.player_id_black_){}
    , decltype(_impl_.player_id_white_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.broadcaster_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.broadcaster_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_broadcaster()) {
    _this->_impl_.broadcaster_.Set(from._internal_broadcaster(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_player_info_black()) {
    _this->_impl_.player_info_black_ = new ::openfoxwq::BroadcastInfo_BroadcastPlayerInfo(*from._impl_.player_info_black_);
  }
  if (from._internal_has_player_info_white()) {
    _this->_impl_.player_info_white_ = new ::openfoxwq::BroadcastInfo_BroadcastPlayerInfo(*from._impl_.player_info_white_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_id_white_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.player_id_white_));
  // @@protoc_insertion_point(copy_constructor:openfoxwq.BroadcastInfo)
}

inline void BroadcastInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.broadcaster_){}
    , decltype(_impl_.player_info_black_){nullptr}
    , decltype(_impl_.player_info_white_){nullptr}
    , decltype(_impl_.id_){int64_t{0}}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.state_){0}
    , decltype(_impl_.online_count_){int64_t{0}}
    , decltype(_impl_.player_id_black_){int64_t{0}}
    , decltype(_impl_.player_id_white_){int64_t{0}}
  };
  _impl_.broadcaster_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.broadcaster_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BroadcastInfo::~BroadcastInfo() {
  // @@protoc_insertion_point(destructor:openfoxwq.BroadcastInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BroadcastInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.broadcaster_.Destroy();
  if (this != internal_default_instance()) delete _impl_.player_info_black_;
  if (this != internal_default_instance()) delete _impl_.player_info_white_;
}

void BroadcastInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BroadcastInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:openfoxwq.BroadcastInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.broadcaster_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.player_info_black_ != nullptr);
      _impl_.player_info_black_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.player_info_white_ != nullptr);
      _impl_.player_info_white_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.player_id_black_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.player_id_black_));
  }
  _impl_.player_id_white_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BroadcastInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .openfoxwq.BroadcastInfo.BroadcastType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::openfoxwq::BroadcastInfo_BroadcastType_IsValid(val))) {
            _internal_set_type(static_cast<::openfoxwq::BroadcastInfo_BroadcastType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .openfoxwq.BroadcastInfo.BroadcastState state = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::openfoxwq::BroadcastInfo_BroadcastState_IsValid(val))) {
            _internal_set_state(static_cast<::openfoxwq::BroadcastInfo_BroadcastState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string broadcaster = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_broadcaster();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "openfoxwq.BroadcastInfo.broadcaster");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required int64 online_count = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_online_count(&has_bits);
          _impl_.online_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 player_id_black = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_player_id_black(&has_bits);
          _impl_.player_id_black_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 player_id_white = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_player_id_white(&has_bits);
          _impl_.player_id_white_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .openfoxwq.BroadcastInfo.BroadcastPlayerInfo player_info_black = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_info_black(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .openfoxwq.BroadcastInfo.BroadcastPlayerInfo player_info_white = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_info_white(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BroadcastInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openfoxwq.BroadcastInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int64 id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // required .openfoxwq.BroadcastInfo.BroadcastType type = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // optional .openfoxwq.BroadcastInfo.BroadcastState state = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_state(), target);
  }

  // optional string broadcaster = 9;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_broadcaster().data(), static_cast<int>(this->_internal_broadcaster().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "openfoxwq.BroadcastInfo.broadcaster");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_broadcaster(), target);
  }

  // required int64 online_count = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_online_count(), target);
  }

  // required int64 player_id_black = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_player_id_black(), target);
  }

  // required int64 player_id_white = 12;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_player_id_white(), target);
  }

  // required .openfoxwq.BroadcastInfo.BroadcastPlayerInfo player_info_black = 13;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::player_info_black(this),
        _Internal::player_info_black(this).GetCachedSize(), target, stream);
  }

  // required .openfoxwq.BroadcastInfo.BroadcastPlayerInfo player_info_white = 14;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::player_info_white(this),
        _Internal::player_info_white(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openfoxwq.BroadcastInfo)
  return target;
}

size_t BroadcastInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:openfoxwq.BroadcastInfo)
  size_t total_size = 0;

  if (_internal_has_player_info_black()) {
    // required .openfoxwq.BroadcastInfo.BroadcastPlayerInfo player_info_black = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_info_black_);
  }

  if (_internal_has_player_info_white()) {
    // required .openfoxwq.BroadcastInfo.BroadcastPlayerInfo player_info_white = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_info_white_);
  }

  if (_internal_has_id()) {
    // required int64 id = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  if (_internal_has_type()) {
    // required .openfoxwq.BroadcastInfo.BroadcastType type = 3;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (_internal_has_online_count()) {
    // required int64 online_count = 10;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_online_count());
  }

  if (_internal_has_player_id_black()) {
    // required int64 player_id_black = 11;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_player_id_black());
  }

  if (_internal_has_player_id_white()) {
    // required int64 player_id_white = 12;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_player_id_white());
  }

  return total_size;
}
size_t BroadcastInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openfoxwq.BroadcastInfo)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x000001de) ^ 0x000001de) == 0) {  // All required fields are present.
    // required .openfoxwq.BroadcastInfo.BroadcastPlayerInfo player_info_black = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_info_black_);

    // required .openfoxwq.BroadcastInfo.BroadcastPlayerInfo player_info_white = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_info_white_);

    // required int64 id = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id());

    // required .openfoxwq.BroadcastInfo.BroadcastType type = 3;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());

    // required int64 online_count = 10;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_online_count());

    // required int64 player_id_black = 11;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_player_id_black());

    // required int64 player_id_white = 12;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_player_id_white());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string broadcaster = 9;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_broadcaster());
  }

  // optional .openfoxwq.BroadcastInfo.BroadcastState state = 8;
  if (cached_has_bits & 0x00000020u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BroadcastInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BroadcastInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BroadcastInfo::GetClassData() const { return &_class_data_; }


void BroadcastInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BroadcastInfo*>(&to_msg);
  auto& from = static_cast<const BroadcastInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openfoxwq.BroadcastInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_broadcaster(from._internal_broadcaster());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_player_info_black()->::openfoxwq::BroadcastInfo_BroadcastPlayerInfo::MergeFrom(
          from._internal_player_info_black());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_player_info_white()->::openfoxwq::BroadcastInfo_BroadcastPlayerInfo::MergeFrom(
          from._internal_player_info_white());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.state_ = from._impl_.state_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.online_count_ = from._impl_.online_count_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.player_id_black_ = from._impl_.player_id_black_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_player_id_white(from._internal_player_id_white());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BroadcastInfo::CopyFrom(const BroadcastInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openfoxwq.BroadcastInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void BroadcastInfo::InternalSwap(BroadcastInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.broadcaster_, lhs_arena,
      &other->_impl_.broadcaster_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BroadcastInfo, _impl_.player_id_white_)
      + sizeof(BroadcastInfo::_impl_.player_id_white_)
      - PROTOBUF_FIELD_OFFSET(BroadcastInfo, _impl_.player_info_black_)>(
          reinterpret_cast<char*>(&_impl_.player_info_black_),
          reinterpret_cast<char*>(&other->_impl_.player_info_black_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BroadcastInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fcommon_2eproto_getter, &descriptor_table_proto_2fcommon_2eproto_once,
      file_level_metadata_proto_2fcommon_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace openfoxwq
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::openfoxwq::VersionInfo*
Arena::CreateMaybeMessage< ::openfoxwq::VersionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openfoxwq::VersionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::openfoxwq::ProxyLineInfo_ProxyAddressInfo*
Arena::CreateMaybeMessage< ::openfoxwq::ProxyLineInfo_ProxyAddressInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openfoxwq::ProxyLineInfo_ProxyAddressInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::openfoxwq::ProxyLineInfo*
Arena::CreateMaybeMessage< ::openfoxwq::ProxyLineInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openfoxwq::ProxyLineInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::openfoxwq::LobbySvrInfo_NameLocEntry_DoNotUse*
Arena::CreateMaybeMessage< ::openfoxwq::LobbySvrInfo_NameLocEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openfoxwq::LobbySvrInfo_NameLocEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::openfoxwq::LobbySvrInfo*
Arena::CreateMaybeMessage< ::openfoxwq::LobbySvrInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openfoxwq::LobbySvrInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::openfoxwq::PlayerInfo*
Arena::CreateMaybeMessage< ::openfoxwq::PlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openfoxwq::PlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::openfoxwq::MatchSettings*
Arena::CreateMaybeMessage< ::openfoxwq::MatchSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openfoxwq::MatchSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::openfoxwq::RoomSettings*
Arena::CreateMaybeMessage< ::openfoxwq::RoomSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openfoxwq::RoomSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::openfoxwq::RoomId*
Arena::CreateMaybeMessage< ::openfoxwq::RoomId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openfoxwq::RoomId >(arena);
}
template<> PROTOBUF_NOINLINE ::openfoxwq::BroadcastInfo_BroadcastPlayerInfo*
Arena::CreateMaybeMessage< ::openfoxwq::BroadcastInfo_BroadcastPlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openfoxwq::BroadcastInfo_BroadcastPlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::openfoxwq::BroadcastInfo*
Arena::CreateMaybeMessage< ::openfoxwq::BroadcastInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openfoxwq::BroadcastInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
