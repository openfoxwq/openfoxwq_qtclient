// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/nav.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fnav_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fnav_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "proto/reqOption.pb.h"
#include "proto/common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fnav_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fnav_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fnav_2eproto;
namespace openfoxwq {
class ListServersRequest;
struct ListServersRequestDefaultTypeInternal;
extern ListServersRequestDefaultTypeInternal _ListServersRequest_default_instance_;
class ListServersResponse;
struct ListServersResponseDefaultTypeInternal;
extern ListServersResponseDefaultTypeInternal _ListServersResponse_default_instance_;
class LoginRequest;
struct LoginRequestDefaultTypeInternal;
extern LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;
class LoginResponse;
struct LoginResponseDefaultTypeInternal;
extern LoginResponseDefaultTypeInternal _LoginResponse_default_instance_;
class LoginResponse_AllResults;
struct LoginResponse_AllResultsDefaultTypeInternal;
extern LoginResponse_AllResultsDefaultTypeInternal _LoginResponse_AllResults_default_instance_;
class LoginResponse_Results;
struct LoginResponse_ResultsDefaultTypeInternal;
extern LoginResponse_ResultsDefaultTypeInternal _LoginResponse_Results_default_instance_;
}  // namespace openfoxwq
PROTOBUF_NAMESPACE_OPEN
template<> ::openfoxwq::ListServersRequest* Arena::CreateMaybeMessage<::openfoxwq::ListServersRequest>(Arena*);
template<> ::openfoxwq::ListServersResponse* Arena::CreateMaybeMessage<::openfoxwq::ListServersResponse>(Arena*);
template<> ::openfoxwq::LoginRequest* Arena::CreateMaybeMessage<::openfoxwq::LoginRequest>(Arena*);
template<> ::openfoxwq::LoginResponse* Arena::CreateMaybeMessage<::openfoxwq::LoginResponse>(Arena*);
template<> ::openfoxwq::LoginResponse_AllResults* Arena::CreateMaybeMessage<::openfoxwq::LoginResponse_AllResults>(Arena*);
template<> ::openfoxwq::LoginResponse_Results* Arena::CreateMaybeMessage<::openfoxwq::LoginResponse_Results>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace openfoxwq {

// ===================================================================

class ListServersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openfoxwq.ListServersRequest) */ {
 public:
  inline ListServersRequest() : ListServersRequest(nullptr) {}
  ~ListServersRequest() override;
  explicit PROTOBUF_CONSTEXPR ListServersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListServersRequest(const ListServersRequest& from);
  ListServersRequest(ListServersRequest&& from) noexcept
    : ListServersRequest() {
    *this = ::std::move(from);
  }

  inline ListServersRequest& operator=(const ListServersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListServersRequest& operator=(ListServersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListServersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListServersRequest* internal_default_instance() {
    return reinterpret_cast<const ListServersRequest*>(
               &_ListServersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ListServersRequest& a, ListServersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListServersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListServersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListServersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListServersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListServersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListServersRequest& from) {
    ListServersRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListServersRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openfoxwq.ListServersRequest";
  }
  protected:
  explicit ListServersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // required int64 player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  int64_t player_id() const;
  void set_player_id(int64_t value);
  private:
  int64_t _internal_player_id() const;
  void _internal_set_player_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:openfoxwq.ListServersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int64_t player_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fnav_2eproto;
};
// -------------------------------------------------------------------

class ListServersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openfoxwq.ListServersResponse) */ {
 public:
  inline ListServersResponse() : ListServersResponse(nullptr) {}
  ~ListServersResponse() override;
  explicit PROTOBUF_CONSTEXPR ListServersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListServersResponse(const ListServersResponse& from);
  ListServersResponse(ListServersResponse&& from) noexcept
    : ListServersResponse() {
    *this = ::std::move(from);
  }

  inline ListServersResponse& operator=(const ListServersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListServersResponse& operator=(ListServersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListServersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListServersResponse* internal_default_instance() {
    return reinterpret_cast<const ListServersResponse*>(
               &_ListServersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ListServersResponse& a, ListServersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListServersResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListServersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListServersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListServersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListServersResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListServersResponse& from) {
    ListServersResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListServersResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openfoxwq.ListServersResponse";
  }
  protected:
  explicit ListServersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerInfoFieldNumber = 3,
  };
  // optional .openfoxwq.LobbySvrInfo server_info = 3;
  bool has_server_info() const;
  private:
  bool _internal_has_server_info() const;
  public:
  void clear_server_info();
  const ::openfoxwq::LobbySvrInfo& server_info() const;
  PROTOBUF_NODISCARD ::openfoxwq::LobbySvrInfo* release_server_info();
  ::openfoxwq::LobbySvrInfo* mutable_server_info();
  void set_allocated_server_info(::openfoxwq::LobbySvrInfo* server_info);
  private:
  const ::openfoxwq::LobbySvrInfo& _internal_server_info() const;
  ::openfoxwq::LobbySvrInfo* _internal_mutable_server_info();
  public:
  void unsafe_arena_set_allocated_server_info(
      ::openfoxwq::LobbySvrInfo* server_info);
  ::openfoxwq::LobbySvrInfo* unsafe_arena_release_server_info();

  // @@protoc_insertion_point(class_scope:openfoxwq.ListServersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::openfoxwq::LobbySvrInfo* server_info_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fnav_2eproto;
};
// -------------------------------------------------------------------

class LoginRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openfoxwq.LoginRequest) */ {
 public:
  inline LoginRequest() : LoginRequest(nullptr) {}
  ~LoginRequest() override;
  explicit PROTOBUF_CONSTEXPR LoginRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginRequest(const LoginRequest& from);
  LoginRequest(LoginRequest&& from) noexcept
    : LoginRequest() {
    *this = ::std::move(from);
  }

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRequest& operator=(LoginRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginRequest* internal_default_instance() {
    return reinterpret_cast<const LoginRequest*>(
               &_LoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LoginRequest& a, LoginRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LoginRequest& from) {
    LoginRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openfoxwq.LoginRequest";
  }
  protected:
  explicit LoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
    kAppFieldNumber = 2,
    kPasswordHashFieldNumber = 3,
    kMacAddressFieldNumber = 7,
    kUnknownField4FieldNumber = 4,
    kClientVersionFieldNumber = 5,
  };
  // required bytes user = 1;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const std::string& user() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user();
  PROTOBUF_NODISCARD std::string* release_user();
  void set_allocated_user(std::string* user);
  private:
  const std::string& _internal_user() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user(const std::string& value);
  std::string* _internal_mutable_user();
  public:

  // required string app = 2;
  bool has_app() const;
  private:
  bool _internal_has_app() const;
  public:
  void clear_app();
  const std::string& app() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app();
  PROTOBUF_NODISCARD std::string* release_app();
  void set_allocated_app(std::string* app);
  private:
  const std::string& _internal_app() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app(const std::string& value);
  std::string* _internal_mutable_app();
  public:

  // required string password_hash = 3;
  bool has_password_hash() const;
  private:
  bool _internal_has_password_hash() const;
  public:
  void clear_password_hash();
  const std::string& password_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password_hash();
  PROTOBUF_NODISCARD std::string* release_password_hash();
  void set_allocated_password_hash(std::string* password_hash);
  private:
  const std::string& _internal_password_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password_hash(const std::string& value);
  std::string* _internal_mutable_password_hash();
  public:

  // required string mac_address = 7;
  bool has_mac_address() const;
  private:
  bool _internal_has_mac_address() const;
  public:
  void clear_mac_address();
  const std::string& mac_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mac_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mac_address();
  PROTOBUF_NODISCARD std::string* release_mac_address();
  void set_allocated_mac_address(std::string* mac_address);
  private:
  const std::string& _internal_mac_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mac_address(const std::string& value);
  std::string* _internal_mutable_mac_address();
  public:

  // optional int64 unknown_field_4 = 4;
  bool has_unknown_field_4() const;
  private:
  bool _internal_has_unknown_field_4() const;
  public:
  void clear_unknown_field_4();
  int64_t unknown_field_4() const;
  void set_unknown_field_4(int64_t value);
  private:
  int64_t _internal_unknown_field_4() const;
  void _internal_set_unknown_field_4(int64_t value);
  public:

  // required int64 client_version = 5;
  bool has_client_version() const;
  private:
  bool _internal_has_client_version() const;
  public:
  void clear_client_version();
  int64_t client_version() const;
  void set_client_version(int64_t value);
  private:
  int64_t _internal_client_version() const;
  void _internal_set_client_version(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:openfoxwq.LoginRequest)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_hash_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mac_address_;
    int64_t unknown_field_4_;
    int64_t client_version_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fnav_2eproto;
};
// -------------------------------------------------------------------

class LoginResponse_Results final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openfoxwq.LoginResponse.Results) */ {
 public:
  inline LoginResponse_Results() : LoginResponse_Results(nullptr) {}
  ~LoginResponse_Results() override;
  explicit PROTOBUF_CONSTEXPR LoginResponse_Results(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginResponse_Results(const LoginResponse_Results& from);
  LoginResponse_Results(LoginResponse_Results&& from) noexcept
    : LoginResponse_Results() {
    *this = ::std::move(from);
  }

  inline LoginResponse_Results& operator=(const LoginResponse_Results& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginResponse_Results& operator=(LoginResponse_Results&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginResponse_Results& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginResponse_Results* internal_default_instance() {
    return reinterpret_cast<const LoginResponse_Results*>(
               &_LoginResponse_Results_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LoginResponse_Results& a, LoginResponse_Results& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginResponse_Results* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginResponse_Results* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginResponse_Results* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginResponse_Results>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginResponse_Results& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LoginResponse_Results& from) {
    LoginResponse_Results::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginResponse_Results* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openfoxwq.LoginResponse.Results";
  }
  protected:
  explicit LoginResponse_Results(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWinsFieldNumber = 1,
    kLossesFieldNumber = 2,
    kDrawsFieldNumber = 3,
  };
  // optional int64 wins = 1;
  bool has_wins() const;
  private:
  bool _internal_has_wins() const;
  public:
  void clear_wins();
  int64_t wins() const;
  void set_wins(int64_t value);
  private:
  int64_t _internal_wins() const;
  void _internal_set_wins(int64_t value);
  public:

  // optional int64 losses = 2;
  bool has_losses() const;
  private:
  bool _internal_has_losses() const;
  public:
  void clear_losses();
  int64_t losses() const;
  void set_losses(int64_t value);
  private:
  int64_t _internal_losses() const;
  void _internal_set_losses(int64_t value);
  public:

  // optional int64 draws = 3;
  bool has_draws() const;
  private:
  bool _internal_has_draws() const;
  public:
  void clear_draws();
  int64_t draws() const;
  void set_draws(int64_t value);
  private:
  int64_t _internal_draws() const;
  void _internal_set_draws(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:openfoxwq.LoginResponse.Results)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int64_t wins_;
    int64_t losses_;
    int64_t draws_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fnav_2eproto;
};
// -------------------------------------------------------------------

class LoginResponse_AllResults final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openfoxwq.LoginResponse.AllResults) */ {
 public:
  inline LoginResponse_AllResults() : LoginResponse_AllResults(nullptr) {}
  ~LoginResponse_AllResults() override;
  explicit PROTOBUF_CONSTEXPR LoginResponse_AllResults(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginResponse_AllResults(const LoginResponse_AllResults& from);
  LoginResponse_AllResults(LoginResponse_AllResults&& from) noexcept
    : LoginResponse_AllResults() {
    *this = ::std::move(from);
  }

  inline LoginResponse_AllResults& operator=(const LoginResponse_AllResults& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginResponse_AllResults& operator=(LoginResponse_AllResults&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginResponse_AllResults& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginResponse_AllResults* internal_default_instance() {
    return reinterpret_cast<const LoginResponse_AllResults*>(
               &_LoginResponse_AllResults_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LoginResponse_AllResults& a, LoginResponse_AllResults& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginResponse_AllResults* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginResponse_AllResults* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginResponse_AllResults* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginResponse_AllResults>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginResponse_AllResults& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LoginResponse_AllResults& from) {
    LoginResponse_AllResults::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginResponse_AllResults* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openfoxwq.LoginResponse.AllResults";
  }
  protected:
  explicit LoginResponse_AllResults(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentFieldNumber = 9,
    kRankedFieldNumber = 10,
    kFreeFieldNumber = 11,
    kPlayerIdFieldNumber = 1,
  };
  // optional .openfoxwq.LoginResponse.Results current = 9;
  bool has_current() const;
  private:
  bool _internal_has_current() const;
  public:
  void clear_current();
  const ::openfoxwq::LoginResponse_Results& current() const;
  PROTOBUF_NODISCARD ::openfoxwq::LoginResponse_Results* release_current();
  ::openfoxwq::LoginResponse_Results* mutable_current();
  void set_allocated_current(::openfoxwq::LoginResponse_Results* current);
  private:
  const ::openfoxwq::LoginResponse_Results& _internal_current() const;
  ::openfoxwq::LoginResponse_Results* _internal_mutable_current();
  public:
  void unsafe_arena_set_allocated_current(
      ::openfoxwq::LoginResponse_Results* current);
  ::openfoxwq::LoginResponse_Results* unsafe_arena_release_current();

  // optional .openfoxwq.LoginResponse.Results ranked = 10;
  bool has_ranked() const;
  private:
  bool _internal_has_ranked() const;
  public:
  void clear_ranked();
  const ::openfoxwq::LoginResponse_Results& ranked() const;
  PROTOBUF_NODISCARD ::openfoxwq::LoginResponse_Results* release_ranked();
  ::openfoxwq::LoginResponse_Results* mutable_ranked();
  void set_allocated_ranked(::openfoxwq::LoginResponse_Results* ranked);
  private:
  const ::openfoxwq::LoginResponse_Results& _internal_ranked() const;
  ::openfoxwq::LoginResponse_Results* _internal_mutable_ranked();
  public:
  void unsafe_arena_set_allocated_ranked(
      ::openfoxwq::LoginResponse_Results* ranked);
  ::openfoxwq::LoginResponse_Results* unsafe_arena_release_ranked();

  // optional .openfoxwq.LoginResponse.Results free = 11;
  bool has_free() const;
  private:
  bool _internal_has_free() const;
  public:
  void clear_free();
  const ::openfoxwq::LoginResponse_Results& free() const;
  PROTOBUF_NODISCARD ::openfoxwq::LoginResponse_Results* release_free();
  ::openfoxwq::LoginResponse_Results* mutable_free();
  void set_allocated_free(::openfoxwq::LoginResponse_Results* free);
  private:
  const ::openfoxwq::LoginResponse_Results& _internal_free() const;
  ::openfoxwq::LoginResponse_Results* _internal_mutable_free();
  public:
  void unsafe_arena_set_allocated_free(
      ::openfoxwq::LoginResponse_Results* free);
  ::openfoxwq::LoginResponse_Results* unsafe_arena_release_free();

  // optional int64 player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  int64_t player_id() const;
  void set_player_id(int64_t value);
  private:
  int64_t _internal_player_id() const;
  void _internal_set_player_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:openfoxwq.LoginResponse.AllResults)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::openfoxwq::LoginResponse_Results* current_;
    ::openfoxwq::LoginResponse_Results* ranked_;
    ::openfoxwq::LoginResponse_Results* free_;
    int64_t player_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fnav_2eproto;
};
// -------------------------------------------------------------------

class LoginResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openfoxwq.LoginResponse) */ {
 public:
  inline LoginResponse() : LoginResponse(nullptr) {}
  ~LoginResponse() override;
  explicit PROTOBUF_CONSTEXPR LoginResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginResponse(const LoginResponse& from);
  LoginResponse(LoginResponse&& from) noexcept
    : LoginResponse() {
    *this = ::std::move(from);
  }

  inline LoginResponse& operator=(const LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginResponse& operator=(LoginResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginResponse* internal_default_instance() {
    return reinterpret_cast<const LoginResponse*>(
               &_LoginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LoginResponse& a, LoginResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LoginResponse& from) {
    LoginResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openfoxwq.LoginResponse";
  }
  protected:
  explicit LoginResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LoginResponse_Results Results;
  typedef LoginResponse_AllResults AllResults;

  // accessors -------------------------------------------------------

  enum : int {
    kToken1FieldNumber = 8,
    kToken2FieldNumber = 10,
    kBindUrlFieldNumber = 24,
    kPlayerInfoFieldNumber = 3,
    kResultsFieldNumber = 4,
    kPlayerIdFieldNumber = 2,
  };
  // required bytes token1 = 8;
  bool has_token1() const;
  private:
  bool _internal_has_token1() const;
  public:
  void clear_token1();
  const std::string& token1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token1();
  PROTOBUF_NODISCARD std::string* release_token1();
  void set_allocated_token1(std::string* token1);
  private:
  const std::string& _internal_token1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token1(const std::string& value);
  std::string* _internal_mutable_token1();
  public:

  // required bytes token2 = 10;
  bool has_token2() const;
  private:
  bool _internal_has_token2() const;
  public:
  void clear_token2();
  const std::string& token2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token2();
  PROTOBUF_NODISCARD std::string* release_token2();
  void set_allocated_token2(std::string* token2);
  private:
  const std::string& _internal_token2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token2(const std::string& value);
  std::string* _internal_mutable_token2();
  public:

  // required string bind_url = 24;
  bool has_bind_url() const;
  private:
  bool _internal_has_bind_url() const;
  public:
  void clear_bind_url();
  const std::string& bind_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bind_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bind_url();
  PROTOBUF_NODISCARD std::string* release_bind_url();
  void set_allocated_bind_url(std::string* bind_url);
  private:
  const std::string& _internal_bind_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bind_url(const std::string& value);
  std::string* _internal_mutable_bind_url();
  public:

  // required .openfoxwq.PlayerInfo player_info = 3;
  bool has_player_info() const;
  private:
  bool _internal_has_player_info() const;
  public:
  void clear_player_info();
  const ::openfoxwq::PlayerInfo& player_info() const;
  PROTOBUF_NODISCARD ::openfoxwq::PlayerInfo* release_player_info();
  ::openfoxwq::PlayerInfo* mutable_player_info();
  void set_allocated_player_info(::openfoxwq::PlayerInfo* player_info);
  private:
  const ::openfoxwq::PlayerInfo& _internal_player_info() const;
  ::openfoxwq::PlayerInfo* _internal_mutable_player_info();
  public:
  void unsafe_arena_set_allocated_player_info(
      ::openfoxwq::PlayerInfo* player_info);
  ::openfoxwq::PlayerInfo* unsafe_arena_release_player_info();

  // required .openfoxwq.LoginResponse.AllResults results = 4;
  bool has_results() const;
  private:
  bool _internal_has_results() const;
  public:
  void clear_results();
  const ::openfoxwq::LoginResponse_AllResults& results() const;
  PROTOBUF_NODISCARD ::openfoxwq::LoginResponse_AllResults* release_results();
  ::openfoxwq::LoginResponse_AllResults* mutable_results();
  void set_allocated_results(::openfoxwq::LoginResponse_AllResults* results);
  private:
  const ::openfoxwq::LoginResponse_AllResults& _internal_results() const;
  ::openfoxwq::LoginResponse_AllResults* _internal_mutable_results();
  public:
  void unsafe_arena_set_allocated_results(
      ::openfoxwq::LoginResponse_AllResults* results);
  ::openfoxwq::LoginResponse_AllResults* unsafe_arena_release_results();

  // required int64 player_id = 2;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  int64_t player_id() const;
  void set_player_id(int64_t value);
  private:
  int64_t _internal_player_id() const;
  void _internal_set_player_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:openfoxwq.LoginResponse)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token1_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token2_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bind_url_;
    ::openfoxwq::PlayerInfo* player_info_;
    ::openfoxwq::LoginResponse_AllResults* results_;
    int64_t player_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fnav_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ListServersRequest

// required int64 player_id = 1;
inline bool ListServersRequest::_internal_has_player_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ListServersRequest::has_player_id() const {
  return _internal_has_player_id();
}
inline void ListServersRequest::clear_player_id() {
  _impl_.player_id_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int64_t ListServersRequest::_internal_player_id() const {
  return _impl_.player_id_;
}
inline int64_t ListServersRequest::player_id() const {
  // @@protoc_insertion_point(field_get:openfoxwq.ListServersRequest.player_id)
  return _internal_player_id();
}
inline void ListServersRequest::_internal_set_player_id(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.player_id_ = value;
}
inline void ListServersRequest::set_player_id(int64_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:openfoxwq.ListServersRequest.player_id)
}

// -------------------------------------------------------------------

// ListServersResponse

// optional .openfoxwq.LobbySvrInfo server_info = 3;
inline bool ListServersResponse::_internal_has_server_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.server_info_ != nullptr);
  return value;
}
inline bool ListServersResponse::has_server_info() const {
  return _internal_has_server_info();
}
inline const ::openfoxwq::LobbySvrInfo& ListServersResponse::_internal_server_info() const {
  const ::openfoxwq::LobbySvrInfo* p = _impl_.server_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::openfoxwq::LobbySvrInfo&>(
      ::openfoxwq::_LobbySvrInfo_default_instance_);
}
inline const ::openfoxwq::LobbySvrInfo& ListServersResponse::server_info() const {
  // @@protoc_insertion_point(field_get:openfoxwq.ListServersResponse.server_info)
  return _internal_server_info();
}
inline void ListServersResponse::unsafe_arena_set_allocated_server_info(
    ::openfoxwq::LobbySvrInfo* server_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.server_info_);
  }
  _impl_.server_info_ = server_info;
  if (server_info) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openfoxwq.ListServersResponse.server_info)
}
inline ::openfoxwq::LobbySvrInfo* ListServersResponse::release_server_info() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::openfoxwq::LobbySvrInfo* temp = _impl_.server_info_;
  _impl_.server_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::openfoxwq::LobbySvrInfo* ListServersResponse::unsafe_arena_release_server_info() {
  // @@protoc_insertion_point(field_release:openfoxwq.ListServersResponse.server_info)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::openfoxwq::LobbySvrInfo* temp = _impl_.server_info_;
  _impl_.server_info_ = nullptr;
  return temp;
}
inline ::openfoxwq::LobbySvrInfo* ListServersResponse::_internal_mutable_server_info() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.server_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::openfoxwq::LobbySvrInfo>(GetArenaForAllocation());
    _impl_.server_info_ = p;
  }
  return _impl_.server_info_;
}
inline ::openfoxwq::LobbySvrInfo* ListServersResponse::mutable_server_info() {
  ::openfoxwq::LobbySvrInfo* _msg = _internal_mutable_server_info();
  // @@protoc_insertion_point(field_mutable:openfoxwq.ListServersResponse.server_info)
  return _msg;
}
inline void ListServersResponse::set_allocated_server_info(::openfoxwq::LobbySvrInfo* server_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.server_info_);
  }
  if (server_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_info));
    if (message_arena != submessage_arena) {
      server_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.server_info_ = server_info;
  // @@protoc_insertion_point(field_set_allocated:openfoxwq.ListServersResponse.server_info)
}

// -------------------------------------------------------------------

// LoginRequest

// required bytes user = 1;
inline bool LoginRequest::_internal_has_user() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LoginRequest::has_user() const {
  return _internal_has_user();
}
inline void LoginRequest::clear_user() {
  _impl_.user_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LoginRequest::user() const {
  // @@protoc_insertion_point(field_get:openfoxwq.LoginRequest.user)
  return _internal_user();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginRequest::set_user(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.user_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:openfoxwq.LoginRequest.user)
}
inline std::string* LoginRequest::mutable_user() {
  std::string* _s = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:openfoxwq.LoginRequest.user)
  return _s;
}
inline const std::string& LoginRequest::_internal_user() const {
  return _impl_.user_.Get();
}
inline void LoginRequest::_internal_set_user(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.user_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginRequest::_internal_mutable_user() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.user_.Mutable(GetArenaForAllocation());
}
inline std::string* LoginRequest::release_user() {
  // @@protoc_insertion_point(field_release:openfoxwq.LoginRequest.user)
  if (!_internal_has_user()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.user_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_.IsDefault()) {
    _impl_.user_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LoginRequest::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.user_.SetAllocated(user, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_.IsDefault()) {
    _impl_.user_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:openfoxwq.LoginRequest.user)
}

// required string app = 2;
inline bool LoginRequest::_internal_has_app() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LoginRequest::has_app() const {
  return _internal_has_app();
}
inline void LoginRequest::clear_app() {
  _impl_.app_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LoginRequest::app() const {
  // @@protoc_insertion_point(field_get:openfoxwq.LoginRequest.app)
  return _internal_app();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginRequest::set_app(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.app_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:openfoxwq.LoginRequest.app)
}
inline std::string* LoginRequest::mutable_app() {
  std::string* _s = _internal_mutable_app();
  // @@protoc_insertion_point(field_mutable:openfoxwq.LoginRequest.app)
  return _s;
}
inline const std::string& LoginRequest::_internal_app() const {
  return _impl_.app_.Get();
}
inline void LoginRequest::_internal_set_app(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.app_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginRequest::_internal_mutable_app() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.app_.Mutable(GetArenaForAllocation());
}
inline std::string* LoginRequest::release_app() {
  // @@protoc_insertion_point(field_release:openfoxwq.LoginRequest.app)
  if (!_internal_has_app()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.app_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.app_.IsDefault()) {
    _impl_.app_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LoginRequest::set_allocated_app(std::string* app) {
  if (app != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.app_.SetAllocated(app, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.app_.IsDefault()) {
    _impl_.app_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:openfoxwq.LoginRequest.app)
}

// required string password_hash = 3;
inline bool LoginRequest::_internal_has_password_hash() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LoginRequest::has_password_hash() const {
  return _internal_has_password_hash();
}
inline void LoginRequest::clear_password_hash() {
  _impl_.password_hash_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& LoginRequest::password_hash() const {
  // @@protoc_insertion_point(field_get:openfoxwq.LoginRequest.password_hash)
  return _internal_password_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginRequest::set_password_hash(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.password_hash_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:openfoxwq.LoginRequest.password_hash)
}
inline std::string* LoginRequest::mutable_password_hash() {
  std::string* _s = _internal_mutable_password_hash();
  // @@protoc_insertion_point(field_mutable:openfoxwq.LoginRequest.password_hash)
  return _s;
}
inline const std::string& LoginRequest::_internal_password_hash() const {
  return _impl_.password_hash_.Get();
}
inline void LoginRequest::_internal_set_password_hash(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.password_hash_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginRequest::_internal_mutable_password_hash() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.password_hash_.Mutable(GetArenaForAllocation());
}
inline std::string* LoginRequest::release_password_hash() {
  // @@protoc_insertion_point(field_release:openfoxwq.LoginRequest.password_hash)
  if (!_internal_has_password_hash()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.password_hash_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_hash_.IsDefault()) {
    _impl_.password_hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LoginRequest::set_allocated_password_hash(std::string* password_hash) {
  if (password_hash != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.password_hash_.SetAllocated(password_hash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_hash_.IsDefault()) {
    _impl_.password_hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:openfoxwq.LoginRequest.password_hash)
}

// required int64 client_version = 5;
inline bool LoginRequest::_internal_has_client_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool LoginRequest::has_client_version() const {
  return _internal_has_client_version();
}
inline void LoginRequest::clear_client_version() {
  _impl_.client_version_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int64_t LoginRequest::_internal_client_version() const {
  return _impl_.client_version_;
}
inline int64_t LoginRequest::client_version() const {
  // @@protoc_insertion_point(field_get:openfoxwq.LoginRequest.client_version)
  return _internal_client_version();
}
inline void LoginRequest::_internal_set_client_version(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.client_version_ = value;
}
inline void LoginRequest::set_client_version(int64_t value) {
  _internal_set_client_version(value);
  // @@protoc_insertion_point(field_set:openfoxwq.LoginRequest.client_version)
}

// required string mac_address = 7;
inline bool LoginRequest::_internal_has_mac_address() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LoginRequest::has_mac_address() const {
  return _internal_has_mac_address();
}
inline void LoginRequest::clear_mac_address() {
  _impl_.mac_address_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& LoginRequest::mac_address() const {
  // @@protoc_insertion_point(field_get:openfoxwq.LoginRequest.mac_address)
  return _internal_mac_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginRequest::set_mac_address(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.mac_address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:openfoxwq.LoginRequest.mac_address)
}
inline std::string* LoginRequest::mutable_mac_address() {
  std::string* _s = _internal_mutable_mac_address();
  // @@protoc_insertion_point(field_mutable:openfoxwq.LoginRequest.mac_address)
  return _s;
}
inline const std::string& LoginRequest::_internal_mac_address() const {
  return _impl_.mac_address_.Get();
}
inline void LoginRequest::_internal_set_mac_address(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.mac_address_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginRequest::_internal_mutable_mac_address() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.mac_address_.Mutable(GetArenaForAllocation());
}
inline std::string* LoginRequest::release_mac_address() {
  // @@protoc_insertion_point(field_release:openfoxwq.LoginRequest.mac_address)
  if (!_internal_has_mac_address()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.mac_address_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mac_address_.IsDefault()) {
    _impl_.mac_address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LoginRequest::set_allocated_mac_address(std::string* mac_address) {
  if (mac_address != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.mac_address_.SetAllocated(mac_address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mac_address_.IsDefault()) {
    _impl_.mac_address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:openfoxwq.LoginRequest.mac_address)
}

// optional int64 unknown_field_4 = 4;
inline bool LoginRequest::_internal_has_unknown_field_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LoginRequest::has_unknown_field_4() const {
  return _internal_has_unknown_field_4();
}
inline void LoginRequest::clear_unknown_field_4() {
  _impl_.unknown_field_4_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int64_t LoginRequest::_internal_unknown_field_4() const {
  return _impl_.unknown_field_4_;
}
inline int64_t LoginRequest::unknown_field_4() const {
  // @@protoc_insertion_point(field_get:openfoxwq.LoginRequest.unknown_field_4)
  return _internal_unknown_field_4();
}
inline void LoginRequest::_internal_set_unknown_field_4(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.unknown_field_4_ = value;
}
inline void LoginRequest::set_unknown_field_4(int64_t value) {
  _internal_set_unknown_field_4(value);
  // @@protoc_insertion_point(field_set:openfoxwq.LoginRequest.unknown_field_4)
}

// -------------------------------------------------------------------

// LoginResponse_Results

// optional int64 wins = 1;
inline bool LoginResponse_Results::_internal_has_wins() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LoginResponse_Results::has_wins() const {
  return _internal_has_wins();
}
inline void LoginResponse_Results::clear_wins() {
  _impl_.wins_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int64_t LoginResponse_Results::_internal_wins() const {
  return _impl_.wins_;
}
inline int64_t LoginResponse_Results::wins() const {
  // @@protoc_insertion_point(field_get:openfoxwq.LoginResponse.Results.wins)
  return _internal_wins();
}
inline void LoginResponse_Results::_internal_set_wins(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.wins_ = value;
}
inline void LoginResponse_Results::set_wins(int64_t value) {
  _internal_set_wins(value);
  // @@protoc_insertion_point(field_set:openfoxwq.LoginResponse.Results.wins)
}

// optional int64 losses = 2;
inline bool LoginResponse_Results::_internal_has_losses() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LoginResponse_Results::has_losses() const {
  return _internal_has_losses();
}
inline void LoginResponse_Results::clear_losses() {
  _impl_.losses_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int64_t LoginResponse_Results::_internal_losses() const {
  return _impl_.losses_;
}
inline int64_t LoginResponse_Results::losses() const {
  // @@protoc_insertion_point(field_get:openfoxwq.LoginResponse.Results.losses)
  return _internal_losses();
}
inline void LoginResponse_Results::_internal_set_losses(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.losses_ = value;
}
inline void LoginResponse_Results::set_losses(int64_t value) {
  _internal_set_losses(value);
  // @@protoc_insertion_point(field_set:openfoxwq.LoginResponse.Results.losses)
}

// optional int64 draws = 3;
inline bool LoginResponse_Results::_internal_has_draws() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LoginResponse_Results::has_draws() const {
  return _internal_has_draws();
}
inline void LoginResponse_Results::clear_draws() {
  _impl_.draws_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int64_t LoginResponse_Results::_internal_draws() const {
  return _impl_.draws_;
}
inline int64_t LoginResponse_Results::draws() const {
  // @@protoc_insertion_point(field_get:openfoxwq.LoginResponse.Results.draws)
  return _internal_draws();
}
inline void LoginResponse_Results::_internal_set_draws(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.draws_ = value;
}
inline void LoginResponse_Results::set_draws(int64_t value) {
  _internal_set_draws(value);
  // @@protoc_insertion_point(field_set:openfoxwq.LoginResponse.Results.draws)
}

// -------------------------------------------------------------------

// LoginResponse_AllResults

// optional int64 player_id = 1;
inline bool LoginResponse_AllResults::_internal_has_player_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LoginResponse_AllResults::has_player_id() const {
  return _internal_has_player_id();
}
inline void LoginResponse_AllResults::clear_player_id() {
  _impl_.player_id_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int64_t LoginResponse_AllResults::_internal_player_id() const {
  return _impl_.player_id_;
}
inline int64_t LoginResponse_AllResults::player_id() const {
  // @@protoc_insertion_point(field_get:openfoxwq.LoginResponse.AllResults.player_id)
  return _internal_player_id();
}
inline void LoginResponse_AllResults::_internal_set_player_id(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.player_id_ = value;
}
inline void LoginResponse_AllResults::set_player_id(int64_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:openfoxwq.LoginResponse.AllResults.player_id)
}

// optional .openfoxwq.LoginResponse.Results current = 9;
inline bool LoginResponse_AllResults::_internal_has_current() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.current_ != nullptr);
  return value;
}
inline bool LoginResponse_AllResults::has_current() const {
  return _internal_has_current();
}
inline void LoginResponse_AllResults::clear_current() {
  if (_impl_.current_ != nullptr) _impl_.current_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::openfoxwq::LoginResponse_Results& LoginResponse_AllResults::_internal_current() const {
  const ::openfoxwq::LoginResponse_Results* p = _impl_.current_;
  return p != nullptr ? *p : reinterpret_cast<const ::openfoxwq::LoginResponse_Results&>(
      ::openfoxwq::_LoginResponse_Results_default_instance_);
}
inline const ::openfoxwq::LoginResponse_Results& LoginResponse_AllResults::current() const {
  // @@protoc_insertion_point(field_get:openfoxwq.LoginResponse.AllResults.current)
  return _internal_current();
}
inline void LoginResponse_AllResults::unsafe_arena_set_allocated_current(
    ::openfoxwq::LoginResponse_Results* current) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.current_);
  }
  _impl_.current_ = current;
  if (current) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openfoxwq.LoginResponse.AllResults.current)
}
inline ::openfoxwq::LoginResponse_Results* LoginResponse_AllResults::release_current() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::openfoxwq::LoginResponse_Results* temp = _impl_.current_;
  _impl_.current_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::openfoxwq::LoginResponse_Results* LoginResponse_AllResults::unsafe_arena_release_current() {
  // @@protoc_insertion_point(field_release:openfoxwq.LoginResponse.AllResults.current)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::openfoxwq::LoginResponse_Results* temp = _impl_.current_;
  _impl_.current_ = nullptr;
  return temp;
}
inline ::openfoxwq::LoginResponse_Results* LoginResponse_AllResults::_internal_mutable_current() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.current_ == nullptr) {
    auto* p = CreateMaybeMessage<::openfoxwq::LoginResponse_Results>(GetArenaForAllocation());
    _impl_.current_ = p;
  }
  return _impl_.current_;
}
inline ::openfoxwq::LoginResponse_Results* LoginResponse_AllResults::mutable_current() {
  ::openfoxwq::LoginResponse_Results* _msg = _internal_mutable_current();
  // @@protoc_insertion_point(field_mutable:openfoxwq.LoginResponse.AllResults.current)
  return _msg;
}
inline void LoginResponse_AllResults::set_allocated_current(::openfoxwq::LoginResponse_Results* current) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.current_;
  }
  if (current) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(current);
    if (message_arena != submessage_arena) {
      current = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.current_ = current;
  // @@protoc_insertion_point(field_set_allocated:openfoxwq.LoginResponse.AllResults.current)
}

// optional .openfoxwq.LoginResponse.Results ranked = 10;
inline bool LoginResponse_AllResults::_internal_has_ranked() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ranked_ != nullptr);
  return value;
}
inline bool LoginResponse_AllResults::has_ranked() const {
  return _internal_has_ranked();
}
inline void LoginResponse_AllResults::clear_ranked() {
  if (_impl_.ranked_ != nullptr) _impl_.ranked_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::openfoxwq::LoginResponse_Results& LoginResponse_AllResults::_internal_ranked() const {
  const ::openfoxwq::LoginResponse_Results* p = _impl_.ranked_;
  return p != nullptr ? *p : reinterpret_cast<const ::openfoxwq::LoginResponse_Results&>(
      ::openfoxwq::_LoginResponse_Results_default_instance_);
}
inline const ::openfoxwq::LoginResponse_Results& LoginResponse_AllResults::ranked() const {
  // @@protoc_insertion_point(field_get:openfoxwq.LoginResponse.AllResults.ranked)
  return _internal_ranked();
}
inline void LoginResponse_AllResults::unsafe_arena_set_allocated_ranked(
    ::openfoxwq::LoginResponse_Results* ranked) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ranked_);
  }
  _impl_.ranked_ = ranked;
  if (ranked) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openfoxwq.LoginResponse.AllResults.ranked)
}
inline ::openfoxwq::LoginResponse_Results* LoginResponse_AllResults::release_ranked() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::openfoxwq::LoginResponse_Results* temp = _impl_.ranked_;
  _impl_.ranked_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::openfoxwq::LoginResponse_Results* LoginResponse_AllResults::unsafe_arena_release_ranked() {
  // @@protoc_insertion_point(field_release:openfoxwq.LoginResponse.AllResults.ranked)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::openfoxwq::LoginResponse_Results* temp = _impl_.ranked_;
  _impl_.ranked_ = nullptr;
  return temp;
}
inline ::openfoxwq::LoginResponse_Results* LoginResponse_AllResults::_internal_mutable_ranked() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.ranked_ == nullptr) {
    auto* p = CreateMaybeMessage<::openfoxwq::LoginResponse_Results>(GetArenaForAllocation());
    _impl_.ranked_ = p;
  }
  return _impl_.ranked_;
}
inline ::openfoxwq::LoginResponse_Results* LoginResponse_AllResults::mutable_ranked() {
  ::openfoxwq::LoginResponse_Results* _msg = _internal_mutable_ranked();
  // @@protoc_insertion_point(field_mutable:openfoxwq.LoginResponse.AllResults.ranked)
  return _msg;
}
inline void LoginResponse_AllResults::set_allocated_ranked(::openfoxwq::LoginResponse_Results* ranked) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ranked_;
  }
  if (ranked) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ranked);
    if (message_arena != submessage_arena) {
      ranked = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ranked, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.ranked_ = ranked;
  // @@protoc_insertion_point(field_set_allocated:openfoxwq.LoginResponse.AllResults.ranked)
}

// optional .openfoxwq.LoginResponse.Results free = 11;
inline bool LoginResponse_AllResults::_internal_has_free() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.free_ != nullptr);
  return value;
}
inline bool LoginResponse_AllResults::has_free() const {
  return _internal_has_free();
}
inline void LoginResponse_AllResults::clear_free() {
  if (_impl_.free_ != nullptr) _impl_.free_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::openfoxwq::LoginResponse_Results& LoginResponse_AllResults::_internal_free() const {
  const ::openfoxwq::LoginResponse_Results* p = _impl_.free_;
  return p != nullptr ? *p : reinterpret_cast<const ::openfoxwq::LoginResponse_Results&>(
      ::openfoxwq::_LoginResponse_Results_default_instance_);
}
inline const ::openfoxwq::LoginResponse_Results& LoginResponse_AllResults::free() const {
  // @@protoc_insertion_point(field_get:openfoxwq.LoginResponse.AllResults.free)
  return _internal_free();
}
inline void LoginResponse_AllResults::unsafe_arena_set_allocated_free(
    ::openfoxwq::LoginResponse_Results* free) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.free_);
  }
  _impl_.free_ = free;
  if (free) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openfoxwq.LoginResponse.AllResults.free)
}
inline ::openfoxwq::LoginResponse_Results* LoginResponse_AllResults::release_free() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::openfoxwq::LoginResponse_Results* temp = _impl_.free_;
  _impl_.free_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::openfoxwq::LoginResponse_Results* LoginResponse_AllResults::unsafe_arena_release_free() {
  // @@protoc_insertion_point(field_release:openfoxwq.LoginResponse.AllResults.free)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::openfoxwq::LoginResponse_Results* temp = _impl_.free_;
  _impl_.free_ = nullptr;
  return temp;
}
inline ::openfoxwq::LoginResponse_Results* LoginResponse_AllResults::_internal_mutable_free() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.free_ == nullptr) {
    auto* p = CreateMaybeMessage<::openfoxwq::LoginResponse_Results>(GetArenaForAllocation());
    _impl_.free_ = p;
  }
  return _impl_.free_;
}
inline ::openfoxwq::LoginResponse_Results* LoginResponse_AllResults::mutable_free() {
  ::openfoxwq::LoginResponse_Results* _msg = _internal_mutable_free();
  // @@protoc_insertion_point(field_mutable:openfoxwq.LoginResponse.AllResults.free)
  return _msg;
}
inline void LoginResponse_AllResults::set_allocated_free(::openfoxwq::LoginResponse_Results* free) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.free_;
  }
  if (free) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(free);
    if (message_arena != submessage_arena) {
      free = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, free, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.free_ = free;
  // @@protoc_insertion_point(field_set_allocated:openfoxwq.LoginResponse.AllResults.free)
}

// -------------------------------------------------------------------

// LoginResponse

// required int64 player_id = 2;
inline bool LoginResponse::_internal_has_player_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool LoginResponse::has_player_id() const {
  return _internal_has_player_id();
}
inline void LoginResponse::clear_player_id() {
  _impl_.player_id_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int64_t LoginResponse::_internal_player_id() const {
  return _impl_.player_id_;
}
inline int64_t LoginResponse::player_id() const {
  // @@protoc_insertion_point(field_get:openfoxwq.LoginResponse.player_id)
  return _internal_player_id();
}
inline void LoginResponse::_internal_set_player_id(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.player_id_ = value;
}
inline void LoginResponse::set_player_id(int64_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:openfoxwq.LoginResponse.player_id)
}

// required .openfoxwq.PlayerInfo player_info = 3;
inline bool LoginResponse::_internal_has_player_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.player_info_ != nullptr);
  return value;
}
inline bool LoginResponse::has_player_info() const {
  return _internal_has_player_info();
}
inline const ::openfoxwq::PlayerInfo& LoginResponse::_internal_player_info() const {
  const ::openfoxwq::PlayerInfo* p = _impl_.player_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::openfoxwq::PlayerInfo&>(
      ::openfoxwq::_PlayerInfo_default_instance_);
}
inline const ::openfoxwq::PlayerInfo& LoginResponse::player_info() const {
  // @@protoc_insertion_point(field_get:openfoxwq.LoginResponse.player_info)
  return _internal_player_info();
}
inline void LoginResponse::unsafe_arena_set_allocated_player_info(
    ::openfoxwq::PlayerInfo* player_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_info_);
  }
  _impl_.player_info_ = player_info;
  if (player_info) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openfoxwq.LoginResponse.player_info)
}
inline ::openfoxwq::PlayerInfo* LoginResponse::release_player_info() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::openfoxwq::PlayerInfo* temp = _impl_.player_info_;
  _impl_.player_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::openfoxwq::PlayerInfo* LoginResponse::unsafe_arena_release_player_info() {
  // @@protoc_insertion_point(field_release:openfoxwq.LoginResponse.player_info)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::openfoxwq::PlayerInfo* temp = _impl_.player_info_;
  _impl_.player_info_ = nullptr;
  return temp;
}
inline ::openfoxwq::PlayerInfo* LoginResponse::_internal_mutable_player_info() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.player_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::openfoxwq::PlayerInfo>(GetArenaForAllocation());
    _impl_.player_info_ = p;
  }
  return _impl_.player_info_;
}
inline ::openfoxwq::PlayerInfo* LoginResponse::mutable_player_info() {
  ::openfoxwq::PlayerInfo* _msg = _internal_mutable_player_info();
  // @@protoc_insertion_point(field_mutable:openfoxwq.LoginResponse.player_info)
  return _msg;
}
inline void LoginResponse::set_allocated_player_info(::openfoxwq::PlayerInfo* player_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_info_);
  }
  if (player_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_info));
    if (message_arena != submessage_arena) {
      player_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.player_info_ = player_info;
  // @@protoc_insertion_point(field_set_allocated:openfoxwq.LoginResponse.player_info)
}

// required .openfoxwq.LoginResponse.AllResults results = 4;
inline bool LoginResponse::_internal_has_results() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.results_ != nullptr);
  return value;
}
inline bool LoginResponse::has_results() const {
  return _internal_has_results();
}
inline void LoginResponse::clear_results() {
  if (_impl_.results_ != nullptr) _impl_.results_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::openfoxwq::LoginResponse_AllResults& LoginResponse::_internal_results() const {
  const ::openfoxwq::LoginResponse_AllResults* p = _impl_.results_;
  return p != nullptr ? *p : reinterpret_cast<const ::openfoxwq::LoginResponse_AllResults&>(
      ::openfoxwq::_LoginResponse_AllResults_default_instance_);
}
inline const ::openfoxwq::LoginResponse_AllResults& LoginResponse::results() const {
  // @@protoc_insertion_point(field_get:openfoxwq.LoginResponse.results)
  return _internal_results();
}
inline void LoginResponse::unsafe_arena_set_allocated_results(
    ::openfoxwq::LoginResponse_AllResults* results) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.results_);
  }
  _impl_.results_ = results;
  if (results) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openfoxwq.LoginResponse.results)
}
inline ::openfoxwq::LoginResponse_AllResults* LoginResponse::release_results() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::openfoxwq::LoginResponse_AllResults* temp = _impl_.results_;
  _impl_.results_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::openfoxwq::LoginResponse_AllResults* LoginResponse::unsafe_arena_release_results() {
  // @@protoc_insertion_point(field_release:openfoxwq.LoginResponse.results)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::openfoxwq::LoginResponse_AllResults* temp = _impl_.results_;
  _impl_.results_ = nullptr;
  return temp;
}
inline ::openfoxwq::LoginResponse_AllResults* LoginResponse::_internal_mutable_results() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.results_ == nullptr) {
    auto* p = CreateMaybeMessage<::openfoxwq::LoginResponse_AllResults>(GetArenaForAllocation());
    _impl_.results_ = p;
  }
  return _impl_.results_;
}
inline ::openfoxwq::LoginResponse_AllResults* LoginResponse::mutable_results() {
  ::openfoxwq::LoginResponse_AllResults* _msg = _internal_mutable_results();
  // @@protoc_insertion_point(field_mutable:openfoxwq.LoginResponse.results)
  return _msg;
}
inline void LoginResponse::set_allocated_results(::openfoxwq::LoginResponse_AllResults* results) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.results_;
  }
  if (results) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(results);
    if (message_arena != submessage_arena) {
      results = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, results, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.results_ = results;
  // @@protoc_insertion_point(field_set_allocated:openfoxwq.LoginResponse.results)
}

// required bytes token1 = 8;
inline bool LoginResponse::_internal_has_token1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LoginResponse::has_token1() const {
  return _internal_has_token1();
}
inline void LoginResponse::clear_token1() {
  _impl_.token1_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LoginResponse::token1() const {
  // @@protoc_insertion_point(field_get:openfoxwq.LoginResponse.token1)
  return _internal_token1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginResponse::set_token1(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.token1_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:openfoxwq.LoginResponse.token1)
}
inline std::string* LoginResponse::mutable_token1() {
  std::string* _s = _internal_mutable_token1();
  // @@protoc_insertion_point(field_mutable:openfoxwq.LoginResponse.token1)
  return _s;
}
inline const std::string& LoginResponse::_internal_token1() const {
  return _impl_.token1_.Get();
}
inline void LoginResponse::_internal_set_token1(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.token1_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginResponse::_internal_mutable_token1() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.token1_.Mutable(GetArenaForAllocation());
}
inline std::string* LoginResponse::release_token1() {
  // @@protoc_insertion_point(field_release:openfoxwq.LoginResponse.token1)
  if (!_internal_has_token1()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.token1_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token1_.IsDefault()) {
    _impl_.token1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LoginResponse::set_allocated_token1(std::string* token1) {
  if (token1 != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.token1_.SetAllocated(token1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token1_.IsDefault()) {
    _impl_.token1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:openfoxwq.LoginResponse.token1)
}

// required bytes token2 = 10;
inline bool LoginResponse::_internal_has_token2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LoginResponse::has_token2() const {
  return _internal_has_token2();
}
inline void LoginResponse::clear_token2() {
  _impl_.token2_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LoginResponse::token2() const {
  // @@protoc_insertion_point(field_get:openfoxwq.LoginResponse.token2)
  return _internal_token2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginResponse::set_token2(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.token2_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:openfoxwq.LoginResponse.token2)
}
inline std::string* LoginResponse::mutable_token2() {
  std::string* _s = _internal_mutable_token2();
  // @@protoc_insertion_point(field_mutable:openfoxwq.LoginResponse.token2)
  return _s;
}
inline const std::string& LoginResponse::_internal_token2() const {
  return _impl_.token2_.Get();
}
inline void LoginResponse::_internal_set_token2(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.token2_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginResponse::_internal_mutable_token2() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.token2_.Mutable(GetArenaForAllocation());
}
inline std::string* LoginResponse::release_token2() {
  // @@protoc_insertion_point(field_release:openfoxwq.LoginResponse.token2)
  if (!_internal_has_token2()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.token2_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token2_.IsDefault()) {
    _impl_.token2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LoginResponse::set_allocated_token2(std::string* token2) {
  if (token2 != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.token2_.SetAllocated(token2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token2_.IsDefault()) {
    _impl_.token2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:openfoxwq.LoginResponse.token2)
}

// required string bind_url = 24;
inline bool LoginResponse::_internal_has_bind_url() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LoginResponse::has_bind_url() const {
  return _internal_has_bind_url();
}
inline void LoginResponse::clear_bind_url() {
  _impl_.bind_url_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& LoginResponse::bind_url() const {
  // @@protoc_insertion_point(field_get:openfoxwq.LoginResponse.bind_url)
  return _internal_bind_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginResponse::set_bind_url(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.bind_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:openfoxwq.LoginResponse.bind_url)
}
inline std::string* LoginResponse::mutable_bind_url() {
  std::string* _s = _internal_mutable_bind_url();
  // @@protoc_insertion_point(field_mutable:openfoxwq.LoginResponse.bind_url)
  return _s;
}
inline const std::string& LoginResponse::_internal_bind_url() const {
  return _impl_.bind_url_.Get();
}
inline void LoginResponse::_internal_set_bind_url(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.bind_url_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginResponse::_internal_mutable_bind_url() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.bind_url_.Mutable(GetArenaForAllocation());
}
inline std::string* LoginResponse::release_bind_url() {
  // @@protoc_insertion_point(field_release:openfoxwq.LoginResponse.bind_url)
  if (!_internal_has_bind_url()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.bind_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bind_url_.IsDefault()) {
    _impl_.bind_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LoginResponse::set_allocated_bind_url(std::string* bind_url) {
  if (bind_url != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.bind_url_.SetAllocated(bind_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bind_url_.IsDefault()) {
    _impl_.bind_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:openfoxwq.LoginResponse.bind_url)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace openfoxwq

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fnav_2eproto
