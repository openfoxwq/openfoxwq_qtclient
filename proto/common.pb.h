// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fcommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fcommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fcommon_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fcommon_2eproto;
namespace openfoxwq {
class BroadcastInfo;
struct BroadcastInfoDefaultTypeInternal;
extern BroadcastInfoDefaultTypeInternal _BroadcastInfo_default_instance_;
class BroadcastInfo_BroadcastPlayerInfo;
struct BroadcastInfo_BroadcastPlayerInfoDefaultTypeInternal;
extern BroadcastInfo_BroadcastPlayerInfoDefaultTypeInternal _BroadcastInfo_BroadcastPlayerInfo_default_instance_;
class LobbySvrInfo;
struct LobbySvrInfoDefaultTypeInternal;
extern LobbySvrInfoDefaultTypeInternal _LobbySvrInfo_default_instance_;
class LobbySvrInfo_NameLocEntry_DoNotUse;
struct LobbySvrInfo_NameLocEntry_DoNotUseDefaultTypeInternal;
extern LobbySvrInfo_NameLocEntry_DoNotUseDefaultTypeInternal _LobbySvrInfo_NameLocEntry_DoNotUse_default_instance_;
class MatchSettings;
struct MatchSettingsDefaultTypeInternal;
extern MatchSettingsDefaultTypeInternal _MatchSettings_default_instance_;
class PlayerInfo;
struct PlayerInfoDefaultTypeInternal;
extern PlayerInfoDefaultTypeInternal _PlayerInfo_default_instance_;
class ProxyLineInfo;
struct ProxyLineInfoDefaultTypeInternal;
extern ProxyLineInfoDefaultTypeInternal _ProxyLineInfo_default_instance_;
class ProxyLineInfo_ProxyAddressInfo;
struct ProxyLineInfo_ProxyAddressInfoDefaultTypeInternal;
extern ProxyLineInfo_ProxyAddressInfoDefaultTypeInternal _ProxyLineInfo_ProxyAddressInfo_default_instance_;
class RoomId;
struct RoomIdDefaultTypeInternal;
extern RoomIdDefaultTypeInternal _RoomId_default_instance_;
class RoomSettings;
struct RoomSettingsDefaultTypeInternal;
extern RoomSettingsDefaultTypeInternal _RoomSettings_default_instance_;
class VersionInfo;
struct VersionInfoDefaultTypeInternal;
extern VersionInfoDefaultTypeInternal _VersionInfo_default_instance_;
}  // namespace openfoxwq
PROTOBUF_NAMESPACE_OPEN
template<> ::openfoxwq::BroadcastInfo* Arena::CreateMaybeMessage<::openfoxwq::BroadcastInfo>(Arena*);
template<> ::openfoxwq::BroadcastInfo_BroadcastPlayerInfo* Arena::CreateMaybeMessage<::openfoxwq::BroadcastInfo_BroadcastPlayerInfo>(Arena*);
template<> ::openfoxwq::LobbySvrInfo* Arena::CreateMaybeMessage<::openfoxwq::LobbySvrInfo>(Arena*);
template<> ::openfoxwq::LobbySvrInfo_NameLocEntry_DoNotUse* Arena::CreateMaybeMessage<::openfoxwq::LobbySvrInfo_NameLocEntry_DoNotUse>(Arena*);
template<> ::openfoxwq::MatchSettings* Arena::CreateMaybeMessage<::openfoxwq::MatchSettings>(Arena*);
template<> ::openfoxwq::PlayerInfo* Arena::CreateMaybeMessage<::openfoxwq::PlayerInfo>(Arena*);
template<> ::openfoxwq::ProxyLineInfo* Arena::CreateMaybeMessage<::openfoxwq::ProxyLineInfo>(Arena*);
template<> ::openfoxwq::ProxyLineInfo_ProxyAddressInfo* Arena::CreateMaybeMessage<::openfoxwq::ProxyLineInfo_ProxyAddressInfo>(Arena*);
template<> ::openfoxwq::RoomId* Arena::CreateMaybeMessage<::openfoxwq::RoomId>(Arena*);
template<> ::openfoxwq::RoomSettings* Arena::CreateMaybeMessage<::openfoxwq::RoomSettings>(Arena*);
template<> ::openfoxwq::VersionInfo* Arena::CreateMaybeMessage<::openfoxwq::VersionInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace openfoxwq {

enum BroadcastInfo_BroadcastType : int {
  BroadcastInfo_BroadcastType_RT_UNKNOWN = 0,
  BroadcastInfo_BroadcastType_RT_MATCH = 1,
  BroadcastInfo_BroadcastType_RT_BROADCAST = 4,
  BroadcastInfo_BroadcastType_RT_COMMENTARY = 5,
  BroadcastInfo_BroadcastType_RT_CHAMPIONSHIP = 6
};
bool BroadcastInfo_BroadcastType_IsValid(int value);
constexpr BroadcastInfo_BroadcastType BroadcastInfo_BroadcastType_BroadcastType_MIN = BroadcastInfo_BroadcastType_RT_UNKNOWN;
constexpr BroadcastInfo_BroadcastType BroadcastInfo_BroadcastType_BroadcastType_MAX = BroadcastInfo_BroadcastType_RT_CHAMPIONSHIP;
constexpr int BroadcastInfo_BroadcastType_BroadcastType_ARRAYSIZE = BroadcastInfo_BroadcastType_BroadcastType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BroadcastInfo_BroadcastType_descriptor();
template<typename T>
inline const std::string& BroadcastInfo_BroadcastType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BroadcastInfo_BroadcastType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BroadcastInfo_BroadcastType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BroadcastInfo_BroadcastType_descriptor(), enum_t_value);
}
inline bool BroadcastInfo_BroadcastType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BroadcastInfo_BroadcastType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BroadcastInfo_BroadcastType>(
    BroadcastInfo_BroadcastType_descriptor(), name, value);
}
enum BroadcastInfo_BroadcastState : int {
  BroadcastInfo_BroadcastState_RS_UNKNOWN = 0,
  BroadcastInfo_BroadcastState_RS_OPENING = 1,
  BroadcastInfo_BroadcastState_RS_1PERIOD = 2,
  BroadcastInfo_BroadcastState_RS_MIDDLEGAME = 3,
  BroadcastInfo_BroadcastState_RS_ENDGAME = 4,
  BroadcastInfo_BroadcastState_RS_END = 5,
  BroadcastInfo_BroadcastState_RS_REVIEW = 6
};
bool BroadcastInfo_BroadcastState_IsValid(int value);
constexpr BroadcastInfo_BroadcastState BroadcastInfo_BroadcastState_BroadcastState_MIN = BroadcastInfo_BroadcastState_RS_UNKNOWN;
constexpr BroadcastInfo_BroadcastState BroadcastInfo_BroadcastState_BroadcastState_MAX = BroadcastInfo_BroadcastState_RS_REVIEW;
constexpr int BroadcastInfo_BroadcastState_BroadcastState_ARRAYSIZE = BroadcastInfo_BroadcastState_BroadcastState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BroadcastInfo_BroadcastState_descriptor();
template<typename T>
inline const std::string& BroadcastInfo_BroadcastState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BroadcastInfo_BroadcastState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BroadcastInfo_BroadcastState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BroadcastInfo_BroadcastState_descriptor(), enum_t_value);
}
inline bool BroadcastInfo_BroadcastState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BroadcastInfo_BroadcastState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BroadcastInfo_BroadcastState>(
    BroadcastInfo_BroadcastState_descriptor(), name, value);
}
enum Color : int {
  COL_NONE = 0,
  COL_BLACK = 1,
  COL_WHITE = 2
};
bool Color_IsValid(int value);
constexpr Color Color_MIN = COL_NONE;
constexpr Color Color_MAX = COL_WHITE;
constexpr int Color_ARRAYSIZE = Color_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Color_descriptor();
template<typename T>
inline const std::string& Color_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Color>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Color_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Color_descriptor(), enum_t_value);
}
inline bool Color_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Color* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Color>(
    Color_descriptor(), name, value);
}
enum Rank : int {
  RANK_18K = 0,
  RANK_17K = 1,
  RANK_16K = 2,
  RANK_15K = 3,
  RANK_14K = 4,
  RANK_13K = 5,
  RANK_12K = 6,
  RANK_11K = 7,
  RANK_10K = 8,
  RANK_9K = 9,
  RANK_8K = 10,
  RANK_7K = 11,
  RANK_6K = 12,
  RANK_5K = 13,
  RANK_4K = 14,
  RANK_3K = 15,
  RANK_2K = 16,
  RANK_1K = 17,
  RANK_1D = 18,
  RANK_2D = 19,
  RANK_3D = 20,
  RANK_4D = 21,
  RANK_5D = 22,
  RANK_6D = 23,
  RANK_7D = 24,
  RANK_8D = 25,
  RANK_9D = 26,
  RANK_10D = 27,
  RANK_1P = 100,
  RANK_2P = 101,
  RANK_3P = 102,
  RANK_4P = 103,
  RANK_5P = 104,
  RANK_6P = 105,
  RANK_7P = 106,
  RANK_8P = 107,
  RANK_9P = 108,
  RANK_10P = 109
};
bool Rank_IsValid(int value);
constexpr Rank Rank_MIN = RANK_18K;
constexpr Rank Rank_MAX = RANK_10P;
constexpr int Rank_ARRAYSIZE = Rank_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Rank_descriptor();
template<typename T>
inline const std::string& Rank_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Rank>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Rank_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Rank_descriptor(), enum_t_value);
}
inline bool Rank_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Rank* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Rank>(
    Rank_descriptor(), name, value);
}
enum Country : int {
  UNKNOWN = 0,
  USA = 1,
  RUSSIA = 7,
  SOUTHAFRICA = 27,
  GREECE = 30,
  NETHERLANDS = 31,
  BELGIUM = 32,
  FRANCE = 33,
  HUNGARY = 36,
  ITALY = 39,
  AUSTRIA = 43,
  UK = 44,
  SWEDEN = 46,
  NORWAY = 47,
  MEXICO = 52,
  CHILE = 56,
  MALAYSIA = 60,
  AUSTRALIA = 61,
  INDONESIA = 62,
  PHILIPPINES = 63,
  NEWZEALAND = 64,
  SINGAPORE = 65,
  THAILAND = 66,
  JAPAN = 81,
  KOREA = 82,
  TAIWAN = 83,
  VIETNAM = 84,
  CHINA = 86,
  TURKEY = 90,
  NIGERIA = 234,
  GERMANY = 349,
  PORTUGAL = 351,
  ALBANIA = 355,
  BULGARIA = 359,
  LATVIA = 371,
  BELARUS = 375,
  UKRAINE = 380,
  HONGKONG = 852,
  MACAU = 853,
  SAUDIARABIA = 967,
  ISRAEL = 973,
  CANADA = 11111
};
bool Country_IsValid(int value);
constexpr Country Country_MIN = UNKNOWN;
constexpr Country Country_MAX = CANADA;
constexpr int Country_ARRAYSIZE = Country_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Country_descriptor();
template<typename T>
inline const std::string& Country_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Country>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Country_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Country_descriptor(), enum_t_value);
}
inline bool Country_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Country* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Country>(
    Country_descriptor(), name, value);
}
enum PlayerStatus : int {
  PSTATUS_IDLE = 0,
  PSTATUS_MATCH = 1,
  PSTATUS_WATCH = 2
};
bool PlayerStatus_IsValid(int value);
constexpr PlayerStatus PlayerStatus_MIN = PSTATUS_IDLE;
constexpr PlayerStatus PlayerStatus_MAX = PSTATUS_WATCH;
constexpr int PlayerStatus_ARRAYSIZE = PlayerStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlayerStatus_descriptor();
template<typename T>
inline const std::string& PlayerStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PlayerStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PlayerStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PlayerStatus_descriptor(), enum_t_value);
}
inline bool PlayerStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PlayerStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PlayerStatus>(
    PlayerStatus_descriptor(), name, value);
}
enum Sex : int {
  SEX_MALE = 0,
  SEX_FEMALE = 1
};
bool Sex_IsValid(int value);
constexpr Sex Sex_MIN = SEX_MALE;
constexpr Sex Sex_MAX = SEX_FEMALE;
constexpr int Sex_ARRAYSIZE = Sex_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Sex_descriptor();
template<typename T>
inline const std::string& Sex_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Sex>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Sex_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Sex_descriptor(), enum_t_value);
}
inline bool Sex_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Sex* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Sex>(
    Sex_descriptor(), name, value);
}
enum Flair : int {
  FLAIR_NONE = 0,
  FLAIR_PRO = 1,
  FLAIR_GOLD_CROWN = 2,
  FLAIR_TOP_AMATEUR = 3,
  FLAIR_SILVER_CROWN = 4,
  FLAIR_ELITE_AMATEUR = 5
};
bool Flair_IsValid(int value);
constexpr Flair Flair_MIN = FLAIR_NONE;
constexpr Flair Flair_MAX = FLAIR_ELITE_AMATEUR;
constexpr int Flair_ARRAYSIZE = Flair_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Flair_descriptor();
template<typename T>
inline const std::string& Flair_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Flair>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Flair_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Flair_descriptor(), enum_t_value);
}
inline bool Flair_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Flair* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Flair>(
    Flair_descriptor(), name, value);
}
enum MembershipType : int {
  MEMBERSHIP_NONE = 0,
  MEMBERSHIP_SILVER = 1,
  MEMBERSHIP_GOLD = 2
};
bool MembershipType_IsValid(int value);
constexpr MembershipType MembershipType_MIN = MEMBERSHIP_NONE;
constexpr MembershipType MembershipType_MAX = MEMBERSHIP_GOLD;
constexpr int MembershipType_ARRAYSIZE = MembershipType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MembershipType_descriptor();
template<typename T>
inline const std::string& MembershipType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MembershipType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MembershipType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MembershipType_descriptor(), enum_t_value);
}
inline bool MembershipType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MembershipType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MembershipType>(
    MembershipType_descriptor(), name, value);
}
// ===================================================================

class VersionInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openfoxwq.VersionInfo) */ {
 public:
  inline VersionInfo() : VersionInfo(nullptr) {}
  ~VersionInfo() override;
  explicit PROTOBUF_CONSTEXPR VersionInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VersionInfo(const VersionInfo& from);
  VersionInfo(VersionInfo&& from) noexcept
    : VersionInfo() {
    *this = ::std::move(from);
  }

  inline VersionInfo& operator=(const VersionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline VersionInfo& operator=(VersionInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VersionInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const VersionInfo* internal_default_instance() {
    return reinterpret_cast<const VersionInfo*>(
               &_VersionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VersionInfo& a, VersionInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(VersionInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VersionInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VersionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VersionInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VersionInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VersionInfo& from) {
    VersionInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VersionInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openfoxwq.VersionInfo";
  }
  protected:
  explicit VersionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQgiFieldNumber = 6,
    kQgiHashFieldNumber = 7,
    kUpdateInfoFieldNumber = 3,
    kInstallUrlFieldNumber = 5,
    kVersion1FieldNumber = 1,
    kVersion2FieldNumber = 2,
  };
  // repeated string qgi = 6;
  int qgi_size() const;
  private:
  int _internal_qgi_size() const;
  public:
  void clear_qgi();
  const std::string& qgi(int index) const;
  std::string* mutable_qgi(int index);
  void set_qgi(int index, const std::string& value);
  void set_qgi(int index, std::string&& value);
  void set_qgi(int index, const char* value);
  void set_qgi(int index, const char* value, size_t size);
  std::string* add_qgi();
  void add_qgi(const std::string& value);
  void add_qgi(std::string&& value);
  void add_qgi(const char* value);
  void add_qgi(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& qgi() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_qgi();
  private:
  const std::string& _internal_qgi(int index) const;
  std::string* _internal_add_qgi();
  public:

  // repeated string qgi_hash = 7;
  int qgi_hash_size() const;
  private:
  int _internal_qgi_hash_size() const;
  public:
  void clear_qgi_hash();
  const std::string& qgi_hash(int index) const;
  std::string* mutable_qgi_hash(int index);
  void set_qgi_hash(int index, const std::string& value);
  void set_qgi_hash(int index, std::string&& value);
  void set_qgi_hash(int index, const char* value);
  void set_qgi_hash(int index, const char* value, size_t size);
  std::string* add_qgi_hash();
  void add_qgi_hash(const std::string& value);
  void add_qgi_hash(std::string&& value);
  void add_qgi_hash(const char* value);
  void add_qgi_hash(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& qgi_hash() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_qgi_hash();
  private:
  const std::string& _internal_qgi_hash(int index) const;
  std::string* _internal_add_qgi_hash();
  public:

  // optional string update_info = 3;
  bool has_update_info() const;
  private:
  bool _internal_has_update_info() const;
  public:
  void clear_update_info();
  const std::string& update_info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_update_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_update_info();
  PROTOBUF_NODISCARD std::string* release_update_info();
  void set_allocated_update_info(std::string* update_info);
  private:
  const std::string& _internal_update_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_update_info(const std::string& value);
  std::string* _internal_mutable_update_info();
  public:

  // optional string install_url = 5;
  bool has_install_url() const;
  private:
  bool _internal_has_install_url() const;
  public:
  void clear_install_url();
  const std::string& install_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_install_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_install_url();
  PROTOBUF_NODISCARD std::string* release_install_url();
  void set_allocated_install_url(std::string* install_url);
  private:
  const std::string& _internal_install_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_install_url(const std::string& value);
  std::string* _internal_mutable_install_url();
  public:

  // required int64 version1 = 1;
  bool has_version1() const;
  private:
  bool _internal_has_version1() const;
  public:
  void clear_version1();
  int64_t version1() const;
  void set_version1(int64_t value);
  private:
  int64_t _internal_version1() const;
  void _internal_set_version1(int64_t value);
  public:

  // required int64 version2 = 2;
  bool has_version2() const;
  private:
  bool _internal_has_version2() const;
  public:
  void clear_version2();
  int64_t version2() const;
  void set_version2(int64_t value);
  private:
  int64_t _internal_version2() const;
  void _internal_set_version2(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:openfoxwq.VersionInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> qgi_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> qgi_hash_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr update_info_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr install_url_;
    int64_t version1_;
    int64_t version2_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class ProxyLineInfo_ProxyAddressInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openfoxwq.ProxyLineInfo.ProxyAddressInfo) */ {
 public:
  inline ProxyLineInfo_ProxyAddressInfo() : ProxyLineInfo_ProxyAddressInfo(nullptr) {}
  ~ProxyLineInfo_ProxyAddressInfo() override;
  explicit PROTOBUF_CONSTEXPR ProxyLineInfo_ProxyAddressInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProxyLineInfo_ProxyAddressInfo(const ProxyLineInfo_ProxyAddressInfo& from);
  ProxyLineInfo_ProxyAddressInfo(ProxyLineInfo_ProxyAddressInfo&& from) noexcept
    : ProxyLineInfo_ProxyAddressInfo() {
    *this = ::std::move(from);
  }

  inline ProxyLineInfo_ProxyAddressInfo& operator=(const ProxyLineInfo_ProxyAddressInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProxyLineInfo_ProxyAddressInfo& operator=(ProxyLineInfo_ProxyAddressInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProxyLineInfo_ProxyAddressInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProxyLineInfo_ProxyAddressInfo* internal_default_instance() {
    return reinterpret_cast<const ProxyLineInfo_ProxyAddressInfo*>(
               &_ProxyLineInfo_ProxyAddressInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProxyLineInfo_ProxyAddressInfo& a, ProxyLineInfo_ProxyAddressInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ProxyLineInfo_ProxyAddressInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProxyLineInfo_ProxyAddressInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProxyLineInfo_ProxyAddressInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProxyLineInfo_ProxyAddressInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProxyLineInfo_ProxyAddressInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProxyLineInfo_ProxyAddressInfo& from) {
    ProxyLineInfo_ProxyAddressInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProxyLineInfo_ProxyAddressInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openfoxwq.ProxyLineInfo.ProxyAddressInfo";
  }
  protected:
  explicit ProxyLineInfo_ProxyAddressInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHost1FieldNumber = 1,
    kHost2FieldNumber = 3,
    kPort1FieldNumber = 2,
    kPort2FieldNumber = 4,
  };
  // required string host1 = 1;
  bool has_host1() const;
  private:
  bool _internal_has_host1() const;
  public:
  void clear_host1();
  const std::string& host1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_host1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_host1();
  PROTOBUF_NODISCARD std::string* release_host1();
  void set_allocated_host1(std::string* host1);
  private:
  const std::string& _internal_host1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host1(const std::string& value);
  std::string* _internal_mutable_host1();
  public:

  // required string host2 = 3;
  bool has_host2() const;
  private:
  bool _internal_has_host2() const;
  public:
  void clear_host2();
  const std::string& host2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_host2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_host2();
  PROTOBUF_NODISCARD std::string* release_host2();
  void set_allocated_host2(std::string* host2);
  private:
  const std::string& _internal_host2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host2(const std::string& value);
  std::string* _internal_mutable_host2();
  public:

  // required int64 port1 = 2;
  bool has_port1() const;
  private:
  bool _internal_has_port1() const;
  public:
  void clear_port1();
  int64_t port1() const;
  void set_port1(int64_t value);
  private:
  int64_t _internal_port1() const;
  void _internal_set_port1(int64_t value);
  public:

  // required int64 port2 = 4;
  bool has_port2() const;
  private:
  bool _internal_has_port2() const;
  public:
  void clear_port2();
  int64_t port2() const;
  void set_port2(int64_t value);
  private:
  int64_t _internal_port2() const;
  void _internal_set_port2(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:openfoxwq.ProxyLineInfo.ProxyAddressInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host1_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host2_;
    int64_t port1_;
    int64_t port2_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class ProxyLineInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openfoxwq.ProxyLineInfo) */ {
 public:
  inline ProxyLineInfo() : ProxyLineInfo(nullptr) {}
  ~ProxyLineInfo() override;
  explicit PROTOBUF_CONSTEXPR ProxyLineInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProxyLineInfo(const ProxyLineInfo& from);
  ProxyLineInfo(ProxyLineInfo&& from) noexcept
    : ProxyLineInfo() {
    *this = ::std::move(from);
  }

  inline ProxyLineInfo& operator=(const ProxyLineInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProxyLineInfo& operator=(ProxyLineInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProxyLineInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProxyLineInfo* internal_default_instance() {
    return reinterpret_cast<const ProxyLineInfo*>(
               &_ProxyLineInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ProxyLineInfo& a, ProxyLineInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ProxyLineInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProxyLineInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProxyLineInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProxyLineInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProxyLineInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProxyLineInfo& from) {
    ProxyLineInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProxyLineInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openfoxwq.ProxyLineInfo";
  }
  protected:
  explicit ProxyLineInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ProxyLineInfo_ProxyAddressInfo ProxyAddressInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kAddressInfoFieldNumber = 3,
    kIndexFieldNumber = 1,
  };
  // required string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required .openfoxwq.ProxyLineInfo.ProxyAddressInfo address_info = 3;
  bool has_address_info() const;
  private:
  bool _internal_has_address_info() const;
  public:
  void clear_address_info();
  const ::openfoxwq::ProxyLineInfo_ProxyAddressInfo& address_info() const;
  PROTOBUF_NODISCARD ::openfoxwq::ProxyLineInfo_ProxyAddressInfo* release_address_info();
  ::openfoxwq::ProxyLineInfo_ProxyAddressInfo* mutable_address_info();
  void set_allocated_address_info(::openfoxwq::ProxyLineInfo_ProxyAddressInfo* address_info);
  private:
  const ::openfoxwq::ProxyLineInfo_ProxyAddressInfo& _internal_address_info() const;
  ::openfoxwq::ProxyLineInfo_ProxyAddressInfo* _internal_mutable_address_info();
  public:
  void unsafe_arena_set_allocated_address_info(
      ::openfoxwq::ProxyLineInfo_ProxyAddressInfo* address_info);
  ::openfoxwq::ProxyLineInfo_ProxyAddressInfo* unsafe_arena_release_address_info();

  // required int64 index = 1;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  int64_t index() const;
  void set_index(int64_t value);
  private:
  int64_t _internal_index() const;
  void _internal_set_index(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:openfoxwq.ProxyLineInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::openfoxwq::ProxyLineInfo_ProxyAddressInfo* address_info_;
    int64_t index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class LobbySvrInfo_NameLocEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<LobbySvrInfo_NameLocEntry_DoNotUse, 
    int32_t, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<LobbySvrInfo_NameLocEntry_DoNotUse, 
    int32_t, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  LobbySvrInfo_NameLocEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR LobbySvrInfo_NameLocEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit LobbySvrInfo_NameLocEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const LobbySvrInfo_NameLocEntry_DoNotUse& other);
  static const LobbySvrInfo_NameLocEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const LobbySvrInfo_NameLocEntry_DoNotUse*>(&_LobbySvrInfo_NameLocEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "openfoxwq.LobbySvrInfo.NameLocEntry.value");
#else
    (void) s;
#endif
    return true;
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_proto_2fcommon_2eproto;
};

// -------------------------------------------------------------------

class LobbySvrInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openfoxwq.LobbySvrInfo) */ {
 public:
  inline LobbySvrInfo() : LobbySvrInfo(nullptr) {}
  ~LobbySvrInfo() override;
  explicit PROTOBUF_CONSTEXPR LobbySvrInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LobbySvrInfo(const LobbySvrInfo& from);
  LobbySvrInfo(LobbySvrInfo&& from) noexcept
    : LobbySvrInfo() {
    *this = ::std::move(from);
  }

  inline LobbySvrInfo& operator=(const LobbySvrInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline LobbySvrInfo& operator=(LobbySvrInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LobbySvrInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const LobbySvrInfo* internal_default_instance() {
    return reinterpret_cast<const LobbySvrInfo*>(
               &_LobbySvrInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LobbySvrInfo& a, LobbySvrInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(LobbySvrInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LobbySvrInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LobbySvrInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LobbySvrInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LobbySvrInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LobbySvrInfo& from) {
    LobbySvrInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LobbySvrInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openfoxwq.LobbySvrInfo";
  }
  protected:
  explicit LobbySvrInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kNameLocFieldNumber = 23,
    kNameFieldNumber = 2,
    kBroadcastHostFieldNumber = 5,
    kUnknownHost1FieldNumber = 13,
    kUnknownHost2FieldNumber = 15,
    kUnknownHost3FieldNumber = 17,
    kUnknownHost4FieldNumber = 19,
    kPlayHostFieldNumber = 21,
    kNumPlayersFieldNumber = 3,
    kNumMatchesFieldNumber = 4,
    kUnknownField7FieldNumber = 7,
    kUnknownField8FieldNumber = 8,
    kBroadcastPortFieldNumber = 6,
    kUnknownPort1FieldNumber = 14,
    kUnknownPort2FieldNumber = 16,
    kUnknownPort3FieldNumber = 18,
    kUnknownPort4FieldNumber = 20,
    kPlayPortFieldNumber = 22,
  };
  // map<int32, string> name_loc = 23;
  int name_loc_size() const;
  private:
  int _internal_name_loc_size() const;
  public:
  void clear_name_loc();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >&
      _internal_name_loc() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >*
      _internal_mutable_name_loc();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >&
      name_loc() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >*
      mutable_name_loc();

  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string broadcast_host = 5;
  bool has_broadcast_host() const;
  private:
  bool _internal_has_broadcast_host() const;
  public:
  void clear_broadcast_host();
  const std::string& broadcast_host() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_broadcast_host(ArgT0&& arg0, ArgT... args);
  std::string* mutable_broadcast_host();
  PROTOBUF_NODISCARD std::string* release_broadcast_host();
  void set_allocated_broadcast_host(std::string* broadcast_host);
  private:
  const std::string& _internal_broadcast_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_broadcast_host(const std::string& value);
  std::string* _internal_mutable_broadcast_host();
  public:

  // optional string unknown_host_1 = 13;
  bool has_unknown_host_1() const;
  private:
  bool _internal_has_unknown_host_1() const;
  public:
  void clear_unknown_host_1();
  const std::string& unknown_host_1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unknown_host_1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unknown_host_1();
  PROTOBUF_NODISCARD std::string* release_unknown_host_1();
  void set_allocated_unknown_host_1(std::string* unknown_host_1);
  private:
  const std::string& _internal_unknown_host_1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unknown_host_1(const std::string& value);
  std::string* _internal_mutable_unknown_host_1();
  public:

  // optional string unknown_host_2 = 15;
  bool has_unknown_host_2() const;
  private:
  bool _internal_has_unknown_host_2() const;
  public:
  void clear_unknown_host_2();
  const std::string& unknown_host_2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unknown_host_2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unknown_host_2();
  PROTOBUF_NODISCARD std::string* release_unknown_host_2();
  void set_allocated_unknown_host_2(std::string* unknown_host_2);
  private:
  const std::string& _internal_unknown_host_2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unknown_host_2(const std::string& value);
  std::string* _internal_mutable_unknown_host_2();
  public:

  // optional string unknown_host_3 = 17;
  bool has_unknown_host_3() const;
  private:
  bool _internal_has_unknown_host_3() const;
  public:
  void clear_unknown_host_3();
  const std::string& unknown_host_3() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unknown_host_3(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unknown_host_3();
  PROTOBUF_NODISCARD std::string* release_unknown_host_3();
  void set_allocated_unknown_host_3(std::string* unknown_host_3);
  private:
  const std::string& _internal_unknown_host_3() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unknown_host_3(const std::string& value);
  std::string* _internal_mutable_unknown_host_3();
  public:

  // optional string unknown_host_4 = 19;
  bool has_unknown_host_4() const;
  private:
  bool _internal_has_unknown_host_4() const;
  public:
  void clear_unknown_host_4();
  const std::string& unknown_host_4() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unknown_host_4(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unknown_host_4();
  PROTOBUF_NODISCARD std::string* release_unknown_host_4();
  void set_allocated_unknown_host_4(std::string* unknown_host_4);
  private:
  const std::string& _internal_unknown_host_4() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unknown_host_4(const std::string& value);
  std::string* _internal_mutable_unknown_host_4();
  public:

  // optional string play_host = 21;
  bool has_play_host() const;
  private:
  bool _internal_has_play_host() const;
  public:
  void clear_play_host();
  const std::string& play_host() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_play_host(ArgT0&& arg0, ArgT... args);
  std::string* mutable_play_host();
  PROTOBUF_NODISCARD std::string* release_play_host();
  void set_allocated_play_host(std::string* play_host);
  private:
  const std::string& _internal_play_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_play_host(const std::string& value);
  std::string* _internal_mutable_play_host();
  public:

  // optional int64 num_players = 3;
  bool has_num_players() const;
  private:
  bool _internal_has_num_players() const;
  public:
  void clear_num_players();
  int64_t num_players() const;
  void set_num_players(int64_t value);
  private:
  int64_t _internal_num_players() const;
  void _internal_set_num_players(int64_t value);
  public:

  // optional int64 num_matches = 4;
  bool has_num_matches() const;
  private:
  bool _internal_has_num_matches() const;
  public:
  void clear_num_matches();
  int64_t num_matches() const;
  void set_num_matches(int64_t value);
  private:
  int64_t _internal_num_matches() const;
  void _internal_set_num_matches(int64_t value);
  public:

  // optional int64 unknown_field_7 = 7;
  bool has_unknown_field_7() const;
  private:
  bool _internal_has_unknown_field_7() const;
  public:
  void clear_unknown_field_7();
  int64_t unknown_field_7() const;
  void set_unknown_field_7(int64_t value);
  private:
  int64_t _internal_unknown_field_7() const;
  void _internal_set_unknown_field_7(int64_t value);
  public:

  // optional int64 unknown_field_8 = 8;
  bool has_unknown_field_8() const;
  private:
  bool _internal_has_unknown_field_8() const;
  public:
  void clear_unknown_field_8();
  int64_t unknown_field_8() const;
  void set_unknown_field_8(int64_t value);
  private:
  int64_t _internal_unknown_field_8() const;
  void _internal_set_unknown_field_8(int64_t value);
  public:

  // optional int32 broadcast_port = 6;
  bool has_broadcast_port() const;
  private:
  bool _internal_has_broadcast_port() const;
  public:
  void clear_broadcast_port();
  int32_t broadcast_port() const;
  void set_broadcast_port(int32_t value);
  private:
  int32_t _internal_broadcast_port() const;
  void _internal_set_broadcast_port(int32_t value);
  public:

  // optional int32 unknown_port_1 = 14;
  bool has_unknown_port_1() const;
  private:
  bool _internal_has_unknown_port_1() const;
  public:
  void clear_unknown_port_1();
  int32_t unknown_port_1() const;
  void set_unknown_port_1(int32_t value);
  private:
  int32_t _internal_unknown_port_1() const;
  void _internal_set_unknown_port_1(int32_t value);
  public:

  // optional int32 unknown_port_2 = 16;
  bool has_unknown_port_2() const;
  private:
  bool _internal_has_unknown_port_2() const;
  public:
  void clear_unknown_port_2();
  int32_t unknown_port_2() const;
  void set_unknown_port_2(int32_t value);
  private:
  int32_t _internal_unknown_port_2() const;
  void _internal_set_unknown_port_2(int32_t value);
  public:

  // optional int32 unknown_port_3 = 18;
  bool has_unknown_port_3() const;
  private:
  bool _internal_has_unknown_port_3() const;
  public:
  void clear_unknown_port_3();
  int32_t unknown_port_3() const;
  void set_unknown_port_3(int32_t value);
  private:
  int32_t _internal_unknown_port_3() const;
  void _internal_set_unknown_port_3(int32_t value);
  public:

  // optional int32 unknown_port_4 = 20;
  bool has_unknown_port_4() const;
  private:
  bool _internal_has_unknown_port_4() const;
  public:
  void clear_unknown_port_4();
  int32_t unknown_port_4() const;
  void set_unknown_port_4(int32_t value);
  private:
  int32_t _internal_unknown_port_4() const;
  void _internal_set_unknown_port_4(int32_t value);
  public:

  // optional int32 play_port = 22;
  bool has_play_port() const;
  private:
  bool _internal_has_play_port() const;
  public:
  void clear_play_port();
  int32_t play_port() const;
  void set_play_port(int32_t value);
  private:
  int32_t _internal_play_port() const;
  void _internal_set_play_port(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:openfoxwq.LobbySvrInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        LobbySvrInfo_NameLocEntry_DoNotUse,
        int32_t, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> name_loc_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr broadcast_host_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unknown_host_1_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unknown_host_2_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unknown_host_3_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unknown_host_4_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr play_host_;
    int64_t num_players_;
    int64_t num_matches_;
    int64_t unknown_field_7_;
    int64_t unknown_field_8_;
    int32_t broadcast_port_;
    int32_t unknown_port_1_;
    int32_t unknown_port_2_;
    int32_t unknown_port_3_;
    int32_t unknown_port_4_;
    int32_t play_port_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class PlayerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openfoxwq.PlayerInfo) */ {
 public:
  inline PlayerInfo() : PlayerInfo(nullptr) {}
  ~PlayerInfo() override;
  explicit PROTOBUF_CONSTEXPR PlayerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerInfo(const PlayerInfo& from);
  PlayerInfo(PlayerInfo&& from) noexcept
    : PlayerInfo() {
    *this = ::std::move(from);
  }

  inline PlayerInfo& operator=(const PlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerInfo& operator=(PlayerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerInfo* internal_default_instance() {
    return reinterpret_cast<const PlayerInfo*>(
               &_PlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PlayerInfo& a, PlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerInfo& from) {
    PlayerInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openfoxwq.PlayerInfo";
  }
  protected:
  explicit PlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kNameNativeFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
    kRankFieldNumber = 4,
    kCountryFieldNumber = 5,
    kClubIdFieldNumber = 6,
    kUnknownField8FieldNumber = 8,
    kRankedWinsFieldNumber = 10,
    kRankedLossesFieldNumber = 11,
    kStatusFieldNumber = 9,
    kSexFieldNumber = 14,
    kUnknownField13FieldNumber = 13,
    kFoxcoinFieldNumber = 21,
    kFlairFieldNumber = 26,
    kAcceptingMatchesFieldNumber = 7,
    kAiFieldNumber = 36,
    kAmateur6DFieldNumber = 37,
    kMembershipValidUntilFieldNumber = 28,
    kMembershipTypeFieldNumber = 27,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string name_native = 3;
  bool has_name_native() const;
  private:
  bool _internal_has_name_native() const;
  public:
  void clear_name_native();
  const std::string& name_native() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name_native(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name_native();
  PROTOBUF_NODISCARD std::string* release_name_native();
  void set_allocated_name_native(std::string* name_native);
  private:
  const std::string& _internal_name_native() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name_native(const std::string& value);
  std::string* _internal_mutable_name_native();
  public:

  // required int64 player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  int64_t player_id() const;
  void set_player_id(int64_t value);
  private:
  int64_t _internal_player_id() const;
  void _internal_set_player_id(int64_t value);
  public:

  // optional .openfoxwq.Rank rank = 4;
  bool has_rank() const;
  private:
  bool _internal_has_rank() const;
  public:
  void clear_rank();
  ::openfoxwq::Rank rank() const;
  void set_rank(::openfoxwq::Rank value);
  private:
  ::openfoxwq::Rank _internal_rank() const;
  void _internal_set_rank(::openfoxwq::Rank value);
  public:

  // optional .openfoxwq.Country country = 5;
  bool has_country() const;
  private:
  bool _internal_has_country() const;
  public:
  void clear_country();
  ::openfoxwq::Country country() const;
  void set_country(::openfoxwq::Country value);
  private:
  ::openfoxwq::Country _internal_country() const;
  void _internal_set_country(::openfoxwq::Country value);
  public:

  // optional int64 club_id = 6;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  int64_t club_id() const;
  void set_club_id(int64_t value);
  private:
  int64_t _internal_club_id() const;
  void _internal_set_club_id(int64_t value);
  public:

  // optional int64 unknown_field_8 = 8;
  bool has_unknown_field_8() const;
  private:
  bool _internal_has_unknown_field_8() const;
  public:
  void clear_unknown_field_8();
  int64_t unknown_field_8() const;
  void set_unknown_field_8(int64_t value);
  private:
  int64_t _internal_unknown_field_8() const;
  void _internal_set_unknown_field_8(int64_t value);
  public:

  // optional int64 ranked_wins = 10;
  bool has_ranked_wins() const;
  private:
  bool _internal_has_ranked_wins() const;
  public:
  void clear_ranked_wins();
  int64_t ranked_wins() const;
  void set_ranked_wins(int64_t value);
  private:
  int64_t _internal_ranked_wins() const;
  void _internal_set_ranked_wins(int64_t value);
  public:

  // optional int64 ranked_losses = 11;
  bool has_ranked_losses() const;
  private:
  bool _internal_has_ranked_losses() const;
  public:
  void clear_ranked_losses();
  int64_t ranked_losses() const;
  void set_ranked_losses(int64_t value);
  private:
  int64_t _internal_ranked_losses() const;
  void _internal_set_ranked_losses(int64_t value);
  public:

  // optional .openfoxwq.PlayerStatus status = 9;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::openfoxwq::PlayerStatus status() const;
  void set_status(::openfoxwq::PlayerStatus value);
  private:
  ::openfoxwq::PlayerStatus _internal_status() const;
  void _internal_set_status(::openfoxwq::PlayerStatus value);
  public:

  // optional .openfoxwq.Sex sex = 14;
  bool has_sex() const;
  private:
  bool _internal_has_sex() const;
  public:
  void clear_sex();
  ::openfoxwq::Sex sex() const;
  void set_sex(::openfoxwq::Sex value);
  private:
  ::openfoxwq::Sex _internal_sex() const;
  void _internal_set_sex(::openfoxwq::Sex value);
  public:

  // optional int64 unknown_field_13 = 13;
  bool has_unknown_field_13() const;
  private:
  bool _internal_has_unknown_field_13() const;
  public:
  void clear_unknown_field_13();
  int64_t unknown_field_13() const;
  void set_unknown_field_13(int64_t value);
  private:
  int64_t _internal_unknown_field_13() const;
  void _internal_set_unknown_field_13(int64_t value);
  public:

  // optional int64 foxcoin = 21;
  bool has_foxcoin() const;
  private:
  bool _internal_has_foxcoin() const;
  public:
  void clear_foxcoin();
  int64_t foxcoin() const;
  void set_foxcoin(int64_t value);
  private:
  int64_t _internal_foxcoin() const;
  void _internal_set_foxcoin(int64_t value);
  public:

  // optional .openfoxwq.Flair flair = 26;
  bool has_flair() const;
  private:
  bool _internal_has_flair() const;
  public:
  void clear_flair();
  ::openfoxwq::Flair flair() const;
  void set_flair(::openfoxwq::Flair value);
  private:
  ::openfoxwq::Flair _internal_flair() const;
  void _internal_set_flair(::openfoxwq::Flair value);
  public:

  // optional bool accepting_matches = 7;
  bool has_accepting_matches() const;
  private:
  bool _internal_has_accepting_matches() const;
  public:
  void clear_accepting_matches();
  bool accepting_matches() const;
  void set_accepting_matches(bool value);
  private:
  bool _internal_accepting_matches() const;
  void _internal_set_accepting_matches(bool value);
  public:

  // optional bool ai = 36;
  bool has_ai() const;
  private:
  bool _internal_has_ai() const;
  public:
  void clear_ai();
  bool ai() const;
  void set_ai(bool value);
  private:
  bool _internal_ai() const;
  void _internal_set_ai(bool value);
  public:

  // optional bool amateur_6d = 37;
  bool has_amateur_6d() const;
  private:
  bool _internal_has_amateur_6d() const;
  public:
  void clear_amateur_6d();
  bool amateur_6d() const;
  void set_amateur_6d(bool value);
  private:
  bool _internal_amateur_6d() const;
  void _internal_set_amateur_6d(bool value);
  public:

  // optional int64 membership_valid_until = 28;
  bool has_membership_valid_until() const;
  private:
  bool _internal_has_membership_valid_until() const;
  public:
  void clear_membership_valid_until();
  int64_t membership_valid_until() const;
  void set_membership_valid_until(int64_t value);
  private:
  int64_t _internal_membership_valid_until() const;
  void _internal_set_membership_valid_until(int64_t value);
  public:

  // optional .openfoxwq.MembershipType membership_type = 27;
  bool has_membership_type() const;
  private:
  bool _internal_has_membership_type() const;
  public:
  void clear_membership_type();
  ::openfoxwq::MembershipType membership_type() const;
  void set_membership_type(::openfoxwq::MembershipType value);
  private:
  ::openfoxwq::MembershipType _internal_membership_type() const;
  void _internal_set_membership_type(::openfoxwq::MembershipType value);
  public:

  // @@protoc_insertion_point(class_scope:openfoxwq.PlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_native_;
    int64_t player_id_;
    int rank_;
    int country_;
    int64_t club_id_;
    int64_t unknown_field_8_;
    int64_t ranked_wins_;
    int64_t ranked_losses_;
    int status_;
    int sex_;
    int64_t unknown_field_13_;
    int64_t foxcoin_;
    int flair_;
    bool accepting_matches_;
    bool ai_;
    bool amateur_6d_;
    int64_t membership_valid_until_;
    int membership_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class MatchSettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openfoxwq.MatchSettings) */ {
 public:
  inline MatchSettings() : MatchSettings(nullptr) {}
  ~MatchSettings() override;
  explicit PROTOBUF_CONSTEXPR MatchSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MatchSettings(const MatchSettings& from);
  MatchSettings(MatchSettings&& from) noexcept
    : MatchSettings() {
    *this = ::std::move(from);
  }

  inline MatchSettings& operator=(const MatchSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatchSettings& operator=(MatchSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MatchSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const MatchSettings* internal_default_instance() {
    return reinterpret_cast<const MatchSettings*>(
               &_MatchSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MatchSettings& a, MatchSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(MatchSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MatchSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MatchSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MatchSettings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MatchSettings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MatchSettings& from) {
    MatchSettings::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchSettings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openfoxwq.MatchSettings";
  }
  protected:
  explicit MatchSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFirstFieldNumber = 1,
    kPlayerIdSecondFieldNumber = 2,
    kHandicapFieldNumber = 4,
    kKomiFieldNumber = 5,
    kMainTimeSecFieldNumber = 7,
    kByoyomiTimeSecFieldNumber = 8,
    kByoyomiPeriodsFieldNumber = 9,
    kBoardSizeFieldNumber = 16,
    kChineseRulesFieldNumber = 10,
  };
  // required int64 player_id_first = 1;
  bool has_player_id_first() const;
  private:
  bool _internal_has_player_id_first() const;
  public:
  void clear_player_id_first();
  int64_t player_id_first() const;
  void set_player_id_first(int64_t value);
  private:
  int64_t _internal_player_id_first() const;
  void _internal_set_player_id_first(int64_t value);
  public:

  // required int64 player_id_second = 2;
  bool has_player_id_second() const;
  private:
  bool _internal_has_player_id_second() const;
  public:
  void clear_player_id_second();
  int64_t player_id_second() const;
  void set_player_id_second(int64_t value);
  private:
  int64_t _internal_player_id_second() const;
  void _internal_set_player_id_second(int64_t value);
  public:

  // optional int64 handicap = 4;
  bool has_handicap() const;
  private:
  bool _internal_has_handicap() const;
  public:
  void clear_handicap();
  int64_t handicap() const;
  void set_handicap(int64_t value);
  private:
  int64_t _internal_handicap() const;
  void _internal_set_handicap(int64_t value);
  public:

  // optional int64 komi = 5;
  bool has_komi() const;
  private:
  bool _internal_has_komi() const;
  public:
  void clear_komi();
  int64_t komi() const;
  void set_komi(int64_t value);
  private:
  int64_t _internal_komi() const;
  void _internal_set_komi(int64_t value);
  public:

  // required int64 main_time_sec = 7;
  bool has_main_time_sec() const;
  private:
  bool _internal_has_main_time_sec() const;
  public:
  void clear_main_time_sec();
  int64_t main_time_sec() const;
  void set_main_time_sec(int64_t value);
  private:
  int64_t _internal_main_time_sec() const;
  void _internal_set_main_time_sec(int64_t value);
  public:

  // required int64 byoyomi_time_sec = 8;
  bool has_byoyomi_time_sec() const;
  private:
  bool _internal_has_byoyomi_time_sec() const;
  public:
  void clear_byoyomi_time_sec();
  int64_t byoyomi_time_sec() const;
  void set_byoyomi_time_sec(int64_t value);
  private:
  int64_t _internal_byoyomi_time_sec() const;
  void _internal_set_byoyomi_time_sec(int64_t value);
  public:

  // required int64 byoyomi_periods = 9;
  bool has_byoyomi_periods() const;
  private:
  bool _internal_has_byoyomi_periods() const;
  public:
  void clear_byoyomi_periods();
  int64_t byoyomi_periods() const;
  void set_byoyomi_periods(int64_t value);
  private:
  int64_t _internal_byoyomi_periods() const;
  void _internal_set_byoyomi_periods(int64_t value);
  public:

  // required int64 board_size = 16;
  bool has_board_size() const;
  private:
  bool _internal_has_board_size() const;
  public:
  void clear_board_size();
  int64_t board_size() const;
  void set_board_size(int64_t value);
  private:
  int64_t _internal_board_size() const;
  void _internal_set_board_size(int64_t value);
  public:

  // optional bool chinese_rules = 10;
  bool has_chinese_rules() const;
  private:
  bool _internal_has_chinese_rules() const;
  public:
  void clear_chinese_rules();
  bool chinese_rules() const;
  void set_chinese_rules(bool value);
  private:
  bool _internal_chinese_rules() const;
  void _internal_set_chinese_rules(bool value);
  public:

  // @@protoc_insertion_point(class_scope:openfoxwq.MatchSettings)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int64_t player_id_first_;
    int64_t player_id_second_;
    int64_t handicap_;
    int64_t komi_;
    int64_t main_time_sec_;
    int64_t byoyomi_time_sec_;
    int64_t byoyomi_periods_;
    int64_t board_size_;
    bool chinese_rules_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class RoomSettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openfoxwq.RoomSettings) */ {
 public:
  inline RoomSettings() : RoomSettings(nullptr) {}
  ~RoomSettings() override;
  explicit PROTOBUF_CONSTEXPR RoomSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoomSettings(const RoomSettings& from);
  RoomSettings(RoomSettings&& from) noexcept
    : RoomSettings() {
    *this = ::std::move(from);
  }

  inline RoomSettings& operator=(const RoomSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomSettings& operator=(RoomSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoomSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoomSettings* internal_default_instance() {
    return reinterpret_cast<const RoomSettings*>(
               &_RoomSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RoomSettings& a, RoomSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoomSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoomSettings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoomSettings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoomSettings& from) {
    RoomSettings::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomSettings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openfoxwq.RoomSettings";
  }
  protected:
  explicit RoomSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoardSizeFieldNumber = 1,
    kHandicapFieldNumber = 3,
    kKomiFieldNumber = 4,
    kPlayerIdBlackFieldNumber = 5,
    kMainTimeSecFieldNumber = 6,
    kByoyomiTimeSecFieldNumber = 7,
    kByoyomiPeriodsFieldNumber = 8,
    kPlayerIdWhiteFieldNumber = 26,
  };
  // optional int64 board_size = 1;
  bool has_board_size() const;
  private:
  bool _internal_has_board_size() const;
  public:
  void clear_board_size();
  int64_t board_size() const;
  void set_board_size(int64_t value);
  private:
  int64_t _internal_board_size() const;
  void _internal_set_board_size(int64_t value);
  public:

  // optional int64 handicap = 3;
  bool has_handicap() const;
  private:
  bool _internal_has_handicap() const;
  public:
  void clear_handicap();
  int64_t handicap() const;
  void set_handicap(int64_t value);
  private:
  int64_t _internal_handicap() const;
  void _internal_set_handicap(int64_t value);
  public:

  // optional int64 komi = 4;
  bool has_komi() const;
  private:
  bool _internal_has_komi() const;
  public:
  void clear_komi();
  int64_t komi() const;
  void set_komi(int64_t value);
  private:
  int64_t _internal_komi() const;
  void _internal_set_komi(int64_t value);
  public:

  // optional int64 player_id_black = 5;
  bool has_player_id_black() const;
  private:
  bool _internal_has_player_id_black() const;
  public:
  void clear_player_id_black();
  int64_t player_id_black() const;
  void set_player_id_black(int64_t value);
  private:
  int64_t _internal_player_id_black() const;
  void _internal_set_player_id_black(int64_t value);
  public:

  // optional int64 main_time_sec = 6;
  bool has_main_time_sec() const;
  private:
  bool _internal_has_main_time_sec() const;
  public:
  void clear_main_time_sec();
  int64_t main_time_sec() const;
  void set_main_time_sec(int64_t value);
  private:
  int64_t _internal_main_time_sec() const;
  void _internal_set_main_time_sec(int64_t value);
  public:

  // optional int64 byoyomi_time_sec = 7;
  bool has_byoyomi_time_sec() const;
  private:
  bool _internal_has_byoyomi_time_sec() const;
  public:
  void clear_byoyomi_time_sec();
  int64_t byoyomi_time_sec() const;
  void set_byoyomi_time_sec(int64_t value);
  private:
  int64_t _internal_byoyomi_time_sec() const;
  void _internal_set_byoyomi_time_sec(int64_t value);
  public:

  // optional int64 byoyomi_periods = 8;
  bool has_byoyomi_periods() const;
  private:
  bool _internal_has_byoyomi_periods() const;
  public:
  void clear_byoyomi_periods();
  int64_t byoyomi_periods() const;
  void set_byoyomi_periods(int64_t value);
  private:
  int64_t _internal_byoyomi_periods() const;
  void _internal_set_byoyomi_periods(int64_t value);
  public:

  // optional int64 player_id_white = 26;
  bool has_player_id_white() const;
  private:
  bool _internal_has_player_id_white() const;
  public:
  void clear_player_id_white();
  int64_t player_id_white() const;
  void set_player_id_white(int64_t value);
  private:
  int64_t _internal_player_id_white() const;
  void _internal_set_player_id_white(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:openfoxwq.RoomSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int64_t board_size_;
    int64_t handicap_;
    int64_t komi_;
    int64_t player_id_black_;
    int64_t main_time_sec_;
    int64_t byoyomi_time_sec_;
    int64_t byoyomi_periods_;
    int64_t player_id_white_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class RoomId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openfoxwq.RoomId) */ {
 public:
  inline RoomId() : RoomId(nullptr) {}
  ~RoomId() override;
  explicit PROTOBUF_CONSTEXPR RoomId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoomId(const RoomId& from);
  RoomId(RoomId&& from) noexcept
    : RoomId() {
    *this = ::std::move(from);
  }

  inline RoomId& operator=(const RoomId& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomId& operator=(RoomId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoomId& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoomId* internal_default_instance() {
    return reinterpret_cast<const RoomId*>(
               &_RoomId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RoomId& a, RoomId& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoomId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoomId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoomId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoomId& from) {
    RoomId::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openfoxwq.RoomId";
  }
  protected:
  explicit RoomId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kId1FieldNumber = 1,
    kId2FieldNumber = 2,
    kId3FieldNumber = 3,
    kId4FieldNumber = 4,
  };
  // optional int64 id_1 = 1;
  bool has_id_1() const;
  private:
  bool _internal_has_id_1() const;
  public:
  void clear_id_1();
  int64_t id_1() const;
  void set_id_1(int64_t value);
  private:
  int64_t _internal_id_1() const;
  void _internal_set_id_1(int64_t value);
  public:

  // optional int64 id_2 = 2;
  bool has_id_2() const;
  private:
  bool _internal_has_id_2() const;
  public:
  void clear_id_2();
  int64_t id_2() const;
  void set_id_2(int64_t value);
  private:
  int64_t _internal_id_2() const;
  void _internal_set_id_2(int64_t value);
  public:

  // optional int64 id_3 = 3;
  bool has_id_3() const;
  private:
  bool _internal_has_id_3() const;
  public:
  void clear_id_3();
  int64_t id_3() const;
  void set_id_3(int64_t value);
  private:
  int64_t _internal_id_3() const;
  void _internal_set_id_3(int64_t value);
  public:

  // optional int64 id_4 = 4;
  bool has_id_4() const;
  private:
  bool _internal_has_id_4() const;
  public:
  void clear_id_4();
  int64_t id_4() const;
  void set_id_4(int64_t value);
  private:
  int64_t _internal_id_4() const;
  void _internal_set_id_4(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:openfoxwq.RoomId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int64_t id_1_;
    int64_t id_2_;
    int64_t id_3_;
    int64_t id_4_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class BroadcastInfo_BroadcastPlayerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openfoxwq.BroadcastInfo.BroadcastPlayerInfo) */ {
 public:
  inline BroadcastInfo_BroadcastPlayerInfo() : BroadcastInfo_BroadcastPlayerInfo(nullptr) {}
  ~BroadcastInfo_BroadcastPlayerInfo() override;
  explicit PROTOBUF_CONSTEXPR BroadcastInfo_BroadcastPlayerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BroadcastInfo_BroadcastPlayerInfo(const BroadcastInfo_BroadcastPlayerInfo& from);
  BroadcastInfo_BroadcastPlayerInfo(BroadcastInfo_BroadcastPlayerInfo&& from) noexcept
    : BroadcastInfo_BroadcastPlayerInfo() {
    *this = ::std::move(from);
  }

  inline BroadcastInfo_BroadcastPlayerInfo& operator=(const BroadcastInfo_BroadcastPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BroadcastInfo_BroadcastPlayerInfo& operator=(BroadcastInfo_BroadcastPlayerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BroadcastInfo_BroadcastPlayerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const BroadcastInfo_BroadcastPlayerInfo* internal_default_instance() {
    return reinterpret_cast<const BroadcastInfo_BroadcastPlayerInfo*>(
               &_BroadcastInfo_BroadcastPlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(BroadcastInfo_BroadcastPlayerInfo& a, BroadcastInfo_BroadcastPlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BroadcastInfo_BroadcastPlayerInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BroadcastInfo_BroadcastPlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BroadcastInfo_BroadcastPlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BroadcastInfo_BroadcastPlayerInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BroadcastInfo_BroadcastPlayerInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BroadcastInfo_BroadcastPlayerInfo& from) {
    BroadcastInfo_BroadcastPlayerInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BroadcastInfo_BroadcastPlayerInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openfoxwq.BroadcastInfo.BroadcastPlayerInfo";
  }
  protected:
  explicit BroadcastInfo_BroadcastPlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kNameAltFieldNumber = 2,
    kRankFieldNumber = 3,
    kCountryFieldNumber = 4,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string name_alt = 2;
  bool has_name_alt() const;
  private:
  bool _internal_has_name_alt() const;
  public:
  void clear_name_alt();
  const std::string& name_alt() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name_alt(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name_alt();
  PROTOBUF_NODISCARD std::string* release_name_alt();
  void set_allocated_name_alt(std::string* name_alt);
  private:
  const std::string& _internal_name_alt() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name_alt(const std::string& value);
  std::string* _internal_mutable_name_alt();
  public:

  // optional .openfoxwq.Rank rank = 3;
  bool has_rank() const;
  private:
  bool _internal_has_rank() const;
  public:
  void clear_rank();
  ::openfoxwq::Rank rank() const;
  void set_rank(::openfoxwq::Rank value);
  private:
  ::openfoxwq::Rank _internal_rank() const;
  void _internal_set_rank(::openfoxwq::Rank value);
  public:

  // optional .openfoxwq.Country country = 4;
  bool has_country() const;
  private:
  bool _internal_has_country() const;
  public:
  void clear_country();
  ::openfoxwq::Country country() const;
  void set_country(::openfoxwq::Country value);
  private:
  ::openfoxwq::Country _internal_country() const;
  void _internal_set_country(::openfoxwq::Country value);
  public:

  // @@protoc_insertion_point(class_scope:openfoxwq.BroadcastInfo.BroadcastPlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_alt_;
    int rank_;
    int country_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class BroadcastInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openfoxwq.BroadcastInfo) */ {
 public:
  inline BroadcastInfo() : BroadcastInfo(nullptr) {}
  ~BroadcastInfo() override;
  explicit PROTOBUF_CONSTEXPR BroadcastInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BroadcastInfo(const BroadcastInfo& from);
  BroadcastInfo(BroadcastInfo&& from) noexcept
    : BroadcastInfo() {
    *this = ::std::move(from);
  }

  inline BroadcastInfo& operator=(const BroadcastInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BroadcastInfo& operator=(BroadcastInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BroadcastInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const BroadcastInfo* internal_default_instance() {
    return reinterpret_cast<const BroadcastInfo*>(
               &_BroadcastInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(BroadcastInfo& a, BroadcastInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BroadcastInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BroadcastInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BroadcastInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BroadcastInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BroadcastInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BroadcastInfo& from) {
    BroadcastInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BroadcastInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openfoxwq.BroadcastInfo";
  }
  protected:
  explicit BroadcastInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BroadcastInfo_BroadcastPlayerInfo BroadcastPlayerInfo;

  typedef BroadcastInfo_BroadcastType BroadcastType;
  static constexpr BroadcastType RT_UNKNOWN =
    BroadcastInfo_BroadcastType_RT_UNKNOWN;
  static constexpr BroadcastType RT_MATCH =
    BroadcastInfo_BroadcastType_RT_MATCH;
  static constexpr BroadcastType RT_BROADCAST =
    BroadcastInfo_BroadcastType_RT_BROADCAST;
  static constexpr BroadcastType RT_COMMENTARY =
    BroadcastInfo_BroadcastType_RT_COMMENTARY;
  static constexpr BroadcastType RT_CHAMPIONSHIP =
    BroadcastInfo_BroadcastType_RT_CHAMPIONSHIP;
  static inline bool BroadcastType_IsValid(int value) {
    return BroadcastInfo_BroadcastType_IsValid(value);
  }
  static constexpr BroadcastType BroadcastType_MIN =
    BroadcastInfo_BroadcastType_BroadcastType_MIN;
  static constexpr BroadcastType BroadcastType_MAX =
    BroadcastInfo_BroadcastType_BroadcastType_MAX;
  static constexpr int BroadcastType_ARRAYSIZE =
    BroadcastInfo_BroadcastType_BroadcastType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  BroadcastType_descriptor() {
    return BroadcastInfo_BroadcastType_descriptor();
  }
  template<typename T>
  static inline const std::string& BroadcastType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, BroadcastType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function BroadcastType_Name.");
    return BroadcastInfo_BroadcastType_Name(enum_t_value);
  }
  static inline bool BroadcastType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      BroadcastType* value) {
    return BroadcastInfo_BroadcastType_Parse(name, value);
  }

  typedef BroadcastInfo_BroadcastState BroadcastState;
  static constexpr BroadcastState RS_UNKNOWN =
    BroadcastInfo_BroadcastState_RS_UNKNOWN;
  static constexpr BroadcastState RS_OPENING =
    BroadcastInfo_BroadcastState_RS_OPENING;
  static constexpr BroadcastState RS_1PERIOD =
    BroadcastInfo_BroadcastState_RS_1PERIOD;
  static constexpr BroadcastState RS_MIDDLEGAME =
    BroadcastInfo_BroadcastState_RS_MIDDLEGAME;
  static constexpr BroadcastState RS_ENDGAME =
    BroadcastInfo_BroadcastState_RS_ENDGAME;
  static constexpr BroadcastState RS_END =
    BroadcastInfo_BroadcastState_RS_END;
  static constexpr BroadcastState RS_REVIEW =
    BroadcastInfo_BroadcastState_RS_REVIEW;
  static inline bool BroadcastState_IsValid(int value) {
    return BroadcastInfo_BroadcastState_IsValid(value);
  }
  static constexpr BroadcastState BroadcastState_MIN =
    BroadcastInfo_BroadcastState_BroadcastState_MIN;
  static constexpr BroadcastState BroadcastState_MAX =
    BroadcastInfo_BroadcastState_BroadcastState_MAX;
  static constexpr int BroadcastState_ARRAYSIZE =
    BroadcastInfo_BroadcastState_BroadcastState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  BroadcastState_descriptor() {
    return BroadcastInfo_BroadcastState_descriptor();
  }
  template<typename T>
  static inline const std::string& BroadcastState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, BroadcastState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function BroadcastState_Name.");
    return BroadcastInfo_BroadcastState_Name(enum_t_value);
  }
  static inline bool BroadcastState_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      BroadcastState* value) {
    return BroadcastInfo_BroadcastState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBroadcasterFieldNumber = 9,
    kPlayerInfoBlackFieldNumber = 13,
    kPlayerInfoWhiteFieldNumber = 14,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 3,
    kStateFieldNumber = 8,
    kOnlineCountFieldNumber = 10,
    kPlayerIdBlackFieldNumber = 11,
    kPlayerIdWhiteFieldNumber = 12,
  };
  // optional string broadcaster = 9;
  bool has_broadcaster() const;
  private:
  bool _internal_has_broadcaster() const;
  public:
  void clear_broadcaster();
  const std::string& broadcaster() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_broadcaster(ArgT0&& arg0, ArgT... args);
  std::string* mutable_broadcaster();
  PROTOBUF_NODISCARD std::string* release_broadcaster();
  void set_allocated_broadcaster(std::string* broadcaster);
  private:
  const std::string& _internal_broadcaster() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_broadcaster(const std::string& value);
  std::string* _internal_mutable_broadcaster();
  public:

  // required .openfoxwq.BroadcastInfo.BroadcastPlayerInfo player_info_black = 13;
  bool has_player_info_black() const;
  private:
  bool _internal_has_player_info_black() const;
  public:
  void clear_player_info_black();
  const ::openfoxwq::BroadcastInfo_BroadcastPlayerInfo& player_info_black() const;
  PROTOBUF_NODISCARD ::openfoxwq::BroadcastInfo_BroadcastPlayerInfo* release_player_info_black();
  ::openfoxwq::BroadcastInfo_BroadcastPlayerInfo* mutable_player_info_black();
  void set_allocated_player_info_black(::openfoxwq::BroadcastInfo_BroadcastPlayerInfo* player_info_black);
  private:
  const ::openfoxwq::BroadcastInfo_BroadcastPlayerInfo& _internal_player_info_black() const;
  ::openfoxwq::BroadcastInfo_BroadcastPlayerInfo* _internal_mutable_player_info_black();
  public:
  void unsafe_arena_set_allocated_player_info_black(
      ::openfoxwq::BroadcastInfo_BroadcastPlayerInfo* player_info_black);
  ::openfoxwq::BroadcastInfo_BroadcastPlayerInfo* unsafe_arena_release_player_info_black();

  // required .openfoxwq.BroadcastInfo.BroadcastPlayerInfo player_info_white = 14;
  bool has_player_info_white() const;
  private:
  bool _internal_has_player_info_white() const;
  public:
  void clear_player_info_white();
  const ::openfoxwq::BroadcastInfo_BroadcastPlayerInfo& player_info_white() const;
  PROTOBUF_NODISCARD ::openfoxwq::BroadcastInfo_BroadcastPlayerInfo* release_player_info_white();
  ::openfoxwq::BroadcastInfo_BroadcastPlayerInfo* mutable_player_info_white();
  void set_allocated_player_info_white(::openfoxwq::BroadcastInfo_BroadcastPlayerInfo* player_info_white);
  private:
  const ::openfoxwq::BroadcastInfo_BroadcastPlayerInfo& _internal_player_info_white() const;
  ::openfoxwq::BroadcastInfo_BroadcastPlayerInfo* _internal_mutable_player_info_white();
  public:
  void unsafe_arena_set_allocated_player_info_white(
      ::openfoxwq::BroadcastInfo_BroadcastPlayerInfo* player_info_white);
  ::openfoxwq::BroadcastInfo_BroadcastPlayerInfo* unsafe_arena_release_player_info_white();

  // required int64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // required .openfoxwq.BroadcastInfo.BroadcastType type = 3;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::openfoxwq::BroadcastInfo_BroadcastType type() const;
  void set_type(::openfoxwq::BroadcastInfo_BroadcastType value);
  private:
  ::openfoxwq::BroadcastInfo_BroadcastType _internal_type() const;
  void _internal_set_type(::openfoxwq::BroadcastInfo_BroadcastType value);
  public:

  // optional .openfoxwq.BroadcastInfo.BroadcastState state = 8;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  ::openfoxwq::BroadcastInfo_BroadcastState state() const;
  void set_state(::openfoxwq::BroadcastInfo_BroadcastState value);
  private:
  ::openfoxwq::BroadcastInfo_BroadcastState _internal_state() const;
  void _internal_set_state(::openfoxwq::BroadcastInfo_BroadcastState value);
  public:

  // required int64 online_count = 10;
  bool has_online_count() const;
  private:
  bool _internal_has_online_count() const;
  public:
  void clear_online_count();
  int64_t online_count() const;
  void set_online_count(int64_t value);
  private:
  int64_t _internal_online_count() const;
  void _internal_set_online_count(int64_t value);
  public:

  // required int64 player_id_black = 11;
  bool has_player_id_black() const;
  private:
  bool _internal_has_player_id_black() const;
  public:
  void clear_player_id_black();
  int64_t player_id_black() const;
  void set_player_id_black(int64_t value);
  private:
  int64_t _internal_player_id_black() const;
  void _internal_set_player_id_black(int64_t value);
  public:

  // required int64 player_id_white = 12;
  bool has_player_id_white() const;
  private:
  bool _internal_has_player_id_white() const;
  public:
  void clear_player_id_white();
  int64_t player_id_white() const;
  void set_player_id_white(int64_t value);
  private:
  int64_t _internal_player_id_white() const;
  void _internal_set_player_id_white(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:openfoxwq.BroadcastInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr broadcaster_;
    ::openfoxwq::BroadcastInfo_BroadcastPlayerInfo* player_info_black_;
    ::openfoxwq::BroadcastInfo_BroadcastPlayerInfo* player_info_white_;
    int64_t id_;
    int type_;
    int state_;
    int64_t online_count_;
    int64_t player_id_black_;
    int64_t player_id_white_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VersionInfo

// required int64 version1 = 1;
inline bool VersionInfo::_internal_has_version1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool VersionInfo::has_version1() const {
  return _internal_has_version1();
}
inline void VersionInfo::clear_version1() {
  _impl_.version1_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int64_t VersionInfo::_internal_version1() const {
  return _impl_.version1_;
}
inline int64_t VersionInfo::version1() const {
  // @@protoc_insertion_point(field_get:openfoxwq.VersionInfo.version1)
  return _internal_version1();
}
inline void VersionInfo::_internal_set_version1(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.version1_ = value;
}
inline void VersionInfo::set_version1(int64_t value) {
  _internal_set_version1(value);
  // @@protoc_insertion_point(field_set:openfoxwq.VersionInfo.version1)
}

// required int64 version2 = 2;
inline bool VersionInfo::_internal_has_version2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool VersionInfo::has_version2() const {
  return _internal_has_version2();
}
inline void VersionInfo::clear_version2() {
  _impl_.version2_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int64_t VersionInfo::_internal_version2() const {
  return _impl_.version2_;
}
inline int64_t VersionInfo::version2() const {
  // @@protoc_insertion_point(field_get:openfoxwq.VersionInfo.version2)
  return _internal_version2();
}
inline void VersionInfo::_internal_set_version2(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.version2_ = value;
}
inline void VersionInfo::set_version2(int64_t value) {
  _internal_set_version2(value);
  // @@protoc_insertion_point(field_set:openfoxwq.VersionInfo.version2)
}

// optional string update_info = 3;
inline bool VersionInfo::_internal_has_update_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VersionInfo::has_update_info() const {
  return _internal_has_update_info();
}
inline void VersionInfo::clear_update_info() {
  _impl_.update_info_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VersionInfo::update_info() const {
  // @@protoc_insertion_point(field_get:openfoxwq.VersionInfo.update_info)
  return _internal_update_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VersionInfo::set_update_info(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.update_info_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:openfoxwq.VersionInfo.update_info)
}
inline std::string* VersionInfo::mutable_update_info() {
  std::string* _s = _internal_mutable_update_info();
  // @@protoc_insertion_point(field_mutable:openfoxwq.VersionInfo.update_info)
  return _s;
}
inline const std::string& VersionInfo::_internal_update_info() const {
  return _impl_.update_info_.Get();
}
inline void VersionInfo::_internal_set_update_info(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.update_info_.Set(value, GetArenaForAllocation());
}
inline std::string* VersionInfo::_internal_mutable_update_info() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.update_info_.Mutable(GetArenaForAllocation());
}
inline std::string* VersionInfo::release_update_info() {
  // @@protoc_insertion_point(field_release:openfoxwq.VersionInfo.update_info)
  if (!_internal_has_update_info()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.update_info_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.update_info_.IsDefault()) {
    _impl_.update_info_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void VersionInfo::set_allocated_update_info(std::string* update_info) {
  if (update_info != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.update_info_.SetAllocated(update_info, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.update_info_.IsDefault()) {
    _impl_.update_info_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:openfoxwq.VersionInfo.update_info)
}

// optional string install_url = 5;
inline bool VersionInfo::_internal_has_install_url() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VersionInfo::has_install_url() const {
  return _internal_has_install_url();
}
inline void VersionInfo::clear_install_url() {
  _impl_.install_url_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& VersionInfo::install_url() const {
  // @@protoc_insertion_point(field_get:openfoxwq.VersionInfo.install_url)
  return _internal_install_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VersionInfo::set_install_url(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.install_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:openfoxwq.VersionInfo.install_url)
}
inline std::string* VersionInfo::mutable_install_url() {
  std::string* _s = _internal_mutable_install_url();
  // @@protoc_insertion_point(field_mutable:openfoxwq.VersionInfo.install_url)
  return _s;
}
inline const std::string& VersionInfo::_internal_install_url() const {
  return _impl_.install_url_.Get();
}
inline void VersionInfo::_internal_set_install_url(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.install_url_.Set(value, GetArenaForAllocation());
}
inline std::string* VersionInfo::_internal_mutable_install_url() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.install_url_.Mutable(GetArenaForAllocation());
}
inline std::string* VersionInfo::release_install_url() {
  // @@protoc_insertion_point(field_release:openfoxwq.VersionInfo.install_url)
  if (!_internal_has_install_url()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.install_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.install_url_.IsDefault()) {
    _impl_.install_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void VersionInfo::set_allocated_install_url(std::string* install_url) {
  if (install_url != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.install_url_.SetAllocated(install_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.install_url_.IsDefault()) {
    _impl_.install_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:openfoxwq.VersionInfo.install_url)
}

// repeated string qgi = 6;
inline int VersionInfo::_internal_qgi_size() const {
  return _impl_.qgi_.size();
}
inline int VersionInfo::qgi_size() const {
  return _internal_qgi_size();
}
inline void VersionInfo::clear_qgi() {
  _impl_.qgi_.Clear();
}
inline std::string* VersionInfo::add_qgi() {
  std::string* _s = _internal_add_qgi();
  // @@protoc_insertion_point(field_add_mutable:openfoxwq.VersionInfo.qgi)
  return _s;
}
inline const std::string& VersionInfo::_internal_qgi(int index) const {
  return _impl_.qgi_.Get(index);
}
inline const std::string& VersionInfo::qgi(int index) const {
  // @@protoc_insertion_point(field_get:openfoxwq.VersionInfo.qgi)
  return _internal_qgi(index);
}
inline std::string* VersionInfo::mutable_qgi(int index) {
  // @@protoc_insertion_point(field_mutable:openfoxwq.VersionInfo.qgi)
  return _impl_.qgi_.Mutable(index);
}
inline void VersionInfo::set_qgi(int index, const std::string& value) {
  _impl_.qgi_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:openfoxwq.VersionInfo.qgi)
}
inline void VersionInfo::set_qgi(int index, std::string&& value) {
  _impl_.qgi_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:openfoxwq.VersionInfo.qgi)
}
inline void VersionInfo::set_qgi(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.qgi_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:openfoxwq.VersionInfo.qgi)
}
inline void VersionInfo::set_qgi(int index, const char* value, size_t size) {
  _impl_.qgi_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:openfoxwq.VersionInfo.qgi)
}
inline std::string* VersionInfo::_internal_add_qgi() {
  return _impl_.qgi_.Add();
}
inline void VersionInfo::add_qgi(const std::string& value) {
  _impl_.qgi_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:openfoxwq.VersionInfo.qgi)
}
inline void VersionInfo::add_qgi(std::string&& value) {
  _impl_.qgi_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:openfoxwq.VersionInfo.qgi)
}
inline void VersionInfo::add_qgi(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.qgi_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:openfoxwq.VersionInfo.qgi)
}
inline void VersionInfo::add_qgi(const char* value, size_t size) {
  _impl_.qgi_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:openfoxwq.VersionInfo.qgi)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
VersionInfo::qgi() const {
  // @@protoc_insertion_point(field_list:openfoxwq.VersionInfo.qgi)
  return _impl_.qgi_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
VersionInfo::mutable_qgi() {
  // @@protoc_insertion_point(field_mutable_list:openfoxwq.VersionInfo.qgi)
  return &_impl_.qgi_;
}

// repeated string qgi_hash = 7;
inline int VersionInfo::_internal_qgi_hash_size() const {
  return _impl_.qgi_hash_.size();
}
inline int VersionInfo::qgi_hash_size() const {
  return _internal_qgi_hash_size();
}
inline void VersionInfo::clear_qgi_hash() {
  _impl_.qgi_hash_.Clear();
}
inline std::string* VersionInfo::add_qgi_hash() {
  std::string* _s = _internal_add_qgi_hash();
  // @@protoc_insertion_point(field_add_mutable:openfoxwq.VersionInfo.qgi_hash)
  return _s;
}
inline const std::string& VersionInfo::_internal_qgi_hash(int index) const {
  return _impl_.qgi_hash_.Get(index);
}
inline const std::string& VersionInfo::qgi_hash(int index) const {
  // @@protoc_insertion_point(field_get:openfoxwq.VersionInfo.qgi_hash)
  return _internal_qgi_hash(index);
}
inline std::string* VersionInfo::mutable_qgi_hash(int index) {
  // @@protoc_insertion_point(field_mutable:openfoxwq.VersionInfo.qgi_hash)
  return _impl_.qgi_hash_.Mutable(index);
}
inline void VersionInfo::set_qgi_hash(int index, const std::string& value) {
  _impl_.qgi_hash_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:openfoxwq.VersionInfo.qgi_hash)
}
inline void VersionInfo::set_qgi_hash(int index, std::string&& value) {
  _impl_.qgi_hash_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:openfoxwq.VersionInfo.qgi_hash)
}
inline void VersionInfo::set_qgi_hash(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.qgi_hash_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:openfoxwq.VersionInfo.qgi_hash)
}
inline void VersionInfo::set_qgi_hash(int index, const char* value, size_t size) {
  _impl_.qgi_hash_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:openfoxwq.VersionInfo.qgi_hash)
}
inline std::string* VersionInfo::_internal_add_qgi_hash() {
  return _impl_.qgi_hash_.Add();
}
inline void VersionInfo::add_qgi_hash(const std::string& value) {
  _impl_.qgi_hash_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:openfoxwq.VersionInfo.qgi_hash)
}
inline void VersionInfo::add_qgi_hash(std::string&& value) {
  _impl_.qgi_hash_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:openfoxwq.VersionInfo.qgi_hash)
}
inline void VersionInfo::add_qgi_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.qgi_hash_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:openfoxwq.VersionInfo.qgi_hash)
}
inline void VersionInfo::add_qgi_hash(const char* value, size_t size) {
  _impl_.qgi_hash_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:openfoxwq.VersionInfo.qgi_hash)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
VersionInfo::qgi_hash() const {
  // @@protoc_insertion_point(field_list:openfoxwq.VersionInfo.qgi_hash)
  return _impl_.qgi_hash_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
VersionInfo::mutable_qgi_hash() {
  // @@protoc_insertion_point(field_mutable_list:openfoxwq.VersionInfo.qgi_hash)
  return &_impl_.qgi_hash_;
}

// -------------------------------------------------------------------

// ProxyLineInfo_ProxyAddressInfo

// required string host1 = 1;
inline bool ProxyLineInfo_ProxyAddressInfo::_internal_has_host1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProxyLineInfo_ProxyAddressInfo::has_host1() const {
  return _internal_has_host1();
}
inline void ProxyLineInfo_ProxyAddressInfo::clear_host1() {
  _impl_.host1_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProxyLineInfo_ProxyAddressInfo::host1() const {
  // @@protoc_insertion_point(field_get:openfoxwq.ProxyLineInfo.ProxyAddressInfo.host1)
  return _internal_host1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProxyLineInfo_ProxyAddressInfo::set_host1(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.host1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:openfoxwq.ProxyLineInfo.ProxyAddressInfo.host1)
}
inline std::string* ProxyLineInfo_ProxyAddressInfo::mutable_host1() {
  std::string* _s = _internal_mutable_host1();
  // @@protoc_insertion_point(field_mutable:openfoxwq.ProxyLineInfo.ProxyAddressInfo.host1)
  return _s;
}
inline const std::string& ProxyLineInfo_ProxyAddressInfo::_internal_host1() const {
  return _impl_.host1_.Get();
}
inline void ProxyLineInfo_ProxyAddressInfo::_internal_set_host1(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.host1_.Set(value, GetArenaForAllocation());
}
inline std::string* ProxyLineInfo_ProxyAddressInfo::_internal_mutable_host1() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.host1_.Mutable(GetArenaForAllocation());
}
inline std::string* ProxyLineInfo_ProxyAddressInfo::release_host1() {
  // @@protoc_insertion_point(field_release:openfoxwq.ProxyLineInfo.ProxyAddressInfo.host1)
  if (!_internal_has_host1()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.host1_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.host1_.IsDefault()) {
    _impl_.host1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ProxyLineInfo_ProxyAddressInfo::set_allocated_host1(std::string* host1) {
  if (host1 != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.host1_.SetAllocated(host1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.host1_.IsDefault()) {
    _impl_.host1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:openfoxwq.ProxyLineInfo.ProxyAddressInfo.host1)
}

// required int64 port1 = 2;
inline bool ProxyLineInfo_ProxyAddressInfo::_internal_has_port1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ProxyLineInfo_ProxyAddressInfo::has_port1() const {
  return _internal_has_port1();
}
inline void ProxyLineInfo_ProxyAddressInfo::clear_port1() {
  _impl_.port1_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int64_t ProxyLineInfo_ProxyAddressInfo::_internal_port1() const {
  return _impl_.port1_;
}
inline int64_t ProxyLineInfo_ProxyAddressInfo::port1() const {
  // @@protoc_insertion_point(field_get:openfoxwq.ProxyLineInfo.ProxyAddressInfo.port1)
  return _internal_port1();
}
inline void ProxyLineInfo_ProxyAddressInfo::_internal_set_port1(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.port1_ = value;
}
inline void ProxyLineInfo_ProxyAddressInfo::set_port1(int64_t value) {
  _internal_set_port1(value);
  // @@protoc_insertion_point(field_set:openfoxwq.ProxyLineInfo.ProxyAddressInfo.port1)
}

// required string host2 = 3;
inline bool ProxyLineInfo_ProxyAddressInfo::_internal_has_host2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProxyLineInfo_ProxyAddressInfo::has_host2() const {
  return _internal_has_host2();
}
inline void ProxyLineInfo_ProxyAddressInfo::clear_host2() {
  _impl_.host2_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ProxyLineInfo_ProxyAddressInfo::host2() const {
  // @@protoc_insertion_point(field_get:openfoxwq.ProxyLineInfo.ProxyAddressInfo.host2)
  return _internal_host2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProxyLineInfo_ProxyAddressInfo::set_host2(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.host2_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:openfoxwq.ProxyLineInfo.ProxyAddressInfo.host2)
}
inline std::string* ProxyLineInfo_ProxyAddressInfo::mutable_host2() {
  std::string* _s = _internal_mutable_host2();
  // @@protoc_insertion_point(field_mutable:openfoxwq.ProxyLineInfo.ProxyAddressInfo.host2)
  return _s;
}
inline const std::string& ProxyLineInfo_ProxyAddressInfo::_internal_host2() const {
  return _impl_.host2_.Get();
}
inline void ProxyLineInfo_ProxyAddressInfo::_internal_set_host2(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.host2_.Set(value, GetArenaForAllocation());
}
inline std::string* ProxyLineInfo_ProxyAddressInfo::_internal_mutable_host2() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.host2_.Mutable(GetArenaForAllocation());
}
inline std::string* ProxyLineInfo_ProxyAddressInfo::release_host2() {
  // @@protoc_insertion_point(field_release:openfoxwq.ProxyLineInfo.ProxyAddressInfo.host2)
  if (!_internal_has_host2()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.host2_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.host2_.IsDefault()) {
    _impl_.host2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ProxyLineInfo_ProxyAddressInfo::set_allocated_host2(std::string* host2) {
  if (host2 != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.host2_.SetAllocated(host2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.host2_.IsDefault()) {
    _impl_.host2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:openfoxwq.ProxyLineInfo.ProxyAddressInfo.host2)
}

// required int64 port2 = 4;
inline bool ProxyLineInfo_ProxyAddressInfo::_internal_has_port2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ProxyLineInfo_ProxyAddressInfo::has_port2() const {
  return _internal_has_port2();
}
inline void ProxyLineInfo_ProxyAddressInfo::clear_port2() {
  _impl_.port2_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int64_t ProxyLineInfo_ProxyAddressInfo::_internal_port2() const {
  return _impl_.port2_;
}
inline int64_t ProxyLineInfo_ProxyAddressInfo::port2() const {
  // @@protoc_insertion_point(field_get:openfoxwq.ProxyLineInfo.ProxyAddressInfo.port2)
  return _internal_port2();
}
inline void ProxyLineInfo_ProxyAddressInfo::_internal_set_port2(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.port2_ = value;
}
inline void ProxyLineInfo_ProxyAddressInfo::set_port2(int64_t value) {
  _internal_set_port2(value);
  // @@protoc_insertion_point(field_set:openfoxwq.ProxyLineInfo.ProxyAddressInfo.port2)
}

// -------------------------------------------------------------------

// ProxyLineInfo

// required int64 index = 1;
inline bool ProxyLineInfo::_internal_has_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ProxyLineInfo::has_index() const {
  return _internal_has_index();
}
inline void ProxyLineInfo::clear_index() {
  _impl_.index_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int64_t ProxyLineInfo::_internal_index() const {
  return _impl_.index_;
}
inline int64_t ProxyLineInfo::index() const {
  // @@protoc_insertion_point(field_get:openfoxwq.ProxyLineInfo.index)
  return _internal_index();
}
inline void ProxyLineInfo::_internal_set_index(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.index_ = value;
}
inline void ProxyLineInfo::set_index(int64_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:openfoxwq.ProxyLineInfo.index)
}

// required string name = 2;
inline bool ProxyLineInfo::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProxyLineInfo::has_name() const {
  return _internal_has_name();
}
inline void ProxyLineInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProxyLineInfo::name() const {
  // @@protoc_insertion_point(field_get:openfoxwq.ProxyLineInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProxyLineInfo::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:openfoxwq.ProxyLineInfo.name)
}
inline std::string* ProxyLineInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:openfoxwq.ProxyLineInfo.name)
  return _s;
}
inline const std::string& ProxyLineInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ProxyLineInfo::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ProxyLineInfo::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ProxyLineInfo::release_name() {
  // @@protoc_insertion_point(field_release:openfoxwq.ProxyLineInfo.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ProxyLineInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:openfoxwq.ProxyLineInfo.name)
}

// required .openfoxwq.ProxyLineInfo.ProxyAddressInfo address_info = 3;
inline bool ProxyLineInfo::_internal_has_address_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.address_info_ != nullptr);
  return value;
}
inline bool ProxyLineInfo::has_address_info() const {
  return _internal_has_address_info();
}
inline void ProxyLineInfo::clear_address_info() {
  if (_impl_.address_info_ != nullptr) _impl_.address_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::openfoxwq::ProxyLineInfo_ProxyAddressInfo& ProxyLineInfo::_internal_address_info() const {
  const ::openfoxwq::ProxyLineInfo_ProxyAddressInfo* p = _impl_.address_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::openfoxwq::ProxyLineInfo_ProxyAddressInfo&>(
      ::openfoxwq::_ProxyLineInfo_ProxyAddressInfo_default_instance_);
}
inline const ::openfoxwq::ProxyLineInfo_ProxyAddressInfo& ProxyLineInfo::address_info() const {
  // @@protoc_insertion_point(field_get:openfoxwq.ProxyLineInfo.address_info)
  return _internal_address_info();
}
inline void ProxyLineInfo::unsafe_arena_set_allocated_address_info(
    ::openfoxwq::ProxyLineInfo_ProxyAddressInfo* address_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.address_info_);
  }
  _impl_.address_info_ = address_info;
  if (address_info) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openfoxwq.ProxyLineInfo.address_info)
}
inline ::openfoxwq::ProxyLineInfo_ProxyAddressInfo* ProxyLineInfo::release_address_info() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::openfoxwq::ProxyLineInfo_ProxyAddressInfo* temp = _impl_.address_info_;
  _impl_.address_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::openfoxwq::ProxyLineInfo_ProxyAddressInfo* ProxyLineInfo::unsafe_arena_release_address_info() {
  // @@protoc_insertion_point(field_release:openfoxwq.ProxyLineInfo.address_info)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::openfoxwq::ProxyLineInfo_ProxyAddressInfo* temp = _impl_.address_info_;
  _impl_.address_info_ = nullptr;
  return temp;
}
inline ::openfoxwq::ProxyLineInfo_ProxyAddressInfo* ProxyLineInfo::_internal_mutable_address_info() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.address_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::openfoxwq::ProxyLineInfo_ProxyAddressInfo>(GetArenaForAllocation());
    _impl_.address_info_ = p;
  }
  return _impl_.address_info_;
}
inline ::openfoxwq::ProxyLineInfo_ProxyAddressInfo* ProxyLineInfo::mutable_address_info() {
  ::openfoxwq::ProxyLineInfo_ProxyAddressInfo* _msg = _internal_mutable_address_info();
  // @@protoc_insertion_point(field_mutable:openfoxwq.ProxyLineInfo.address_info)
  return _msg;
}
inline void ProxyLineInfo::set_allocated_address_info(::openfoxwq::ProxyLineInfo_ProxyAddressInfo* address_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.address_info_;
  }
  if (address_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(address_info);
    if (message_arena != submessage_arena) {
      address_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, address_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.address_info_ = address_info;
  // @@protoc_insertion_point(field_set_allocated:openfoxwq.ProxyLineInfo.address_info)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// LobbySvrInfo

// optional string name = 2;
inline bool LobbySvrInfo::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LobbySvrInfo::has_name() const {
  return _internal_has_name();
}
inline void LobbySvrInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LobbySvrInfo::name() const {
  // @@protoc_insertion_point(field_get:openfoxwq.LobbySvrInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LobbySvrInfo::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:openfoxwq.LobbySvrInfo.name)
}
inline std::string* LobbySvrInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:openfoxwq.LobbySvrInfo.name)
  return _s;
}
inline const std::string& LobbySvrInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void LobbySvrInfo::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* LobbySvrInfo::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* LobbySvrInfo::release_name() {
  // @@protoc_insertion_point(field_release:openfoxwq.LobbySvrInfo.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LobbySvrInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:openfoxwq.LobbySvrInfo.name)
}

// optional string broadcast_host = 5;
inline bool LobbySvrInfo::_internal_has_broadcast_host() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LobbySvrInfo::has_broadcast_host() const {
  return _internal_has_broadcast_host();
}
inline void LobbySvrInfo::clear_broadcast_host() {
  _impl_.broadcast_host_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LobbySvrInfo::broadcast_host() const {
  // @@protoc_insertion_point(field_get:openfoxwq.LobbySvrInfo.broadcast_host)
  return _internal_broadcast_host();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LobbySvrInfo::set_broadcast_host(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.broadcast_host_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:openfoxwq.LobbySvrInfo.broadcast_host)
}
inline std::string* LobbySvrInfo::mutable_broadcast_host() {
  std::string* _s = _internal_mutable_broadcast_host();
  // @@protoc_insertion_point(field_mutable:openfoxwq.LobbySvrInfo.broadcast_host)
  return _s;
}
inline const std::string& LobbySvrInfo::_internal_broadcast_host() const {
  return _impl_.broadcast_host_.Get();
}
inline void LobbySvrInfo::_internal_set_broadcast_host(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.broadcast_host_.Set(value, GetArenaForAllocation());
}
inline std::string* LobbySvrInfo::_internal_mutable_broadcast_host() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.broadcast_host_.Mutable(GetArenaForAllocation());
}
inline std::string* LobbySvrInfo::release_broadcast_host() {
  // @@protoc_insertion_point(field_release:openfoxwq.LobbySvrInfo.broadcast_host)
  if (!_internal_has_broadcast_host()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.broadcast_host_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.broadcast_host_.IsDefault()) {
    _impl_.broadcast_host_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LobbySvrInfo::set_allocated_broadcast_host(std::string* broadcast_host) {
  if (broadcast_host != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.broadcast_host_.SetAllocated(broadcast_host, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.broadcast_host_.IsDefault()) {
    _impl_.broadcast_host_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:openfoxwq.LobbySvrInfo.broadcast_host)
}

// optional int32 broadcast_port = 6;
inline bool LobbySvrInfo::_internal_has_broadcast_port() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool LobbySvrInfo::has_broadcast_port() const {
  return _internal_has_broadcast_port();
}
inline void LobbySvrInfo::clear_broadcast_port() {
  _impl_.broadcast_port_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline int32_t LobbySvrInfo::_internal_broadcast_port() const {
  return _impl_.broadcast_port_;
}
inline int32_t LobbySvrInfo::broadcast_port() const {
  // @@protoc_insertion_point(field_get:openfoxwq.LobbySvrInfo.broadcast_port)
  return _internal_broadcast_port();
}
inline void LobbySvrInfo::_internal_set_broadcast_port(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.broadcast_port_ = value;
}
inline void LobbySvrInfo::set_broadcast_port(int32_t value) {
  _internal_set_broadcast_port(value);
  // @@protoc_insertion_point(field_set:openfoxwq.LobbySvrInfo.broadcast_port)
}

// optional int64 num_players = 3;
inline bool LobbySvrInfo::_internal_has_num_players() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool LobbySvrInfo::has_num_players() const {
  return _internal_has_num_players();
}
inline void LobbySvrInfo::clear_num_players() {
  _impl_.num_players_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int64_t LobbySvrInfo::_internal_num_players() const {
  return _impl_.num_players_;
}
inline int64_t LobbySvrInfo::num_players() const {
  // @@protoc_insertion_point(field_get:openfoxwq.LobbySvrInfo.num_players)
  return _internal_num_players();
}
inline void LobbySvrInfo::_internal_set_num_players(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.num_players_ = value;
}
inline void LobbySvrInfo::set_num_players(int64_t value) {
  _internal_set_num_players(value);
  // @@protoc_insertion_point(field_set:openfoxwq.LobbySvrInfo.num_players)
}

// optional int64 num_matches = 4;
inline bool LobbySvrInfo::_internal_has_num_matches() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool LobbySvrInfo::has_num_matches() const {
  return _internal_has_num_matches();
}
inline void LobbySvrInfo::clear_num_matches() {
  _impl_.num_matches_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline int64_t LobbySvrInfo::_internal_num_matches() const {
  return _impl_.num_matches_;
}
inline int64_t LobbySvrInfo::num_matches() const {
  // @@protoc_insertion_point(field_get:openfoxwq.LobbySvrInfo.num_matches)
  return _internal_num_matches();
}
inline void LobbySvrInfo::_internal_set_num_matches(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.num_matches_ = value;
}
inline void LobbySvrInfo::set_num_matches(int64_t value) {
  _internal_set_num_matches(value);
  // @@protoc_insertion_point(field_set:openfoxwq.LobbySvrInfo.num_matches)
}

// optional string unknown_host_1 = 13;
inline bool LobbySvrInfo::_internal_has_unknown_host_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LobbySvrInfo::has_unknown_host_1() const {
  return _internal_has_unknown_host_1();
}
inline void LobbySvrInfo::clear_unknown_host_1() {
  _impl_.unknown_host_1_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& LobbySvrInfo::unknown_host_1() const {
  // @@protoc_insertion_point(field_get:openfoxwq.LobbySvrInfo.unknown_host_1)
  return _internal_unknown_host_1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LobbySvrInfo::set_unknown_host_1(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.unknown_host_1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:openfoxwq.LobbySvrInfo.unknown_host_1)
}
inline std::string* LobbySvrInfo::mutable_unknown_host_1() {
  std::string* _s = _internal_mutable_unknown_host_1();
  // @@protoc_insertion_point(field_mutable:openfoxwq.LobbySvrInfo.unknown_host_1)
  return _s;
}
inline const std::string& LobbySvrInfo::_internal_unknown_host_1() const {
  return _impl_.unknown_host_1_.Get();
}
inline void LobbySvrInfo::_internal_set_unknown_host_1(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.unknown_host_1_.Set(value, GetArenaForAllocation());
}
inline std::string* LobbySvrInfo::_internal_mutable_unknown_host_1() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.unknown_host_1_.Mutable(GetArenaForAllocation());
}
inline std::string* LobbySvrInfo::release_unknown_host_1() {
  // @@protoc_insertion_point(field_release:openfoxwq.LobbySvrInfo.unknown_host_1)
  if (!_internal_has_unknown_host_1()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.unknown_host_1_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.unknown_host_1_.IsDefault()) {
    _impl_.unknown_host_1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LobbySvrInfo::set_allocated_unknown_host_1(std::string* unknown_host_1) {
  if (unknown_host_1 != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.unknown_host_1_.SetAllocated(unknown_host_1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.unknown_host_1_.IsDefault()) {
    _impl_.unknown_host_1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:openfoxwq.LobbySvrInfo.unknown_host_1)
}

// optional int32 unknown_port_1 = 14;
inline bool LobbySvrInfo::_internal_has_unknown_port_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool LobbySvrInfo::has_unknown_port_1() const {
  return _internal_has_unknown_port_1();
}
inline void LobbySvrInfo::clear_unknown_port_1() {
  _impl_.unknown_port_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline int32_t LobbySvrInfo::_internal_unknown_port_1() const {
  return _impl_.unknown_port_1_;
}
inline int32_t LobbySvrInfo::unknown_port_1() const {
  // @@protoc_insertion_point(field_get:openfoxwq.LobbySvrInfo.unknown_port_1)
  return _internal_unknown_port_1();
}
inline void LobbySvrInfo::_internal_set_unknown_port_1(int32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.unknown_port_1_ = value;
}
inline void LobbySvrInfo::set_unknown_port_1(int32_t value) {
  _internal_set_unknown_port_1(value);
  // @@protoc_insertion_point(field_set:openfoxwq.LobbySvrInfo.unknown_port_1)
}

// optional string unknown_host_2 = 15;
inline bool LobbySvrInfo::_internal_has_unknown_host_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LobbySvrInfo::has_unknown_host_2() const {
  return _internal_has_unknown_host_2();
}
inline void LobbySvrInfo::clear_unknown_host_2() {
  _impl_.unknown_host_2_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& LobbySvrInfo::unknown_host_2() const {
  // @@protoc_insertion_point(field_get:openfoxwq.LobbySvrInfo.unknown_host_2)
  return _internal_unknown_host_2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LobbySvrInfo::set_unknown_host_2(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.unknown_host_2_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:openfoxwq.LobbySvrInfo.unknown_host_2)
}
inline std::string* LobbySvrInfo::mutable_unknown_host_2() {
  std::string* _s = _internal_mutable_unknown_host_2();
  // @@protoc_insertion_point(field_mutable:openfoxwq.LobbySvrInfo.unknown_host_2)
  return _s;
}
inline const std::string& LobbySvrInfo::_internal_unknown_host_2() const {
  return _impl_.unknown_host_2_.Get();
}
inline void LobbySvrInfo::_internal_set_unknown_host_2(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.unknown_host_2_.Set(value, GetArenaForAllocation());
}
inline std::string* LobbySvrInfo::_internal_mutable_unknown_host_2() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.unknown_host_2_.Mutable(GetArenaForAllocation());
}
inline std::string* LobbySvrInfo::release_unknown_host_2() {
  // @@protoc_insertion_point(field_release:openfoxwq.LobbySvrInfo.unknown_host_2)
  if (!_internal_has_unknown_host_2()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.unknown_host_2_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.unknown_host_2_.IsDefault()) {
    _impl_.unknown_host_2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LobbySvrInfo::set_allocated_unknown_host_2(std::string* unknown_host_2) {
  if (unknown_host_2 != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.unknown_host_2_.SetAllocated(unknown_host_2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.unknown_host_2_.IsDefault()) {
    _impl_.unknown_host_2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:openfoxwq.LobbySvrInfo.unknown_host_2)
}

// optional int32 unknown_port_2 = 16;
inline bool LobbySvrInfo::_internal_has_unknown_port_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool LobbySvrInfo::has_unknown_port_2() const {
  return _internal_has_unknown_port_2();
}
inline void LobbySvrInfo::clear_unknown_port_2() {
  _impl_.unknown_port_2_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline int32_t LobbySvrInfo::_internal_unknown_port_2() const {
  return _impl_.unknown_port_2_;
}
inline int32_t LobbySvrInfo::unknown_port_2() const {
  // @@protoc_insertion_point(field_get:openfoxwq.LobbySvrInfo.unknown_port_2)
  return _internal_unknown_port_2();
}
inline void LobbySvrInfo::_internal_set_unknown_port_2(int32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.unknown_port_2_ = value;
}
inline void LobbySvrInfo::set_unknown_port_2(int32_t value) {
  _internal_set_unknown_port_2(value);
  // @@protoc_insertion_point(field_set:openfoxwq.LobbySvrInfo.unknown_port_2)
}

// optional string unknown_host_3 = 17;
inline bool LobbySvrInfo::_internal_has_unknown_host_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LobbySvrInfo::has_unknown_host_3() const {
  return _internal_has_unknown_host_3();
}
inline void LobbySvrInfo::clear_unknown_host_3() {
  _impl_.unknown_host_3_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& LobbySvrInfo::unknown_host_3() const {
  // @@protoc_insertion_point(field_get:openfoxwq.LobbySvrInfo.unknown_host_3)
  return _internal_unknown_host_3();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LobbySvrInfo::set_unknown_host_3(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.unknown_host_3_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:openfoxwq.LobbySvrInfo.unknown_host_3)
}
inline std::string* LobbySvrInfo::mutable_unknown_host_3() {
  std::string* _s = _internal_mutable_unknown_host_3();
  // @@protoc_insertion_point(field_mutable:openfoxwq.LobbySvrInfo.unknown_host_3)
  return _s;
}
inline const std::string& LobbySvrInfo::_internal_unknown_host_3() const {
  return _impl_.unknown_host_3_.Get();
}
inline void LobbySvrInfo::_internal_set_unknown_host_3(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.unknown_host_3_.Set(value, GetArenaForAllocation());
}
inline std::string* LobbySvrInfo::_internal_mutable_unknown_host_3() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.unknown_host_3_.Mutable(GetArenaForAllocation());
}
inline std::string* LobbySvrInfo::release_unknown_host_3() {
  // @@protoc_insertion_point(field_release:openfoxwq.LobbySvrInfo.unknown_host_3)
  if (!_internal_has_unknown_host_3()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.unknown_host_3_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.unknown_host_3_.IsDefault()) {
    _impl_.unknown_host_3_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LobbySvrInfo::set_allocated_unknown_host_3(std::string* unknown_host_3) {
  if (unknown_host_3 != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.unknown_host_3_.SetAllocated(unknown_host_3, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.unknown_host_3_.IsDefault()) {
    _impl_.unknown_host_3_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:openfoxwq.LobbySvrInfo.unknown_host_3)
}

// optional int32 unknown_port_3 = 18;
inline bool LobbySvrInfo::_internal_has_unknown_port_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool LobbySvrInfo::has_unknown_port_3() const {
  return _internal_has_unknown_port_3();
}
inline void LobbySvrInfo::clear_unknown_port_3() {
  _impl_.unknown_port_3_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline int32_t LobbySvrInfo::_internal_unknown_port_3() const {
  return _impl_.unknown_port_3_;
}
inline int32_t LobbySvrInfo::unknown_port_3() const {
  // @@protoc_insertion_point(field_get:openfoxwq.LobbySvrInfo.unknown_port_3)
  return _internal_unknown_port_3();
}
inline void LobbySvrInfo::_internal_set_unknown_port_3(int32_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.unknown_port_3_ = value;
}
inline void LobbySvrInfo::set_unknown_port_3(int32_t value) {
  _internal_set_unknown_port_3(value);
  // @@protoc_insertion_point(field_set:openfoxwq.LobbySvrInfo.unknown_port_3)
}

// optional string unknown_host_4 = 19;
inline bool LobbySvrInfo::_internal_has_unknown_host_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool LobbySvrInfo::has_unknown_host_4() const {
  return _internal_has_unknown_host_4();
}
inline void LobbySvrInfo::clear_unknown_host_4() {
  _impl_.unknown_host_4_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& LobbySvrInfo::unknown_host_4() const {
  // @@protoc_insertion_point(field_get:openfoxwq.LobbySvrInfo.unknown_host_4)
  return _internal_unknown_host_4();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LobbySvrInfo::set_unknown_host_4(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000020u;
 _impl_.unknown_host_4_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:openfoxwq.LobbySvrInfo.unknown_host_4)
}
inline std::string* LobbySvrInfo::mutable_unknown_host_4() {
  std::string* _s = _internal_mutable_unknown_host_4();
  // @@protoc_insertion_point(field_mutable:openfoxwq.LobbySvrInfo.unknown_host_4)
  return _s;
}
inline const std::string& LobbySvrInfo::_internal_unknown_host_4() const {
  return _impl_.unknown_host_4_.Get();
}
inline void LobbySvrInfo::_internal_set_unknown_host_4(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.unknown_host_4_.Set(value, GetArenaForAllocation());
}
inline std::string* LobbySvrInfo::_internal_mutable_unknown_host_4() {
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.unknown_host_4_.Mutable(GetArenaForAllocation());
}
inline std::string* LobbySvrInfo::release_unknown_host_4() {
  // @@protoc_insertion_point(field_release:openfoxwq.LobbySvrInfo.unknown_host_4)
  if (!_internal_has_unknown_host_4()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* p = _impl_.unknown_host_4_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.unknown_host_4_.IsDefault()) {
    _impl_.unknown_host_4_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LobbySvrInfo::set_allocated_unknown_host_4(std::string* unknown_host_4) {
  if (unknown_host_4 != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.unknown_host_4_.SetAllocated(unknown_host_4, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.unknown_host_4_.IsDefault()) {
    _impl_.unknown_host_4_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:openfoxwq.LobbySvrInfo.unknown_host_4)
}

// optional int32 unknown_port_4 = 20;
inline bool LobbySvrInfo::_internal_has_unknown_port_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool LobbySvrInfo::has_unknown_port_4() const {
  return _internal_has_unknown_port_4();
}
inline void LobbySvrInfo::clear_unknown_port_4() {
  _impl_.unknown_port_4_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline int32_t LobbySvrInfo::_internal_unknown_port_4() const {
  return _impl_.unknown_port_4_;
}
inline int32_t LobbySvrInfo::unknown_port_4() const {
  // @@protoc_insertion_point(field_get:openfoxwq.LobbySvrInfo.unknown_port_4)
  return _internal_unknown_port_4();
}
inline void LobbySvrInfo::_internal_set_unknown_port_4(int32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.unknown_port_4_ = value;
}
inline void LobbySvrInfo::set_unknown_port_4(int32_t value) {
  _internal_set_unknown_port_4(value);
  // @@protoc_insertion_point(field_set:openfoxwq.LobbySvrInfo.unknown_port_4)
}

// optional string play_host = 21;
inline bool LobbySvrInfo::_internal_has_play_host() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool LobbySvrInfo::has_play_host() const {
  return _internal_has_play_host();
}
inline void LobbySvrInfo::clear_play_host() {
  _impl_.play_host_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const std::string& LobbySvrInfo::play_host() const {
  // @@protoc_insertion_point(field_get:openfoxwq.LobbySvrInfo.play_host)
  return _internal_play_host();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LobbySvrInfo::set_play_host(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000040u;
 _impl_.play_host_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:openfoxwq.LobbySvrInfo.play_host)
}
inline std::string* LobbySvrInfo::mutable_play_host() {
  std::string* _s = _internal_mutable_play_host();
  // @@protoc_insertion_point(field_mutable:openfoxwq.LobbySvrInfo.play_host)
  return _s;
}
inline const std::string& LobbySvrInfo::_internal_play_host() const {
  return _impl_.play_host_.Get();
}
inline void LobbySvrInfo::_internal_set_play_host(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.play_host_.Set(value, GetArenaForAllocation());
}
inline std::string* LobbySvrInfo::_internal_mutable_play_host() {
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.play_host_.Mutable(GetArenaForAllocation());
}
inline std::string* LobbySvrInfo::release_play_host() {
  // @@protoc_insertion_point(field_release:openfoxwq.LobbySvrInfo.play_host)
  if (!_internal_has_play_host()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* p = _impl_.play_host_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.play_host_.IsDefault()) {
    _impl_.play_host_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LobbySvrInfo::set_allocated_play_host(std::string* play_host) {
  if (play_host != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.play_host_.SetAllocated(play_host, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.play_host_.IsDefault()) {
    _impl_.play_host_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:openfoxwq.LobbySvrInfo.play_host)
}

// optional int32 play_port = 22;
inline bool LobbySvrInfo::_internal_has_play_port() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool LobbySvrInfo::has_play_port() const {
  return _internal_has_play_port();
}
inline void LobbySvrInfo::clear_play_port() {
  _impl_.play_port_ = 0;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline int32_t LobbySvrInfo::_internal_play_port() const {
  return _impl_.play_port_;
}
inline int32_t LobbySvrInfo::play_port() const {
  // @@protoc_insertion_point(field_get:openfoxwq.LobbySvrInfo.play_port)
  return _internal_play_port();
}
inline void LobbySvrInfo::_internal_set_play_port(int32_t value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.play_port_ = value;
}
inline void LobbySvrInfo::set_play_port(int32_t value) {
  _internal_set_play_port(value);
  // @@protoc_insertion_point(field_set:openfoxwq.LobbySvrInfo.play_port)
}

// map<int32, string> name_loc = 23;
inline int LobbySvrInfo::_internal_name_loc_size() const {
  return _impl_.name_loc_.size();
}
inline int LobbySvrInfo::name_loc_size() const {
  return _internal_name_loc_size();
}
inline void LobbySvrInfo::clear_name_loc() {
  _impl_.name_loc_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >&
LobbySvrInfo::_internal_name_loc() const {
  return _impl_.name_loc_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >&
LobbySvrInfo::name_loc() const {
  // @@protoc_insertion_point(field_map:openfoxwq.LobbySvrInfo.name_loc)
  return _internal_name_loc();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >*
LobbySvrInfo::_internal_mutable_name_loc() {
  return _impl_.name_loc_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >*
LobbySvrInfo::mutable_name_loc() {
  // @@protoc_insertion_point(field_mutable_map:openfoxwq.LobbySvrInfo.name_loc)
  return _internal_mutable_name_loc();
}

// optional int64 unknown_field_7 = 7;
inline bool LobbySvrInfo::_internal_has_unknown_field_7() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool LobbySvrInfo::has_unknown_field_7() const {
  return _internal_has_unknown_field_7();
}
inline void LobbySvrInfo::clear_unknown_field_7() {
  _impl_.unknown_field_7_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline int64_t LobbySvrInfo::_internal_unknown_field_7() const {
  return _impl_.unknown_field_7_;
}
inline int64_t LobbySvrInfo::unknown_field_7() const {
  // @@protoc_insertion_point(field_get:openfoxwq.LobbySvrInfo.unknown_field_7)
  return _internal_unknown_field_7();
}
inline void LobbySvrInfo::_internal_set_unknown_field_7(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.unknown_field_7_ = value;
}
inline void LobbySvrInfo::set_unknown_field_7(int64_t value) {
  _internal_set_unknown_field_7(value);
  // @@protoc_insertion_point(field_set:openfoxwq.LobbySvrInfo.unknown_field_7)
}

// optional int64 unknown_field_8 = 8;
inline bool LobbySvrInfo::_internal_has_unknown_field_8() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool LobbySvrInfo::has_unknown_field_8() const {
  return _internal_has_unknown_field_8();
}
inline void LobbySvrInfo::clear_unknown_field_8() {
  _impl_.unknown_field_8_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline int64_t LobbySvrInfo::_internal_unknown_field_8() const {
  return _impl_.unknown_field_8_;
}
inline int64_t LobbySvrInfo::unknown_field_8() const {
  // @@protoc_insertion_point(field_get:openfoxwq.LobbySvrInfo.unknown_field_8)
  return _internal_unknown_field_8();
}
inline void LobbySvrInfo::_internal_set_unknown_field_8(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.unknown_field_8_ = value;
}
inline void LobbySvrInfo::set_unknown_field_8(int64_t value) {
  _internal_set_unknown_field_8(value);
  // @@protoc_insertion_point(field_set:openfoxwq.LobbySvrInfo.unknown_field_8)
}

// -------------------------------------------------------------------

// PlayerInfo

// required int64 player_id = 1;
inline bool PlayerInfo::_internal_has_player_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PlayerInfo::has_player_id() const {
  return _internal_has_player_id();
}
inline void PlayerInfo::clear_player_id() {
  _impl_.player_id_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int64_t PlayerInfo::_internal_player_id() const {
  return _impl_.player_id_;
}
inline int64_t PlayerInfo::player_id() const {
  // @@protoc_insertion_point(field_get:openfoxwq.PlayerInfo.player_id)
  return _internal_player_id();
}
inline void PlayerInfo::_internal_set_player_id(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.player_id_ = value;
}
inline void PlayerInfo::set_player_id(int64_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:openfoxwq.PlayerInfo.player_id)
}

// optional string name = 2;
inline bool PlayerInfo::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PlayerInfo::has_name() const {
  return _internal_has_name();
}
inline void PlayerInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PlayerInfo::name() const {
  // @@protoc_insertion_point(field_get:openfoxwq.PlayerInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerInfo::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:openfoxwq.PlayerInfo.name)
}
inline std::string* PlayerInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:openfoxwq.PlayerInfo.name)
  return _s;
}
inline const std::string& PlayerInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void PlayerInfo::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* PlayerInfo::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* PlayerInfo::release_name() {
  // @@protoc_insertion_point(field_release:openfoxwq.PlayerInfo.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PlayerInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:openfoxwq.PlayerInfo.name)
}

// optional string name_native = 3;
inline bool PlayerInfo::_internal_has_name_native() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PlayerInfo::has_name_native() const {
  return _internal_has_name_native();
}
inline void PlayerInfo::clear_name_native() {
  _impl_.name_native_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PlayerInfo::name_native() const {
  // @@protoc_insertion_point(field_get:openfoxwq.PlayerInfo.name_native)
  return _internal_name_native();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerInfo::set_name_native(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.name_native_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:openfoxwq.PlayerInfo.name_native)
}
inline std::string* PlayerInfo::mutable_name_native() {
  std::string* _s = _internal_mutable_name_native();
  // @@protoc_insertion_point(field_mutable:openfoxwq.PlayerInfo.name_native)
  return _s;
}
inline const std::string& PlayerInfo::_internal_name_native() const {
  return _impl_.name_native_.Get();
}
inline void PlayerInfo::_internal_set_name_native(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.name_native_.Set(value, GetArenaForAllocation());
}
inline std::string* PlayerInfo::_internal_mutable_name_native() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.name_native_.Mutable(GetArenaForAllocation());
}
inline std::string* PlayerInfo::release_name_native() {
  // @@protoc_insertion_point(field_release:openfoxwq.PlayerInfo.name_native)
  if (!_internal_has_name_native()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.name_native_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_native_.IsDefault()) {
    _impl_.name_native_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PlayerInfo::set_allocated_name_native(std::string* name_native) {
  if (name_native != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.name_native_.SetAllocated(name_native, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_native_.IsDefault()) {
    _impl_.name_native_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:openfoxwq.PlayerInfo.name_native)
}

// optional .openfoxwq.Rank rank = 4;
inline bool PlayerInfo::_internal_has_rank() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PlayerInfo::has_rank() const {
  return _internal_has_rank();
}
inline void PlayerInfo::clear_rank() {
  _impl_.rank_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::openfoxwq::Rank PlayerInfo::_internal_rank() const {
  return static_cast< ::openfoxwq::Rank >(_impl_.rank_);
}
inline ::openfoxwq::Rank PlayerInfo::rank() const {
  // @@protoc_insertion_point(field_get:openfoxwq.PlayerInfo.rank)
  return _internal_rank();
}
inline void PlayerInfo::_internal_set_rank(::openfoxwq::Rank value) {
  assert(::openfoxwq::Rank_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.rank_ = value;
}
inline void PlayerInfo::set_rank(::openfoxwq::Rank value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:openfoxwq.PlayerInfo.rank)
}

// optional .openfoxwq.Country country = 5;
inline bool PlayerInfo::_internal_has_country() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PlayerInfo::has_country() const {
  return _internal_has_country();
}
inline void PlayerInfo::clear_country() {
  _impl_.country_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::openfoxwq::Country PlayerInfo::_internal_country() const {
  return static_cast< ::openfoxwq::Country >(_impl_.country_);
}
inline ::openfoxwq::Country PlayerInfo::country() const {
  // @@protoc_insertion_point(field_get:openfoxwq.PlayerInfo.country)
  return _internal_country();
}
inline void PlayerInfo::_internal_set_country(::openfoxwq::Country value) {
  assert(::openfoxwq::Country_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.country_ = value;
}
inline void PlayerInfo::set_country(::openfoxwq::Country value) {
  _internal_set_country(value);
  // @@protoc_insertion_point(field_set:openfoxwq.PlayerInfo.country)
}

// optional int64 club_id = 6;
inline bool PlayerInfo::_internal_has_club_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PlayerInfo::has_club_id() const {
  return _internal_has_club_id();
}
inline void PlayerInfo::clear_club_id() {
  _impl_.club_id_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int64_t PlayerInfo::_internal_club_id() const {
  return _impl_.club_id_;
}
inline int64_t PlayerInfo::club_id() const {
  // @@protoc_insertion_point(field_get:openfoxwq.PlayerInfo.club_id)
  return _internal_club_id();
}
inline void PlayerInfo::_internal_set_club_id(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.club_id_ = value;
}
inline void PlayerInfo::set_club_id(int64_t value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:openfoxwq.PlayerInfo.club_id)
}

// optional bool accepting_matches = 7;
inline bool PlayerInfo::_internal_has_accepting_matches() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool PlayerInfo::has_accepting_matches() const {
  return _internal_has_accepting_matches();
}
inline void PlayerInfo::clear_accepting_matches() {
  _impl_.accepting_matches_ = false;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline bool PlayerInfo::_internal_accepting_matches() const {
  return _impl_.accepting_matches_;
}
inline bool PlayerInfo::accepting_matches() const {
  // @@protoc_insertion_point(field_get:openfoxwq.PlayerInfo.accepting_matches)
  return _internal_accepting_matches();
}
inline void PlayerInfo::_internal_set_accepting_matches(bool value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.accepting_matches_ = value;
}
inline void PlayerInfo::set_accepting_matches(bool value) {
  _internal_set_accepting_matches(value);
  // @@protoc_insertion_point(field_set:openfoxwq.PlayerInfo.accepting_matches)
}

// optional .openfoxwq.PlayerStatus status = 9;
inline bool PlayerInfo::_internal_has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool PlayerInfo::has_status() const {
  return _internal_has_status();
}
inline void PlayerInfo::clear_status() {
  _impl_.status_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::openfoxwq::PlayerStatus PlayerInfo::_internal_status() const {
  return static_cast< ::openfoxwq::PlayerStatus >(_impl_.status_);
}
inline ::openfoxwq::PlayerStatus PlayerInfo::status() const {
  // @@protoc_insertion_point(field_get:openfoxwq.PlayerInfo.status)
  return _internal_status();
}
inline void PlayerInfo::_internal_set_status(::openfoxwq::PlayerStatus value) {
  assert(::openfoxwq::PlayerStatus_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.status_ = value;
}
inline void PlayerInfo::set_status(::openfoxwq::PlayerStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:openfoxwq.PlayerInfo.status)
}

// optional int64 ranked_wins = 10;
inline bool PlayerInfo::_internal_has_ranked_wins() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PlayerInfo::has_ranked_wins() const {
  return _internal_has_ranked_wins();
}
inline void PlayerInfo::clear_ranked_wins() {
  _impl_.ranked_wins_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int64_t PlayerInfo::_internal_ranked_wins() const {
  return _impl_.ranked_wins_;
}
inline int64_t PlayerInfo::ranked_wins() const {
  // @@protoc_insertion_point(field_get:openfoxwq.PlayerInfo.ranked_wins)
  return _internal_ranked_wins();
}
inline void PlayerInfo::_internal_set_ranked_wins(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.ranked_wins_ = value;
}
inline void PlayerInfo::set_ranked_wins(int64_t value) {
  _internal_set_ranked_wins(value);
  // @@protoc_insertion_point(field_set:openfoxwq.PlayerInfo.ranked_wins)
}

// optional int64 ranked_losses = 11;
inline bool PlayerInfo::_internal_has_ranked_losses() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool PlayerInfo::has_ranked_losses() const {
  return _internal_has_ranked_losses();
}
inline void PlayerInfo::clear_ranked_losses() {
  _impl_.ranked_losses_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline int64_t PlayerInfo::_internal_ranked_losses() const {
  return _impl_.ranked_losses_;
}
inline int64_t PlayerInfo::ranked_losses() const {
  // @@protoc_insertion_point(field_get:openfoxwq.PlayerInfo.ranked_losses)
  return _internal_ranked_losses();
}
inline void PlayerInfo::_internal_set_ranked_losses(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.ranked_losses_ = value;
}
inline void PlayerInfo::set_ranked_losses(int64_t value) {
  _internal_set_ranked_losses(value);
  // @@protoc_insertion_point(field_set:openfoxwq.PlayerInfo.ranked_losses)
}

// optional .openfoxwq.Sex sex = 14;
inline bool PlayerInfo::_internal_has_sex() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool PlayerInfo::has_sex() const {
  return _internal_has_sex();
}
inline void PlayerInfo::clear_sex() {
  _impl_.sex_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::openfoxwq::Sex PlayerInfo::_internal_sex() const {
  return static_cast< ::openfoxwq::Sex >(_impl_.sex_);
}
inline ::openfoxwq::Sex PlayerInfo::sex() const {
  // @@protoc_insertion_point(field_get:openfoxwq.PlayerInfo.sex)
  return _internal_sex();
}
inline void PlayerInfo::_internal_set_sex(::openfoxwq::Sex value) {
  assert(::openfoxwq::Sex_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.sex_ = value;
}
inline void PlayerInfo::set_sex(::openfoxwq::Sex value) {
  _internal_set_sex(value);
  // @@protoc_insertion_point(field_set:openfoxwq.PlayerInfo.sex)
}

// optional int64 foxcoin = 21;
inline bool PlayerInfo::_internal_has_foxcoin() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool PlayerInfo::has_foxcoin() const {
  return _internal_has_foxcoin();
}
inline void PlayerInfo::clear_foxcoin() {
  _impl_.foxcoin_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline int64_t PlayerInfo::_internal_foxcoin() const {
  return _impl_.foxcoin_;
}
inline int64_t PlayerInfo::foxcoin() const {
  // @@protoc_insertion_point(field_get:openfoxwq.PlayerInfo.foxcoin)
  return _internal_foxcoin();
}
inline void PlayerInfo::_internal_set_foxcoin(int64_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.foxcoin_ = value;
}
inline void PlayerInfo::set_foxcoin(int64_t value) {
  _internal_set_foxcoin(value);
  // @@protoc_insertion_point(field_set:openfoxwq.PlayerInfo.foxcoin)
}

// optional .openfoxwq.Flair flair = 26;
inline bool PlayerInfo::_internal_has_flair() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool PlayerInfo::has_flair() const {
  return _internal_has_flair();
}
inline void PlayerInfo::clear_flair() {
  _impl_.flair_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::openfoxwq::Flair PlayerInfo::_internal_flair() const {
  return static_cast< ::openfoxwq::Flair >(_impl_.flair_);
}
inline ::openfoxwq::Flair PlayerInfo::flair() const {
  // @@protoc_insertion_point(field_get:openfoxwq.PlayerInfo.flair)
  return _internal_flair();
}
inline void PlayerInfo::_internal_set_flair(::openfoxwq::Flair value) {
  assert(::openfoxwq::Flair_IsValid(value));
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.flair_ = value;
}
inline void PlayerInfo::set_flair(::openfoxwq::Flair value) {
  _internal_set_flair(value);
  // @@protoc_insertion_point(field_set:openfoxwq.PlayerInfo.flair)
}

// optional .openfoxwq.MembershipType membership_type = 27;
inline bool PlayerInfo::_internal_has_membership_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool PlayerInfo::has_membership_type() const {
  return _internal_has_membership_type();
}
inline void PlayerInfo::clear_membership_type() {
  _impl_.membership_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline ::openfoxwq::MembershipType PlayerInfo::_internal_membership_type() const {
  return static_cast< ::openfoxwq::MembershipType >(_impl_.membership_type_);
}
inline ::openfoxwq::MembershipType PlayerInfo::membership_type() const {
  // @@protoc_insertion_point(field_get:openfoxwq.PlayerInfo.membership_type)
  return _internal_membership_type();
}
inline void PlayerInfo::_internal_set_membership_type(::openfoxwq::MembershipType value) {
  assert(::openfoxwq::MembershipType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.membership_type_ = value;
}
inline void PlayerInfo::set_membership_type(::openfoxwq::MembershipType value) {
  _internal_set_membership_type(value);
  // @@protoc_insertion_point(field_set:openfoxwq.PlayerInfo.membership_type)
}

// optional int64 membership_valid_until = 28;
inline bool PlayerInfo::_internal_has_membership_valid_until() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool PlayerInfo::has_membership_valid_until() const {
  return _internal_has_membership_valid_until();
}
inline void PlayerInfo::clear_membership_valid_until() {
  _impl_.membership_valid_until_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline int64_t PlayerInfo::_internal_membership_valid_until() const {
  return _impl_.membership_valid_until_;
}
inline int64_t PlayerInfo::membership_valid_until() const {
  // @@protoc_insertion_point(field_get:openfoxwq.PlayerInfo.membership_valid_until)
  return _internal_membership_valid_until();
}
inline void PlayerInfo::_internal_set_membership_valid_until(int64_t value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.membership_valid_until_ = value;
}
inline void PlayerInfo::set_membership_valid_until(int64_t value) {
  _internal_set_membership_valid_until(value);
  // @@protoc_insertion_point(field_set:openfoxwq.PlayerInfo.membership_valid_until)
}

// optional bool ai = 36;
inline bool PlayerInfo::_internal_has_ai() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool PlayerInfo::has_ai() const {
  return _internal_has_ai();
}
inline void PlayerInfo::clear_ai() {
  _impl_.ai_ = false;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline bool PlayerInfo::_internal_ai() const {
  return _impl_.ai_;
}
inline bool PlayerInfo::ai() const {
  // @@protoc_insertion_point(field_get:openfoxwq.PlayerInfo.ai)
  return _internal_ai();
}
inline void PlayerInfo::_internal_set_ai(bool value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.ai_ = value;
}
inline void PlayerInfo::set_ai(bool value) {
  _internal_set_ai(value);
  // @@protoc_insertion_point(field_set:openfoxwq.PlayerInfo.ai)
}

// optional bool amateur_6d = 37;
inline bool PlayerInfo::_internal_has_amateur_6d() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool PlayerInfo::has_amateur_6d() const {
  return _internal_has_amateur_6d();
}
inline void PlayerInfo::clear_amateur_6d() {
  _impl_.amateur_6d_ = false;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline bool PlayerInfo::_internal_amateur_6d() const {
  return _impl_.amateur_6d_;
}
inline bool PlayerInfo::amateur_6d() const {
  // @@protoc_insertion_point(field_get:openfoxwq.PlayerInfo.amateur_6d)
  return _internal_amateur_6d();
}
inline void PlayerInfo::_internal_set_amateur_6d(bool value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.amateur_6d_ = value;
}
inline void PlayerInfo::set_amateur_6d(bool value) {
  _internal_set_amateur_6d(value);
  // @@protoc_insertion_point(field_set:openfoxwq.PlayerInfo.amateur_6d)
}

// optional int64 unknown_field_8 = 8;
inline bool PlayerInfo::_internal_has_unknown_field_8() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PlayerInfo::has_unknown_field_8() const {
  return _internal_has_unknown_field_8();
}
inline void PlayerInfo::clear_unknown_field_8() {
  _impl_.unknown_field_8_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int64_t PlayerInfo::_internal_unknown_field_8() const {
  return _impl_.unknown_field_8_;
}
inline int64_t PlayerInfo::unknown_field_8() const {
  // @@protoc_insertion_point(field_get:openfoxwq.PlayerInfo.unknown_field_8)
  return _internal_unknown_field_8();
}
inline void PlayerInfo::_internal_set_unknown_field_8(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.unknown_field_8_ = value;
}
inline void PlayerInfo::set_unknown_field_8(int64_t value) {
  _internal_set_unknown_field_8(value);
  // @@protoc_insertion_point(field_set:openfoxwq.PlayerInfo.unknown_field_8)
}

// optional int64 unknown_field_13 = 13;
inline bool PlayerInfo::_internal_has_unknown_field_13() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool PlayerInfo::has_unknown_field_13() const {
  return _internal_has_unknown_field_13();
}
inline void PlayerInfo::clear_unknown_field_13() {
  _impl_.unknown_field_13_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline int64_t PlayerInfo::_internal_unknown_field_13() const {
  return _impl_.unknown_field_13_;
}
inline int64_t PlayerInfo::unknown_field_13() const {
  // @@protoc_insertion_point(field_get:openfoxwq.PlayerInfo.unknown_field_13)
  return _internal_unknown_field_13();
}
inline void PlayerInfo::_internal_set_unknown_field_13(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.unknown_field_13_ = value;
}
inline void PlayerInfo::set_unknown_field_13(int64_t value) {
  _internal_set_unknown_field_13(value);
  // @@protoc_insertion_point(field_set:openfoxwq.PlayerInfo.unknown_field_13)
}

// -------------------------------------------------------------------

// MatchSettings

// required int64 player_id_first = 1;
inline bool MatchSettings::_internal_has_player_id_first() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MatchSettings::has_player_id_first() const {
  return _internal_has_player_id_first();
}
inline void MatchSettings::clear_player_id_first() {
  _impl_.player_id_first_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int64_t MatchSettings::_internal_player_id_first() const {
  return _impl_.player_id_first_;
}
inline int64_t MatchSettings::player_id_first() const {
  // @@protoc_insertion_point(field_get:openfoxwq.MatchSettings.player_id_first)
  return _internal_player_id_first();
}
inline void MatchSettings::_internal_set_player_id_first(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.player_id_first_ = value;
}
inline void MatchSettings::set_player_id_first(int64_t value) {
  _internal_set_player_id_first(value);
  // @@protoc_insertion_point(field_set:openfoxwq.MatchSettings.player_id_first)
}

// required int64 player_id_second = 2;
inline bool MatchSettings::_internal_has_player_id_second() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MatchSettings::has_player_id_second() const {
  return _internal_has_player_id_second();
}
inline void MatchSettings::clear_player_id_second() {
  _impl_.player_id_second_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int64_t MatchSettings::_internal_player_id_second() const {
  return _impl_.player_id_second_;
}
inline int64_t MatchSettings::player_id_second() const {
  // @@protoc_insertion_point(field_get:openfoxwq.MatchSettings.player_id_second)
  return _internal_player_id_second();
}
inline void MatchSettings::_internal_set_player_id_second(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.player_id_second_ = value;
}
inline void MatchSettings::set_player_id_second(int64_t value) {
  _internal_set_player_id_second(value);
  // @@protoc_insertion_point(field_set:openfoxwq.MatchSettings.player_id_second)
}

// optional int64 handicap = 4;
inline bool MatchSettings::_internal_has_handicap() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MatchSettings::has_handicap() const {
  return _internal_has_handicap();
}
inline void MatchSettings::clear_handicap() {
  _impl_.handicap_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int64_t MatchSettings::_internal_handicap() const {
  return _impl_.handicap_;
}
inline int64_t MatchSettings::handicap() const {
  // @@protoc_insertion_point(field_get:openfoxwq.MatchSettings.handicap)
  return _internal_handicap();
}
inline void MatchSettings::_internal_set_handicap(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.handicap_ = value;
}
inline void MatchSettings::set_handicap(int64_t value) {
  _internal_set_handicap(value);
  // @@protoc_insertion_point(field_set:openfoxwq.MatchSettings.handicap)
}

// optional int64 komi = 5;
inline bool MatchSettings::_internal_has_komi() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MatchSettings::has_komi() const {
  return _internal_has_komi();
}
inline void MatchSettings::clear_komi() {
  _impl_.komi_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int64_t MatchSettings::_internal_komi() const {
  return _impl_.komi_;
}
inline int64_t MatchSettings::komi() const {
  // @@protoc_insertion_point(field_get:openfoxwq.MatchSettings.komi)
  return _internal_komi();
}
inline void MatchSettings::_internal_set_komi(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.komi_ = value;
}
inline void MatchSettings::set_komi(int64_t value) {
  _internal_set_komi(value);
  // @@protoc_insertion_point(field_set:openfoxwq.MatchSettings.komi)
}

// required int64 main_time_sec = 7;
inline bool MatchSettings::_internal_has_main_time_sec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool MatchSettings::has_main_time_sec() const {
  return _internal_has_main_time_sec();
}
inline void MatchSettings::clear_main_time_sec() {
  _impl_.main_time_sec_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int64_t MatchSettings::_internal_main_time_sec() const {
  return _impl_.main_time_sec_;
}
inline int64_t MatchSettings::main_time_sec() const {
  // @@protoc_insertion_point(field_get:openfoxwq.MatchSettings.main_time_sec)
  return _internal_main_time_sec();
}
inline void MatchSettings::_internal_set_main_time_sec(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.main_time_sec_ = value;
}
inline void MatchSettings::set_main_time_sec(int64_t value) {
  _internal_set_main_time_sec(value);
  // @@protoc_insertion_point(field_set:openfoxwq.MatchSettings.main_time_sec)
}

// required int64 byoyomi_time_sec = 8;
inline bool MatchSettings::_internal_has_byoyomi_time_sec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool MatchSettings::has_byoyomi_time_sec() const {
  return _internal_has_byoyomi_time_sec();
}
inline void MatchSettings::clear_byoyomi_time_sec() {
  _impl_.byoyomi_time_sec_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int64_t MatchSettings::_internal_byoyomi_time_sec() const {
  return _impl_.byoyomi_time_sec_;
}
inline int64_t MatchSettings::byoyomi_time_sec() const {
  // @@protoc_insertion_point(field_get:openfoxwq.MatchSettings.byoyomi_time_sec)
  return _internal_byoyomi_time_sec();
}
inline void MatchSettings::_internal_set_byoyomi_time_sec(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.byoyomi_time_sec_ = value;
}
inline void MatchSettings::set_byoyomi_time_sec(int64_t value) {
  _internal_set_byoyomi_time_sec(value);
  // @@protoc_insertion_point(field_set:openfoxwq.MatchSettings.byoyomi_time_sec)
}

// required int64 byoyomi_periods = 9;
inline bool MatchSettings::_internal_has_byoyomi_periods() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool MatchSettings::has_byoyomi_periods() const {
  return _internal_has_byoyomi_periods();
}
inline void MatchSettings::clear_byoyomi_periods() {
  _impl_.byoyomi_periods_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int64_t MatchSettings::_internal_byoyomi_periods() const {
  return _impl_.byoyomi_periods_;
}
inline int64_t MatchSettings::byoyomi_periods() const {
  // @@protoc_insertion_point(field_get:openfoxwq.MatchSettings.byoyomi_periods)
  return _internal_byoyomi_periods();
}
inline void MatchSettings::_internal_set_byoyomi_periods(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.byoyomi_periods_ = value;
}
inline void MatchSettings::set_byoyomi_periods(int64_t value) {
  _internal_set_byoyomi_periods(value);
  // @@protoc_insertion_point(field_set:openfoxwq.MatchSettings.byoyomi_periods)
}

// optional bool chinese_rules = 10;
inline bool MatchSettings::_internal_has_chinese_rules() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool MatchSettings::has_chinese_rules() const {
  return _internal_has_chinese_rules();
}
inline void MatchSettings::clear_chinese_rules() {
  _impl_.chinese_rules_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool MatchSettings::_internal_chinese_rules() const {
  return _impl_.chinese_rules_;
}
inline bool MatchSettings::chinese_rules() const {
  // @@protoc_insertion_point(field_get:openfoxwq.MatchSettings.chinese_rules)
  return _internal_chinese_rules();
}
inline void MatchSettings::_internal_set_chinese_rules(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.chinese_rules_ = value;
}
inline void MatchSettings::set_chinese_rules(bool value) {
  _internal_set_chinese_rules(value);
  // @@protoc_insertion_point(field_set:openfoxwq.MatchSettings.chinese_rules)
}

// required int64 board_size = 16;
inline bool MatchSettings::_internal_has_board_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool MatchSettings::has_board_size() const {
  return _internal_has_board_size();
}
inline void MatchSettings::clear_board_size() {
  _impl_.board_size_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int64_t MatchSettings::_internal_board_size() const {
  return _impl_.board_size_;
}
inline int64_t MatchSettings::board_size() const {
  // @@protoc_insertion_point(field_get:openfoxwq.MatchSettings.board_size)
  return _internal_board_size();
}
inline void MatchSettings::_internal_set_board_size(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.board_size_ = value;
}
inline void MatchSettings::set_board_size(int64_t value) {
  _internal_set_board_size(value);
  // @@protoc_insertion_point(field_set:openfoxwq.MatchSettings.board_size)
}

// -------------------------------------------------------------------

// RoomSettings

// optional int64 board_size = 1;
inline bool RoomSettings::_internal_has_board_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RoomSettings::has_board_size() const {
  return _internal_has_board_size();
}
inline void RoomSettings::clear_board_size() {
  _impl_.board_size_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int64_t RoomSettings::_internal_board_size() const {
  return _impl_.board_size_;
}
inline int64_t RoomSettings::board_size() const {
  // @@protoc_insertion_point(field_get:openfoxwq.RoomSettings.board_size)
  return _internal_board_size();
}
inline void RoomSettings::_internal_set_board_size(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.board_size_ = value;
}
inline void RoomSettings::set_board_size(int64_t value) {
  _internal_set_board_size(value);
  // @@protoc_insertion_point(field_set:openfoxwq.RoomSettings.board_size)
}

// optional int64 handicap = 3;
inline bool RoomSettings::_internal_has_handicap() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RoomSettings::has_handicap() const {
  return _internal_has_handicap();
}
inline void RoomSettings::clear_handicap() {
  _impl_.handicap_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int64_t RoomSettings::_internal_handicap() const {
  return _impl_.handicap_;
}
inline int64_t RoomSettings::handicap() const {
  // @@protoc_insertion_point(field_get:openfoxwq.RoomSettings.handicap)
  return _internal_handicap();
}
inline void RoomSettings::_internal_set_handicap(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.handicap_ = value;
}
inline void RoomSettings::set_handicap(int64_t value) {
  _internal_set_handicap(value);
  // @@protoc_insertion_point(field_set:openfoxwq.RoomSettings.handicap)
}

// optional int64 komi = 4;
inline bool RoomSettings::_internal_has_komi() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RoomSettings::has_komi() const {
  return _internal_has_komi();
}
inline void RoomSettings::clear_komi() {
  _impl_.komi_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int64_t RoomSettings::_internal_komi() const {
  return _impl_.komi_;
}
inline int64_t RoomSettings::komi() const {
  // @@protoc_insertion_point(field_get:openfoxwq.RoomSettings.komi)
  return _internal_komi();
}
inline void RoomSettings::_internal_set_komi(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.komi_ = value;
}
inline void RoomSettings::set_komi(int64_t value) {
  _internal_set_komi(value);
  // @@protoc_insertion_point(field_set:openfoxwq.RoomSettings.komi)
}

// optional int64 player_id_black = 5;
inline bool RoomSettings::_internal_has_player_id_black() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RoomSettings::has_player_id_black() const {
  return _internal_has_player_id_black();
}
inline void RoomSettings::clear_player_id_black() {
  _impl_.player_id_black_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int64_t RoomSettings::_internal_player_id_black() const {
  return _impl_.player_id_black_;
}
inline int64_t RoomSettings::player_id_black() const {
  // @@protoc_insertion_point(field_get:openfoxwq.RoomSettings.player_id_black)
  return _internal_player_id_black();
}
inline void RoomSettings::_internal_set_player_id_black(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.player_id_black_ = value;
}
inline void RoomSettings::set_player_id_black(int64_t value) {
  _internal_set_player_id_black(value);
  // @@protoc_insertion_point(field_set:openfoxwq.RoomSettings.player_id_black)
}

// optional int64 main_time_sec = 6;
inline bool RoomSettings::_internal_has_main_time_sec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RoomSettings::has_main_time_sec() const {
  return _internal_has_main_time_sec();
}
inline void RoomSettings::clear_main_time_sec() {
  _impl_.main_time_sec_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int64_t RoomSettings::_internal_main_time_sec() const {
  return _impl_.main_time_sec_;
}
inline int64_t RoomSettings::main_time_sec() const {
  // @@protoc_insertion_point(field_get:openfoxwq.RoomSettings.main_time_sec)
  return _internal_main_time_sec();
}
inline void RoomSettings::_internal_set_main_time_sec(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.main_time_sec_ = value;
}
inline void RoomSettings::set_main_time_sec(int64_t value) {
  _internal_set_main_time_sec(value);
  // @@protoc_insertion_point(field_set:openfoxwq.RoomSettings.main_time_sec)
}

// optional int64 byoyomi_time_sec = 7;
inline bool RoomSettings::_internal_has_byoyomi_time_sec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RoomSettings::has_byoyomi_time_sec() const {
  return _internal_has_byoyomi_time_sec();
}
inline void RoomSettings::clear_byoyomi_time_sec() {
  _impl_.byoyomi_time_sec_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int64_t RoomSettings::_internal_byoyomi_time_sec() const {
  return _impl_.byoyomi_time_sec_;
}
inline int64_t RoomSettings::byoyomi_time_sec() const {
  // @@protoc_insertion_point(field_get:openfoxwq.RoomSettings.byoyomi_time_sec)
  return _internal_byoyomi_time_sec();
}
inline void RoomSettings::_internal_set_byoyomi_time_sec(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.byoyomi_time_sec_ = value;
}
inline void RoomSettings::set_byoyomi_time_sec(int64_t value) {
  _internal_set_byoyomi_time_sec(value);
  // @@protoc_insertion_point(field_set:openfoxwq.RoomSettings.byoyomi_time_sec)
}

// optional int64 byoyomi_periods = 8;
inline bool RoomSettings::_internal_has_byoyomi_periods() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool RoomSettings::has_byoyomi_periods() const {
  return _internal_has_byoyomi_periods();
}
inline void RoomSettings::clear_byoyomi_periods() {
  _impl_.byoyomi_periods_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int64_t RoomSettings::_internal_byoyomi_periods() const {
  return _impl_.byoyomi_periods_;
}
inline int64_t RoomSettings::byoyomi_periods() const {
  // @@protoc_insertion_point(field_get:openfoxwq.RoomSettings.byoyomi_periods)
  return _internal_byoyomi_periods();
}
inline void RoomSettings::_internal_set_byoyomi_periods(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.byoyomi_periods_ = value;
}
inline void RoomSettings::set_byoyomi_periods(int64_t value) {
  _internal_set_byoyomi_periods(value);
  // @@protoc_insertion_point(field_set:openfoxwq.RoomSettings.byoyomi_periods)
}

// optional int64 player_id_white = 26;
inline bool RoomSettings::_internal_has_player_id_white() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool RoomSettings::has_player_id_white() const {
  return _internal_has_player_id_white();
}
inline void RoomSettings::clear_player_id_white() {
  _impl_.player_id_white_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int64_t RoomSettings::_internal_player_id_white() const {
  return _impl_.player_id_white_;
}
inline int64_t RoomSettings::player_id_white() const {
  // @@protoc_insertion_point(field_get:openfoxwq.RoomSettings.player_id_white)
  return _internal_player_id_white();
}
inline void RoomSettings::_internal_set_player_id_white(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.player_id_white_ = value;
}
inline void RoomSettings::set_player_id_white(int64_t value) {
  _internal_set_player_id_white(value);
  // @@protoc_insertion_point(field_set:openfoxwq.RoomSettings.player_id_white)
}

// -------------------------------------------------------------------

// RoomId

// optional int64 id_1 = 1;
inline bool RoomId::_internal_has_id_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RoomId::has_id_1() const {
  return _internal_has_id_1();
}
inline void RoomId::clear_id_1() {
  _impl_.id_1_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int64_t RoomId::_internal_id_1() const {
  return _impl_.id_1_;
}
inline int64_t RoomId::id_1() const {
  // @@protoc_insertion_point(field_get:openfoxwq.RoomId.id_1)
  return _internal_id_1();
}
inline void RoomId::_internal_set_id_1(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_1_ = value;
}
inline void RoomId::set_id_1(int64_t value) {
  _internal_set_id_1(value);
  // @@protoc_insertion_point(field_set:openfoxwq.RoomId.id_1)
}

// optional int64 id_2 = 2;
inline bool RoomId::_internal_has_id_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RoomId::has_id_2() const {
  return _internal_has_id_2();
}
inline void RoomId::clear_id_2() {
  _impl_.id_2_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int64_t RoomId::_internal_id_2() const {
  return _impl_.id_2_;
}
inline int64_t RoomId::id_2() const {
  // @@protoc_insertion_point(field_get:openfoxwq.RoomId.id_2)
  return _internal_id_2();
}
inline void RoomId::_internal_set_id_2(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.id_2_ = value;
}
inline void RoomId::set_id_2(int64_t value) {
  _internal_set_id_2(value);
  // @@protoc_insertion_point(field_set:openfoxwq.RoomId.id_2)
}

// optional int64 id_3 = 3;
inline bool RoomId::_internal_has_id_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RoomId::has_id_3() const {
  return _internal_has_id_3();
}
inline void RoomId::clear_id_3() {
  _impl_.id_3_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int64_t RoomId::_internal_id_3() const {
  return _impl_.id_3_;
}
inline int64_t RoomId::id_3() const {
  // @@protoc_insertion_point(field_get:openfoxwq.RoomId.id_3)
  return _internal_id_3();
}
inline void RoomId::_internal_set_id_3(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.id_3_ = value;
}
inline void RoomId::set_id_3(int64_t value) {
  _internal_set_id_3(value);
  // @@protoc_insertion_point(field_set:openfoxwq.RoomId.id_3)
}

// optional int64 id_4 = 4;
inline bool RoomId::_internal_has_id_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RoomId::has_id_4() const {
  return _internal_has_id_4();
}
inline void RoomId::clear_id_4() {
  _impl_.id_4_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int64_t RoomId::_internal_id_4() const {
  return _impl_.id_4_;
}
inline int64_t RoomId::id_4() const {
  // @@protoc_insertion_point(field_get:openfoxwq.RoomId.id_4)
  return _internal_id_4();
}
inline void RoomId::_internal_set_id_4(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.id_4_ = value;
}
inline void RoomId::set_id_4(int64_t value) {
  _internal_set_id_4(value);
  // @@protoc_insertion_point(field_set:openfoxwq.RoomId.id_4)
}

// -------------------------------------------------------------------

// BroadcastInfo_BroadcastPlayerInfo

// optional string name = 1;
inline bool BroadcastInfo_BroadcastPlayerInfo::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BroadcastInfo_BroadcastPlayerInfo::has_name() const {
  return _internal_has_name();
}
inline void BroadcastInfo_BroadcastPlayerInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BroadcastInfo_BroadcastPlayerInfo::name() const {
  // @@protoc_insertion_point(field_get:openfoxwq.BroadcastInfo.BroadcastPlayerInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BroadcastInfo_BroadcastPlayerInfo::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:openfoxwq.BroadcastInfo.BroadcastPlayerInfo.name)
}
inline std::string* BroadcastInfo_BroadcastPlayerInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:openfoxwq.BroadcastInfo.BroadcastPlayerInfo.name)
  return _s;
}
inline const std::string& BroadcastInfo_BroadcastPlayerInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void BroadcastInfo_BroadcastPlayerInfo::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* BroadcastInfo_BroadcastPlayerInfo::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* BroadcastInfo_BroadcastPlayerInfo::release_name() {
  // @@protoc_insertion_point(field_release:openfoxwq.BroadcastInfo.BroadcastPlayerInfo.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BroadcastInfo_BroadcastPlayerInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:openfoxwq.BroadcastInfo.BroadcastPlayerInfo.name)
}

// optional string name_alt = 2;
inline bool BroadcastInfo_BroadcastPlayerInfo::_internal_has_name_alt() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BroadcastInfo_BroadcastPlayerInfo::has_name_alt() const {
  return _internal_has_name_alt();
}
inline void BroadcastInfo_BroadcastPlayerInfo::clear_name_alt() {
  _impl_.name_alt_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BroadcastInfo_BroadcastPlayerInfo::name_alt() const {
  // @@protoc_insertion_point(field_get:openfoxwq.BroadcastInfo.BroadcastPlayerInfo.name_alt)
  return _internal_name_alt();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BroadcastInfo_BroadcastPlayerInfo::set_name_alt(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.name_alt_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:openfoxwq.BroadcastInfo.BroadcastPlayerInfo.name_alt)
}
inline std::string* BroadcastInfo_BroadcastPlayerInfo::mutable_name_alt() {
  std::string* _s = _internal_mutable_name_alt();
  // @@protoc_insertion_point(field_mutable:openfoxwq.BroadcastInfo.BroadcastPlayerInfo.name_alt)
  return _s;
}
inline const std::string& BroadcastInfo_BroadcastPlayerInfo::_internal_name_alt() const {
  return _impl_.name_alt_.Get();
}
inline void BroadcastInfo_BroadcastPlayerInfo::_internal_set_name_alt(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.name_alt_.Set(value, GetArenaForAllocation());
}
inline std::string* BroadcastInfo_BroadcastPlayerInfo::_internal_mutable_name_alt() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.name_alt_.Mutable(GetArenaForAllocation());
}
inline std::string* BroadcastInfo_BroadcastPlayerInfo::release_name_alt() {
  // @@protoc_insertion_point(field_release:openfoxwq.BroadcastInfo.BroadcastPlayerInfo.name_alt)
  if (!_internal_has_name_alt()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.name_alt_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_alt_.IsDefault()) {
    _impl_.name_alt_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BroadcastInfo_BroadcastPlayerInfo::set_allocated_name_alt(std::string* name_alt) {
  if (name_alt != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.name_alt_.SetAllocated(name_alt, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_alt_.IsDefault()) {
    _impl_.name_alt_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:openfoxwq.BroadcastInfo.BroadcastPlayerInfo.name_alt)
}

// optional .openfoxwq.Rank rank = 3;
inline bool BroadcastInfo_BroadcastPlayerInfo::_internal_has_rank() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BroadcastInfo_BroadcastPlayerInfo::has_rank() const {
  return _internal_has_rank();
}
inline void BroadcastInfo_BroadcastPlayerInfo::clear_rank() {
  _impl_.rank_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::openfoxwq::Rank BroadcastInfo_BroadcastPlayerInfo::_internal_rank() const {
  return static_cast< ::openfoxwq::Rank >(_impl_.rank_);
}
inline ::openfoxwq::Rank BroadcastInfo_BroadcastPlayerInfo::rank() const {
  // @@protoc_insertion_point(field_get:openfoxwq.BroadcastInfo.BroadcastPlayerInfo.rank)
  return _internal_rank();
}
inline void BroadcastInfo_BroadcastPlayerInfo::_internal_set_rank(::openfoxwq::Rank value) {
  assert(::openfoxwq::Rank_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.rank_ = value;
}
inline void BroadcastInfo_BroadcastPlayerInfo::set_rank(::openfoxwq::Rank value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:openfoxwq.BroadcastInfo.BroadcastPlayerInfo.rank)
}

// optional .openfoxwq.Country country = 4;
inline bool BroadcastInfo_BroadcastPlayerInfo::_internal_has_country() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BroadcastInfo_BroadcastPlayerInfo::has_country() const {
  return _internal_has_country();
}
inline void BroadcastInfo_BroadcastPlayerInfo::clear_country() {
  _impl_.country_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::openfoxwq::Country BroadcastInfo_BroadcastPlayerInfo::_internal_country() const {
  return static_cast< ::openfoxwq::Country >(_impl_.country_);
}
inline ::openfoxwq::Country BroadcastInfo_BroadcastPlayerInfo::country() const {
  // @@protoc_insertion_point(field_get:openfoxwq.BroadcastInfo.BroadcastPlayerInfo.country)
  return _internal_country();
}
inline void BroadcastInfo_BroadcastPlayerInfo::_internal_set_country(::openfoxwq::Country value) {
  assert(::openfoxwq::Country_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.country_ = value;
}
inline void BroadcastInfo_BroadcastPlayerInfo::set_country(::openfoxwq::Country value) {
  _internal_set_country(value);
  // @@protoc_insertion_point(field_set:openfoxwq.BroadcastInfo.BroadcastPlayerInfo.country)
}

// -------------------------------------------------------------------

// BroadcastInfo

// required int64 id = 1;
inline bool BroadcastInfo::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BroadcastInfo::has_id() const {
  return _internal_has_id();
}
inline void BroadcastInfo::clear_id() {
  _impl_.id_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int64_t BroadcastInfo::_internal_id() const {
  return _impl_.id_;
}
inline int64_t BroadcastInfo::id() const {
  // @@protoc_insertion_point(field_get:openfoxwq.BroadcastInfo.id)
  return _internal_id();
}
inline void BroadcastInfo::_internal_set_id(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.id_ = value;
}
inline void BroadcastInfo::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:openfoxwq.BroadcastInfo.id)
}

// required .openfoxwq.BroadcastInfo.BroadcastType type = 3;
inline bool BroadcastInfo::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool BroadcastInfo::has_type() const {
  return _internal_has_type();
}
inline void BroadcastInfo::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::openfoxwq::BroadcastInfo_BroadcastType BroadcastInfo::_internal_type() const {
  return static_cast< ::openfoxwq::BroadcastInfo_BroadcastType >(_impl_.type_);
}
inline ::openfoxwq::BroadcastInfo_BroadcastType BroadcastInfo::type() const {
  // @@protoc_insertion_point(field_get:openfoxwq.BroadcastInfo.type)
  return _internal_type();
}
inline void BroadcastInfo::_internal_set_type(::openfoxwq::BroadcastInfo_BroadcastType value) {
  assert(::openfoxwq::BroadcastInfo_BroadcastType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.type_ = value;
}
inline void BroadcastInfo::set_type(::openfoxwq::BroadcastInfo_BroadcastType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:openfoxwq.BroadcastInfo.type)
}

// optional .openfoxwq.BroadcastInfo.BroadcastState state = 8;
inline bool BroadcastInfo::_internal_has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool BroadcastInfo::has_state() const {
  return _internal_has_state();
}
inline void BroadcastInfo::clear_state() {
  _impl_.state_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::openfoxwq::BroadcastInfo_BroadcastState BroadcastInfo::_internal_state() const {
  return static_cast< ::openfoxwq::BroadcastInfo_BroadcastState >(_impl_.state_);
}
inline ::openfoxwq::BroadcastInfo_BroadcastState BroadcastInfo::state() const {
  // @@protoc_insertion_point(field_get:openfoxwq.BroadcastInfo.state)
  return _internal_state();
}
inline void BroadcastInfo::_internal_set_state(::openfoxwq::BroadcastInfo_BroadcastState value) {
  assert(::openfoxwq::BroadcastInfo_BroadcastState_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.state_ = value;
}
inline void BroadcastInfo::set_state(::openfoxwq::BroadcastInfo_BroadcastState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:openfoxwq.BroadcastInfo.state)
}

// optional string broadcaster = 9;
inline bool BroadcastInfo::_internal_has_broadcaster() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BroadcastInfo::has_broadcaster() const {
  return _internal_has_broadcaster();
}
inline void BroadcastInfo::clear_broadcaster() {
  _impl_.broadcaster_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BroadcastInfo::broadcaster() const {
  // @@protoc_insertion_point(field_get:openfoxwq.BroadcastInfo.broadcaster)
  return _internal_broadcaster();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BroadcastInfo::set_broadcaster(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.broadcaster_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:openfoxwq.BroadcastInfo.broadcaster)
}
inline std::string* BroadcastInfo::mutable_broadcaster() {
  std::string* _s = _internal_mutable_broadcaster();
  // @@protoc_insertion_point(field_mutable:openfoxwq.BroadcastInfo.broadcaster)
  return _s;
}
inline const std::string& BroadcastInfo::_internal_broadcaster() const {
  return _impl_.broadcaster_.Get();
}
inline void BroadcastInfo::_internal_set_broadcaster(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.broadcaster_.Set(value, GetArenaForAllocation());
}
inline std::string* BroadcastInfo::_internal_mutable_broadcaster() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.broadcaster_.Mutable(GetArenaForAllocation());
}
inline std::string* BroadcastInfo::release_broadcaster() {
  // @@protoc_insertion_point(field_release:openfoxwq.BroadcastInfo.broadcaster)
  if (!_internal_has_broadcaster()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.broadcaster_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.broadcaster_.IsDefault()) {
    _impl_.broadcaster_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BroadcastInfo::set_allocated_broadcaster(std::string* broadcaster) {
  if (broadcaster != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.broadcaster_.SetAllocated(broadcaster, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.broadcaster_.IsDefault()) {
    _impl_.broadcaster_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:openfoxwq.BroadcastInfo.broadcaster)
}

// required int64 online_count = 10;
inline bool BroadcastInfo::_internal_has_online_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool BroadcastInfo::has_online_count() const {
  return _internal_has_online_count();
}
inline void BroadcastInfo::clear_online_count() {
  _impl_.online_count_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int64_t BroadcastInfo::_internal_online_count() const {
  return _impl_.online_count_;
}
inline int64_t BroadcastInfo::online_count() const {
  // @@protoc_insertion_point(field_get:openfoxwq.BroadcastInfo.online_count)
  return _internal_online_count();
}
inline void BroadcastInfo::_internal_set_online_count(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.online_count_ = value;
}
inline void BroadcastInfo::set_online_count(int64_t value) {
  _internal_set_online_count(value);
  // @@protoc_insertion_point(field_set:openfoxwq.BroadcastInfo.online_count)
}

// required int64 player_id_black = 11;
inline bool BroadcastInfo::_internal_has_player_id_black() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool BroadcastInfo::has_player_id_black() const {
  return _internal_has_player_id_black();
}
inline void BroadcastInfo::clear_player_id_black() {
  _impl_.player_id_black_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int64_t BroadcastInfo::_internal_player_id_black() const {
  return _impl_.player_id_black_;
}
inline int64_t BroadcastInfo::player_id_black() const {
  // @@protoc_insertion_point(field_get:openfoxwq.BroadcastInfo.player_id_black)
  return _internal_player_id_black();
}
inline void BroadcastInfo::_internal_set_player_id_black(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.player_id_black_ = value;
}
inline void BroadcastInfo::set_player_id_black(int64_t value) {
  _internal_set_player_id_black(value);
  // @@protoc_insertion_point(field_set:openfoxwq.BroadcastInfo.player_id_black)
}

// required int64 player_id_white = 12;
inline bool BroadcastInfo::_internal_has_player_id_white() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool BroadcastInfo::has_player_id_white() const {
  return _internal_has_player_id_white();
}
inline void BroadcastInfo::clear_player_id_white() {
  _impl_.player_id_white_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline int64_t BroadcastInfo::_internal_player_id_white() const {
  return _impl_.player_id_white_;
}
inline int64_t BroadcastInfo::player_id_white() const {
  // @@protoc_insertion_point(field_get:openfoxwq.BroadcastInfo.player_id_white)
  return _internal_player_id_white();
}
inline void BroadcastInfo::_internal_set_player_id_white(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.player_id_white_ = value;
}
inline void BroadcastInfo::set_player_id_white(int64_t value) {
  _internal_set_player_id_white(value);
  // @@protoc_insertion_point(field_set:openfoxwq.BroadcastInfo.player_id_white)
}

// required .openfoxwq.BroadcastInfo.BroadcastPlayerInfo player_info_black = 13;
inline bool BroadcastInfo::_internal_has_player_info_black() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.player_info_black_ != nullptr);
  return value;
}
inline bool BroadcastInfo::has_player_info_black() const {
  return _internal_has_player_info_black();
}
inline void BroadcastInfo::clear_player_info_black() {
  if (_impl_.player_info_black_ != nullptr) _impl_.player_info_black_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::openfoxwq::BroadcastInfo_BroadcastPlayerInfo& BroadcastInfo::_internal_player_info_black() const {
  const ::openfoxwq::BroadcastInfo_BroadcastPlayerInfo* p = _impl_.player_info_black_;
  return p != nullptr ? *p : reinterpret_cast<const ::openfoxwq::BroadcastInfo_BroadcastPlayerInfo&>(
      ::openfoxwq::_BroadcastInfo_BroadcastPlayerInfo_default_instance_);
}
inline const ::openfoxwq::BroadcastInfo_BroadcastPlayerInfo& BroadcastInfo::player_info_black() const {
  // @@protoc_insertion_point(field_get:openfoxwq.BroadcastInfo.player_info_black)
  return _internal_player_info_black();
}
inline void BroadcastInfo::unsafe_arena_set_allocated_player_info_black(
    ::openfoxwq::BroadcastInfo_BroadcastPlayerInfo* player_info_black) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_info_black_);
  }
  _impl_.player_info_black_ = player_info_black;
  if (player_info_black) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openfoxwq.BroadcastInfo.player_info_black)
}
inline ::openfoxwq::BroadcastInfo_BroadcastPlayerInfo* BroadcastInfo::release_player_info_black() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::openfoxwq::BroadcastInfo_BroadcastPlayerInfo* temp = _impl_.player_info_black_;
  _impl_.player_info_black_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::openfoxwq::BroadcastInfo_BroadcastPlayerInfo* BroadcastInfo::unsafe_arena_release_player_info_black() {
  // @@protoc_insertion_point(field_release:openfoxwq.BroadcastInfo.player_info_black)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::openfoxwq::BroadcastInfo_BroadcastPlayerInfo* temp = _impl_.player_info_black_;
  _impl_.player_info_black_ = nullptr;
  return temp;
}
inline ::openfoxwq::BroadcastInfo_BroadcastPlayerInfo* BroadcastInfo::_internal_mutable_player_info_black() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.player_info_black_ == nullptr) {
    auto* p = CreateMaybeMessage<::openfoxwq::BroadcastInfo_BroadcastPlayerInfo>(GetArenaForAllocation());
    _impl_.player_info_black_ = p;
  }
  return _impl_.player_info_black_;
}
inline ::openfoxwq::BroadcastInfo_BroadcastPlayerInfo* BroadcastInfo::mutable_player_info_black() {
  ::openfoxwq::BroadcastInfo_BroadcastPlayerInfo* _msg = _internal_mutable_player_info_black();
  // @@protoc_insertion_point(field_mutable:openfoxwq.BroadcastInfo.player_info_black)
  return _msg;
}
inline void BroadcastInfo::set_allocated_player_info_black(::openfoxwq::BroadcastInfo_BroadcastPlayerInfo* player_info_black) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.player_info_black_;
  }
  if (player_info_black) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(player_info_black);
    if (message_arena != submessage_arena) {
      player_info_black = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_info_black, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.player_info_black_ = player_info_black;
  // @@protoc_insertion_point(field_set_allocated:openfoxwq.BroadcastInfo.player_info_black)
}

// required .openfoxwq.BroadcastInfo.BroadcastPlayerInfo player_info_white = 14;
inline bool BroadcastInfo::_internal_has_player_info_white() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.player_info_white_ != nullptr);
  return value;
}
inline bool BroadcastInfo::has_player_info_white() const {
  return _internal_has_player_info_white();
}
inline void BroadcastInfo::clear_player_info_white() {
  if (_impl_.player_info_white_ != nullptr) _impl_.player_info_white_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::openfoxwq::BroadcastInfo_BroadcastPlayerInfo& BroadcastInfo::_internal_player_info_white() const {
  const ::openfoxwq::BroadcastInfo_BroadcastPlayerInfo* p = _impl_.player_info_white_;
  return p != nullptr ? *p : reinterpret_cast<const ::openfoxwq::BroadcastInfo_BroadcastPlayerInfo&>(
      ::openfoxwq::_BroadcastInfo_BroadcastPlayerInfo_default_instance_);
}
inline const ::openfoxwq::BroadcastInfo_BroadcastPlayerInfo& BroadcastInfo::player_info_white() const {
  // @@protoc_insertion_point(field_get:openfoxwq.BroadcastInfo.player_info_white)
  return _internal_player_info_white();
}
inline void BroadcastInfo::unsafe_arena_set_allocated_player_info_white(
    ::openfoxwq::BroadcastInfo_BroadcastPlayerInfo* player_info_white) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_info_white_);
  }
  _impl_.player_info_white_ = player_info_white;
  if (player_info_white) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openfoxwq.BroadcastInfo.player_info_white)
}
inline ::openfoxwq::BroadcastInfo_BroadcastPlayerInfo* BroadcastInfo::release_player_info_white() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::openfoxwq::BroadcastInfo_BroadcastPlayerInfo* temp = _impl_.player_info_white_;
  _impl_.player_info_white_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::openfoxwq::BroadcastInfo_BroadcastPlayerInfo* BroadcastInfo::unsafe_arena_release_player_info_white() {
  // @@protoc_insertion_point(field_release:openfoxwq.BroadcastInfo.player_info_white)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::openfoxwq::BroadcastInfo_BroadcastPlayerInfo* temp = _impl_.player_info_white_;
  _impl_.player_info_white_ = nullptr;
  return temp;
}
inline ::openfoxwq::BroadcastInfo_BroadcastPlayerInfo* BroadcastInfo::_internal_mutable_player_info_white() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.player_info_white_ == nullptr) {
    auto* p = CreateMaybeMessage<::openfoxwq::BroadcastInfo_BroadcastPlayerInfo>(GetArenaForAllocation());
    _impl_.player_info_white_ = p;
  }
  return _impl_.player_info_white_;
}
inline ::openfoxwq::BroadcastInfo_BroadcastPlayerInfo* BroadcastInfo::mutable_player_info_white() {
  ::openfoxwq::BroadcastInfo_BroadcastPlayerInfo* _msg = _internal_mutable_player_info_white();
  // @@protoc_insertion_point(field_mutable:openfoxwq.BroadcastInfo.player_info_white)
  return _msg;
}
inline void BroadcastInfo::set_allocated_player_info_white(::openfoxwq::BroadcastInfo_BroadcastPlayerInfo* player_info_white) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.player_info_white_;
  }
  if (player_info_white) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(player_info_white);
    if (message_arena != submessage_arena) {
      player_info_white = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_info_white, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.player_info_white_ = player_info_white;
  // @@protoc_insertion_point(field_set_allocated:openfoxwq.BroadcastInfo.player_info_white)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace openfoxwq

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::openfoxwq::BroadcastInfo_BroadcastType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::openfoxwq::BroadcastInfo_BroadcastType>() {
  return ::openfoxwq::BroadcastInfo_BroadcastType_descriptor();
}
template <> struct is_proto_enum< ::openfoxwq::BroadcastInfo_BroadcastState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::openfoxwq::BroadcastInfo_BroadcastState>() {
  return ::openfoxwq::BroadcastInfo_BroadcastState_descriptor();
}
template <> struct is_proto_enum< ::openfoxwq::Color> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::openfoxwq::Color>() {
  return ::openfoxwq::Color_descriptor();
}
template <> struct is_proto_enum< ::openfoxwq::Rank> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::openfoxwq::Rank>() {
  return ::openfoxwq::Rank_descriptor();
}
template <> struct is_proto_enum< ::openfoxwq::Country> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::openfoxwq::Country>() {
  return ::openfoxwq::Country_descriptor();
}
template <> struct is_proto_enum< ::openfoxwq::PlayerStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::openfoxwq::PlayerStatus>() {
  return ::openfoxwq::PlayerStatus_descriptor();
}
template <> struct is_proto_enum< ::openfoxwq::Sex> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::openfoxwq::Sex>() {
  return ::openfoxwq::Sex_descriptor();
}
template <> struct is_proto_enum< ::openfoxwq::Flair> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::openfoxwq::Flair>() {
  return ::openfoxwq::Flair_descriptor();
}
template <> struct is_proto_enum< ::openfoxwq::MembershipType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::openfoxwq::MembershipType>() {
  return ::openfoxwq::MembershipType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fcommon_2eproto
