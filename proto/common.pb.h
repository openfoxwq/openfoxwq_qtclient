// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fcommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fcommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fcommon_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fcommon_2eproto;
namespace openfoxwq {
class BroadcastRoomInfo;
struct BroadcastRoomInfoDefaultTypeInternal;
extern BroadcastRoomInfoDefaultTypeInternal _BroadcastRoomInfo_default_instance_;
class BroadcastRoomInfo_BroadcastRoomPlayerInfo;
struct BroadcastRoomInfo_BroadcastRoomPlayerInfoDefaultTypeInternal;
extern BroadcastRoomInfo_BroadcastRoomPlayerInfoDefaultTypeInternal _BroadcastRoomInfo_BroadcastRoomPlayerInfo_default_instance_;
class ExtendedGameResults;
struct ExtendedGameResultsDefaultTypeInternal;
extern ExtendedGameResultsDefaultTypeInternal _ExtendedGameResults_default_instance_;
class ExtraPlayerInfo;
struct ExtraPlayerInfoDefaultTypeInternal;
extern ExtraPlayerInfoDefaultTypeInternal _ExtraPlayerInfo_default_instance_;
class GameResults;
struct GameResultsDefaultTypeInternal;
extern GameResultsDefaultTypeInternal _GameResults_default_instance_;
class LobbySvrInfo;
struct LobbySvrInfoDefaultTypeInternal;
extern LobbySvrInfoDefaultTypeInternal _LobbySvrInfo_default_instance_;
class LobbySvrInfo_NameLocEntry_DoNotUse;
struct LobbySvrInfo_NameLocEntry_DoNotUseDefaultTypeInternal;
extern LobbySvrInfo_NameLocEntry_DoNotUseDefaultTypeInternal _LobbySvrInfo_NameLocEntry_DoNotUse_default_instance_;
class PlayerInfo;
struct PlayerInfoDefaultTypeInternal;
extern PlayerInfoDefaultTypeInternal _PlayerInfo_default_instance_;
class ProxyLineInfo;
struct ProxyLineInfoDefaultTypeInternal;
extern ProxyLineInfoDefaultTypeInternal _ProxyLineInfo_default_instance_;
class ProxyLineInfo_ProxyAddressInfo;
struct ProxyLineInfo_ProxyAddressInfoDefaultTypeInternal;
extern ProxyLineInfo_ProxyAddressInfoDefaultTypeInternal _ProxyLineInfo_ProxyAddressInfo_default_instance_;
class UnhandledMessage;
struct UnhandledMessageDefaultTypeInternal;
extern UnhandledMessageDefaultTypeInternal _UnhandledMessage_default_instance_;
class VersionInfo;
struct VersionInfoDefaultTypeInternal;
extern VersionInfoDefaultTypeInternal _VersionInfo_default_instance_;
}  // namespace openfoxwq
PROTOBUF_NAMESPACE_OPEN
template<> ::openfoxwq::BroadcastRoomInfo* Arena::CreateMaybeMessage<::openfoxwq::BroadcastRoomInfo>(Arena*);
template<> ::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo* Arena::CreateMaybeMessage<::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo>(Arena*);
template<> ::openfoxwq::ExtendedGameResults* Arena::CreateMaybeMessage<::openfoxwq::ExtendedGameResults>(Arena*);
template<> ::openfoxwq::ExtraPlayerInfo* Arena::CreateMaybeMessage<::openfoxwq::ExtraPlayerInfo>(Arena*);
template<> ::openfoxwq::GameResults* Arena::CreateMaybeMessage<::openfoxwq::GameResults>(Arena*);
template<> ::openfoxwq::LobbySvrInfo* Arena::CreateMaybeMessage<::openfoxwq::LobbySvrInfo>(Arena*);
template<> ::openfoxwq::LobbySvrInfo_NameLocEntry_DoNotUse* Arena::CreateMaybeMessage<::openfoxwq::LobbySvrInfo_NameLocEntry_DoNotUse>(Arena*);
template<> ::openfoxwq::PlayerInfo* Arena::CreateMaybeMessage<::openfoxwq::PlayerInfo>(Arena*);
template<> ::openfoxwq::ProxyLineInfo* Arena::CreateMaybeMessage<::openfoxwq::ProxyLineInfo>(Arena*);
template<> ::openfoxwq::ProxyLineInfo_ProxyAddressInfo* Arena::CreateMaybeMessage<::openfoxwq::ProxyLineInfo_ProxyAddressInfo>(Arena*);
template<> ::openfoxwq::UnhandledMessage* Arena::CreateMaybeMessage<::openfoxwq::UnhandledMessage>(Arena*);
template<> ::openfoxwq::VersionInfo* Arena::CreateMaybeMessage<::openfoxwq::VersionInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace openfoxwq {

enum BroadcastRoomInfo_RoomType : int {
  BroadcastRoomInfo_RoomType_RT_UNKNOWN = 0,
  BroadcastRoomInfo_RoomType_RT_MATCH = 1,
  BroadcastRoomInfo_RoomType_RT_BROADCAST = 4,
  BroadcastRoomInfo_RoomType_RT_COMMENTARY = 5,
  BroadcastRoomInfo_RoomType_RT_CHAMPIONSHIP = 6
};
bool BroadcastRoomInfo_RoomType_IsValid(int value);
constexpr BroadcastRoomInfo_RoomType BroadcastRoomInfo_RoomType_RoomType_MIN = BroadcastRoomInfo_RoomType_RT_UNKNOWN;
constexpr BroadcastRoomInfo_RoomType BroadcastRoomInfo_RoomType_RoomType_MAX = BroadcastRoomInfo_RoomType_RT_CHAMPIONSHIP;
constexpr int BroadcastRoomInfo_RoomType_RoomType_ARRAYSIZE = BroadcastRoomInfo_RoomType_RoomType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BroadcastRoomInfo_RoomType_descriptor();
template<typename T>
inline const std::string& BroadcastRoomInfo_RoomType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BroadcastRoomInfo_RoomType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BroadcastRoomInfo_RoomType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BroadcastRoomInfo_RoomType_descriptor(), enum_t_value);
}
inline bool BroadcastRoomInfo_RoomType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BroadcastRoomInfo_RoomType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BroadcastRoomInfo_RoomType>(
    BroadcastRoomInfo_RoomType_descriptor(), name, value);
}
enum BroadcastRoomInfo_RoomState : int {
  BroadcastRoomInfo_RoomState_RS_UNKNOWN = 0,
  BroadcastRoomInfo_RoomState_RS_OPENING = 1,
  BroadcastRoomInfo_RoomState_RS_1PERIOD = 2,
  BroadcastRoomInfo_RoomState_RS_MIDDLEGAME = 3,
  BroadcastRoomInfo_RoomState_RS_ENDGAME = 4,
  BroadcastRoomInfo_RoomState_RS_END = 5,
  BroadcastRoomInfo_RoomState_RS_REVIEW = 6
};
bool BroadcastRoomInfo_RoomState_IsValid(int value);
constexpr BroadcastRoomInfo_RoomState BroadcastRoomInfo_RoomState_RoomState_MIN = BroadcastRoomInfo_RoomState_RS_UNKNOWN;
constexpr BroadcastRoomInfo_RoomState BroadcastRoomInfo_RoomState_RoomState_MAX = BroadcastRoomInfo_RoomState_RS_REVIEW;
constexpr int BroadcastRoomInfo_RoomState_RoomState_ARRAYSIZE = BroadcastRoomInfo_RoomState_RoomState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BroadcastRoomInfo_RoomState_descriptor();
template<typename T>
inline const std::string& BroadcastRoomInfo_RoomState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BroadcastRoomInfo_RoomState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BroadcastRoomInfo_RoomState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BroadcastRoomInfo_RoomState_descriptor(), enum_t_value);
}
inline bool BroadcastRoomInfo_RoomState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BroadcastRoomInfo_RoomState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BroadcastRoomInfo_RoomState>(
    BroadcastRoomInfo_RoomState_descriptor(), name, value);
}
enum Color : int {
  COL_UNKNOWN = 0,
  COL_BLACK = 1,
  COL_WHITE = 2
};
bool Color_IsValid(int value);
constexpr Color Color_MIN = COL_UNKNOWN;
constexpr Color Color_MAX = COL_WHITE;
constexpr int Color_ARRAYSIZE = Color_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Color_descriptor();
template<typename T>
inline const std::string& Color_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Color>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Color_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Color_descriptor(), enum_t_value);
}
inline bool Color_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Color* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Color>(
    Color_descriptor(), name, value);
}
enum Rank : int {
  RANK_18K = 0,
  RANK_17K = 1,
  RANK_16K = 2,
  RANK_15K = 3,
  RANK_14K = 4,
  RANK_13K = 5,
  RANK_12K = 6,
  RANK_11K = 7,
  RANK_10K = 8,
  RANK_9K = 9,
  RANK_8K = 10,
  RANK_7K = 11,
  RANK_6K = 12,
  RANK_5K = 13,
  RANK_4K = 14,
  RANK_3K = 15,
  RANK_2K = 16,
  RANK_1K = 17,
  RANK_1D = 18,
  RANK_2D = 19,
  RANK_3D = 20,
  RANK_4D = 21,
  RANK_5D = 22,
  RANK_6D = 23,
  RANK_7D = 24,
  RANK_8D = 25,
  RANK_9D = 26,
  RANK_10D = 27,
  RANK_1P = 100,
  RANK_2P = 101,
  RANK_3P = 102,
  RANK_4P = 103,
  RANK_5P = 104,
  RANK_6P = 105,
  RANK_7P = 106,
  RANK_8P = 107,
  RANK_9P = 108,
  RANK_10P = 109
};
bool Rank_IsValid(int value);
constexpr Rank Rank_MIN = RANK_18K;
constexpr Rank Rank_MAX = RANK_10P;
constexpr int Rank_ARRAYSIZE = Rank_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Rank_descriptor();
template<typename T>
inline const std::string& Rank_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Rank>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Rank_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Rank_descriptor(), enum_t_value);
}
inline bool Rank_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Rank* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Rank>(
    Rank_descriptor(), name, value);
}
enum Country : int {
  UNKNOWN = 0,
  USA = 1,
  RUSSIA = 7,
  SOUTHAFRICA = 27,
  NETHERLANDS = 31,
  FRANCE = 33,
  ITALY = 39,
  SWEDEN = 46,
  GERMANY = 49,
  CHILE = 56,
  PHILIPPINES = 63,
  SINGAPORE = 65,
  JAPAN = 81,
  TAIWAN = 83,
  KOREA = 82,
  CHINA = 86,
  ALBANIA = 355,
  UKRAINE = 380,
  HONGKONG = 852,
  MACAU = 853,
  CANADA = 11111
};
bool Country_IsValid(int value);
constexpr Country Country_MIN = UNKNOWN;
constexpr Country Country_MAX = CANADA;
constexpr int Country_ARRAYSIZE = Country_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Country_descriptor();
template<typename T>
inline const std::string& Country_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Country>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Country_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Country_descriptor(), enum_t_value);
}
inline bool Country_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Country* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Country>(
    Country_descriptor(), name, value);
}
enum PlayerStatus : int {
  PSTATUS_IDLE = 0,
  PSTATUS_MATCH = 1,
  PSTATUS_WATCH = 2
};
bool PlayerStatus_IsValid(int value);
constexpr PlayerStatus PlayerStatus_MIN = PSTATUS_IDLE;
constexpr PlayerStatus PlayerStatus_MAX = PSTATUS_WATCH;
constexpr int PlayerStatus_ARRAYSIZE = PlayerStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlayerStatus_descriptor();
template<typename T>
inline const std::string& PlayerStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PlayerStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PlayerStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PlayerStatus_descriptor(), enum_t_value);
}
inline bool PlayerStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PlayerStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PlayerStatus>(
    PlayerStatus_descriptor(), name, value);
}
enum GameResultType : int {
  GRT_ALL = 0,
  GRT_CURRENT = 1,
  GRT_RANKED = 2,
  GRT_FREE = 5
};
bool GameResultType_IsValid(int value);
constexpr GameResultType GameResultType_MIN = GRT_ALL;
constexpr GameResultType GameResultType_MAX = GRT_FREE;
constexpr int GameResultType_ARRAYSIZE = GameResultType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GameResultType_descriptor();
template<typename T>
inline const std::string& GameResultType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GameResultType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GameResultType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GameResultType_descriptor(), enum_t_value);
}
inline bool GameResultType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GameResultType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GameResultType>(
    GameResultType_descriptor(), name, value);
}
// ===================================================================

class VersionInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openfoxwq.VersionInfo) */ {
 public:
  inline VersionInfo() : VersionInfo(nullptr) {}
  ~VersionInfo() override;
  explicit PROTOBUF_CONSTEXPR VersionInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VersionInfo(const VersionInfo& from);
  VersionInfo(VersionInfo&& from) noexcept
    : VersionInfo() {
    *this = ::std::move(from);
  }

  inline VersionInfo& operator=(const VersionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline VersionInfo& operator=(VersionInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VersionInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const VersionInfo* internal_default_instance() {
    return reinterpret_cast<const VersionInfo*>(
               &_VersionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VersionInfo& a, VersionInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(VersionInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VersionInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VersionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VersionInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VersionInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VersionInfo& from) {
    VersionInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VersionInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openfoxwq.VersionInfo";
  }
  protected:
  explicit VersionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQgiFieldNumber = 6,
    kQgiHashFieldNumber = 7,
    kUpdateInfoFieldNumber = 3,
    kInstallUrlFieldNumber = 5,
    kVersion1FieldNumber = 1,
    kVersion2FieldNumber = 2,
  };
  // repeated string qgi = 6;
  int qgi_size() const;
  private:
  int _internal_qgi_size() const;
  public:
  void clear_qgi();
  const std::string& qgi(int index) const;
  std::string* mutable_qgi(int index);
  void set_qgi(int index, const std::string& value);
  void set_qgi(int index, std::string&& value);
  void set_qgi(int index, const char* value);
  void set_qgi(int index, const char* value, size_t size);
  std::string* add_qgi();
  void add_qgi(const std::string& value);
  void add_qgi(std::string&& value);
  void add_qgi(const char* value);
  void add_qgi(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& qgi() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_qgi();
  private:
  const std::string& _internal_qgi(int index) const;
  std::string* _internal_add_qgi();
  public:

  // repeated string qgi_hash = 7;
  int qgi_hash_size() const;
  private:
  int _internal_qgi_hash_size() const;
  public:
  void clear_qgi_hash();
  const std::string& qgi_hash(int index) const;
  std::string* mutable_qgi_hash(int index);
  void set_qgi_hash(int index, const std::string& value);
  void set_qgi_hash(int index, std::string&& value);
  void set_qgi_hash(int index, const char* value);
  void set_qgi_hash(int index, const char* value, size_t size);
  std::string* add_qgi_hash();
  void add_qgi_hash(const std::string& value);
  void add_qgi_hash(std::string&& value);
  void add_qgi_hash(const char* value);
  void add_qgi_hash(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& qgi_hash() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_qgi_hash();
  private:
  const std::string& _internal_qgi_hash(int index) const;
  std::string* _internal_add_qgi_hash();
  public:

  // optional string update_info = 3;
  bool has_update_info() const;
  private:
  bool _internal_has_update_info() const;
  public:
  void clear_update_info();
  const std::string& update_info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_update_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_update_info();
  PROTOBUF_NODISCARD std::string* release_update_info();
  void set_allocated_update_info(std::string* update_info);
  private:
  const std::string& _internal_update_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_update_info(const std::string& value);
  std::string* _internal_mutable_update_info();
  public:

  // optional string install_url = 5;
  bool has_install_url() const;
  private:
  bool _internal_has_install_url() const;
  public:
  void clear_install_url();
  const std::string& install_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_install_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_install_url();
  PROTOBUF_NODISCARD std::string* release_install_url();
  void set_allocated_install_url(std::string* install_url);
  private:
  const std::string& _internal_install_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_install_url(const std::string& value);
  std::string* _internal_mutable_install_url();
  public:

  // required int64 version1 = 1;
  bool has_version1() const;
  private:
  bool _internal_has_version1() const;
  public:
  void clear_version1();
  int64_t version1() const;
  void set_version1(int64_t value);
  private:
  int64_t _internal_version1() const;
  void _internal_set_version1(int64_t value);
  public:

  // required int64 version2 = 2;
  bool has_version2() const;
  private:
  bool _internal_has_version2() const;
  public:
  void clear_version2();
  int64_t version2() const;
  void set_version2(int64_t value);
  private:
  int64_t _internal_version2() const;
  void _internal_set_version2(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:openfoxwq.VersionInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> qgi_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> qgi_hash_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr update_info_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr install_url_;
    int64_t version1_;
    int64_t version2_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class ProxyLineInfo_ProxyAddressInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openfoxwq.ProxyLineInfo.ProxyAddressInfo) */ {
 public:
  inline ProxyLineInfo_ProxyAddressInfo() : ProxyLineInfo_ProxyAddressInfo(nullptr) {}
  ~ProxyLineInfo_ProxyAddressInfo() override;
  explicit PROTOBUF_CONSTEXPR ProxyLineInfo_ProxyAddressInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProxyLineInfo_ProxyAddressInfo(const ProxyLineInfo_ProxyAddressInfo& from);
  ProxyLineInfo_ProxyAddressInfo(ProxyLineInfo_ProxyAddressInfo&& from) noexcept
    : ProxyLineInfo_ProxyAddressInfo() {
    *this = ::std::move(from);
  }

  inline ProxyLineInfo_ProxyAddressInfo& operator=(const ProxyLineInfo_ProxyAddressInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProxyLineInfo_ProxyAddressInfo& operator=(ProxyLineInfo_ProxyAddressInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProxyLineInfo_ProxyAddressInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProxyLineInfo_ProxyAddressInfo* internal_default_instance() {
    return reinterpret_cast<const ProxyLineInfo_ProxyAddressInfo*>(
               &_ProxyLineInfo_ProxyAddressInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProxyLineInfo_ProxyAddressInfo& a, ProxyLineInfo_ProxyAddressInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ProxyLineInfo_ProxyAddressInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProxyLineInfo_ProxyAddressInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProxyLineInfo_ProxyAddressInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProxyLineInfo_ProxyAddressInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProxyLineInfo_ProxyAddressInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProxyLineInfo_ProxyAddressInfo& from) {
    ProxyLineInfo_ProxyAddressInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProxyLineInfo_ProxyAddressInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openfoxwq.ProxyLineInfo.ProxyAddressInfo";
  }
  protected:
  explicit ProxyLineInfo_ProxyAddressInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHost1FieldNumber = 1,
    kHost2FieldNumber = 3,
    kPort1FieldNumber = 2,
    kPort2FieldNumber = 4,
  };
  // required string host1 = 1;
  bool has_host1() const;
  private:
  bool _internal_has_host1() const;
  public:
  void clear_host1();
  const std::string& host1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_host1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_host1();
  PROTOBUF_NODISCARD std::string* release_host1();
  void set_allocated_host1(std::string* host1);
  private:
  const std::string& _internal_host1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host1(const std::string& value);
  std::string* _internal_mutable_host1();
  public:

  // required string host2 = 3;
  bool has_host2() const;
  private:
  bool _internal_has_host2() const;
  public:
  void clear_host2();
  const std::string& host2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_host2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_host2();
  PROTOBUF_NODISCARD std::string* release_host2();
  void set_allocated_host2(std::string* host2);
  private:
  const std::string& _internal_host2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host2(const std::string& value);
  std::string* _internal_mutable_host2();
  public:

  // required int64 port1 = 2;
  bool has_port1() const;
  private:
  bool _internal_has_port1() const;
  public:
  void clear_port1();
  int64_t port1() const;
  void set_port1(int64_t value);
  private:
  int64_t _internal_port1() const;
  void _internal_set_port1(int64_t value);
  public:

  // required int64 port2 = 4;
  bool has_port2() const;
  private:
  bool _internal_has_port2() const;
  public:
  void clear_port2();
  int64_t port2() const;
  void set_port2(int64_t value);
  private:
  int64_t _internal_port2() const;
  void _internal_set_port2(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:openfoxwq.ProxyLineInfo.ProxyAddressInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host1_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host2_;
    int64_t port1_;
    int64_t port2_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class ProxyLineInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openfoxwq.ProxyLineInfo) */ {
 public:
  inline ProxyLineInfo() : ProxyLineInfo(nullptr) {}
  ~ProxyLineInfo() override;
  explicit PROTOBUF_CONSTEXPR ProxyLineInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProxyLineInfo(const ProxyLineInfo& from);
  ProxyLineInfo(ProxyLineInfo&& from) noexcept
    : ProxyLineInfo() {
    *this = ::std::move(from);
  }

  inline ProxyLineInfo& operator=(const ProxyLineInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProxyLineInfo& operator=(ProxyLineInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProxyLineInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProxyLineInfo* internal_default_instance() {
    return reinterpret_cast<const ProxyLineInfo*>(
               &_ProxyLineInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ProxyLineInfo& a, ProxyLineInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ProxyLineInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProxyLineInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProxyLineInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProxyLineInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProxyLineInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProxyLineInfo& from) {
    ProxyLineInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProxyLineInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openfoxwq.ProxyLineInfo";
  }
  protected:
  explicit ProxyLineInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ProxyLineInfo_ProxyAddressInfo ProxyAddressInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kAddressInfoFieldNumber = 3,
    kIndexFieldNumber = 1,
  };
  // required string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required .openfoxwq.ProxyLineInfo.ProxyAddressInfo address_info = 3;
  bool has_address_info() const;
  private:
  bool _internal_has_address_info() const;
  public:
  void clear_address_info();
  const ::openfoxwq::ProxyLineInfo_ProxyAddressInfo& address_info() const;
  PROTOBUF_NODISCARD ::openfoxwq::ProxyLineInfo_ProxyAddressInfo* release_address_info();
  ::openfoxwq::ProxyLineInfo_ProxyAddressInfo* mutable_address_info();
  void set_allocated_address_info(::openfoxwq::ProxyLineInfo_ProxyAddressInfo* address_info);
  private:
  const ::openfoxwq::ProxyLineInfo_ProxyAddressInfo& _internal_address_info() const;
  ::openfoxwq::ProxyLineInfo_ProxyAddressInfo* _internal_mutable_address_info();
  public:
  void unsafe_arena_set_allocated_address_info(
      ::openfoxwq::ProxyLineInfo_ProxyAddressInfo* address_info);
  ::openfoxwq::ProxyLineInfo_ProxyAddressInfo* unsafe_arena_release_address_info();

  // required int64 index = 1;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  int64_t index() const;
  void set_index(int64_t value);
  private:
  int64_t _internal_index() const;
  void _internal_set_index(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:openfoxwq.ProxyLineInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::openfoxwq::ProxyLineInfo_ProxyAddressInfo* address_info_;
    int64_t index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class LobbySvrInfo_NameLocEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<LobbySvrInfo_NameLocEntry_DoNotUse, 
    int32_t, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<LobbySvrInfo_NameLocEntry_DoNotUse, 
    int32_t, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  LobbySvrInfo_NameLocEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR LobbySvrInfo_NameLocEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit LobbySvrInfo_NameLocEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const LobbySvrInfo_NameLocEntry_DoNotUse& other);
  static const LobbySvrInfo_NameLocEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const LobbySvrInfo_NameLocEntry_DoNotUse*>(&_LobbySvrInfo_NameLocEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "openfoxwq.LobbySvrInfo.NameLocEntry.value");
#else
    (void) s;
#endif
    return true;
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_proto_2fcommon_2eproto;
};

// -------------------------------------------------------------------

class LobbySvrInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openfoxwq.LobbySvrInfo) */ {
 public:
  inline LobbySvrInfo() : LobbySvrInfo(nullptr) {}
  ~LobbySvrInfo() override;
  explicit PROTOBUF_CONSTEXPR LobbySvrInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LobbySvrInfo(const LobbySvrInfo& from);
  LobbySvrInfo(LobbySvrInfo&& from) noexcept
    : LobbySvrInfo() {
    *this = ::std::move(from);
  }

  inline LobbySvrInfo& operator=(const LobbySvrInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline LobbySvrInfo& operator=(LobbySvrInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LobbySvrInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const LobbySvrInfo* internal_default_instance() {
    return reinterpret_cast<const LobbySvrInfo*>(
               &_LobbySvrInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LobbySvrInfo& a, LobbySvrInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(LobbySvrInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LobbySvrInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LobbySvrInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LobbySvrInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LobbySvrInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LobbySvrInfo& from) {
    LobbySvrInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LobbySvrInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openfoxwq.LobbySvrInfo";
  }
  protected:
  explicit LobbySvrInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kNameLocFieldNumber = 23,
    kNameFieldNumber = 2,
    kBroadcastHostFieldNumber = 5,
    kUnknownHost1FieldNumber = 13,
    kUnknownHost2FieldNumber = 15,
    kUnknownHost3FieldNumber = 17,
    kUnknownHost4FieldNumber = 19,
    kPlayHostFieldNumber = 21,
    kNumPlayersFieldNumber = 3,
    kNumMatchesFieldNumber = 4,
    kUnknownField7FieldNumber = 7,
    kUnknownField8FieldNumber = 8,
    kBroadcastPortFieldNumber = 6,
    kUnknownPort1FieldNumber = 14,
    kUnknownPort2FieldNumber = 16,
    kUnknownPort3FieldNumber = 18,
    kUnknownPort4FieldNumber = 20,
    kPlayPortFieldNumber = 22,
  };
  // map<int32, string> name_loc = 23;
  int name_loc_size() const;
  private:
  int _internal_name_loc_size() const;
  public:
  void clear_name_loc();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >&
      _internal_name_loc() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >*
      _internal_mutable_name_loc();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >&
      name_loc() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >*
      mutable_name_loc();

  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string broadcast_host = 5;
  bool has_broadcast_host() const;
  private:
  bool _internal_has_broadcast_host() const;
  public:
  void clear_broadcast_host();
  const std::string& broadcast_host() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_broadcast_host(ArgT0&& arg0, ArgT... args);
  std::string* mutable_broadcast_host();
  PROTOBUF_NODISCARD std::string* release_broadcast_host();
  void set_allocated_broadcast_host(std::string* broadcast_host);
  private:
  const std::string& _internal_broadcast_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_broadcast_host(const std::string& value);
  std::string* _internal_mutable_broadcast_host();
  public:

  // optional string unknown_host_1 = 13;
  bool has_unknown_host_1() const;
  private:
  bool _internal_has_unknown_host_1() const;
  public:
  void clear_unknown_host_1();
  const std::string& unknown_host_1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unknown_host_1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unknown_host_1();
  PROTOBUF_NODISCARD std::string* release_unknown_host_1();
  void set_allocated_unknown_host_1(std::string* unknown_host_1);
  private:
  const std::string& _internal_unknown_host_1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unknown_host_1(const std::string& value);
  std::string* _internal_mutable_unknown_host_1();
  public:

  // optional string unknown_host_2 = 15;
  bool has_unknown_host_2() const;
  private:
  bool _internal_has_unknown_host_2() const;
  public:
  void clear_unknown_host_2();
  const std::string& unknown_host_2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unknown_host_2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unknown_host_2();
  PROTOBUF_NODISCARD std::string* release_unknown_host_2();
  void set_allocated_unknown_host_2(std::string* unknown_host_2);
  private:
  const std::string& _internal_unknown_host_2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unknown_host_2(const std::string& value);
  std::string* _internal_mutable_unknown_host_2();
  public:

  // optional string unknown_host_3 = 17;
  bool has_unknown_host_3() const;
  private:
  bool _internal_has_unknown_host_3() const;
  public:
  void clear_unknown_host_3();
  const std::string& unknown_host_3() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unknown_host_3(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unknown_host_3();
  PROTOBUF_NODISCARD std::string* release_unknown_host_3();
  void set_allocated_unknown_host_3(std::string* unknown_host_3);
  private:
  const std::string& _internal_unknown_host_3() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unknown_host_3(const std::string& value);
  std::string* _internal_mutable_unknown_host_3();
  public:

  // optional string unknown_host_4 = 19;
  bool has_unknown_host_4() const;
  private:
  bool _internal_has_unknown_host_4() const;
  public:
  void clear_unknown_host_4();
  const std::string& unknown_host_4() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unknown_host_4(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unknown_host_4();
  PROTOBUF_NODISCARD std::string* release_unknown_host_4();
  void set_allocated_unknown_host_4(std::string* unknown_host_4);
  private:
  const std::string& _internal_unknown_host_4() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unknown_host_4(const std::string& value);
  std::string* _internal_mutable_unknown_host_4();
  public:

  // optional string play_host = 21;
  bool has_play_host() const;
  private:
  bool _internal_has_play_host() const;
  public:
  void clear_play_host();
  const std::string& play_host() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_play_host(ArgT0&& arg0, ArgT... args);
  std::string* mutable_play_host();
  PROTOBUF_NODISCARD std::string* release_play_host();
  void set_allocated_play_host(std::string* play_host);
  private:
  const std::string& _internal_play_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_play_host(const std::string& value);
  std::string* _internal_mutable_play_host();
  public:

  // optional int64 num_players = 3;
  bool has_num_players() const;
  private:
  bool _internal_has_num_players() const;
  public:
  void clear_num_players();
  int64_t num_players() const;
  void set_num_players(int64_t value);
  private:
  int64_t _internal_num_players() const;
  void _internal_set_num_players(int64_t value);
  public:

  // optional int64 num_matches = 4;
  bool has_num_matches() const;
  private:
  bool _internal_has_num_matches() const;
  public:
  void clear_num_matches();
  int64_t num_matches() const;
  void set_num_matches(int64_t value);
  private:
  int64_t _internal_num_matches() const;
  void _internal_set_num_matches(int64_t value);
  public:

  // optional int64 unknown_field_7 = 7;
  bool has_unknown_field_7() const;
  private:
  bool _internal_has_unknown_field_7() const;
  public:
  void clear_unknown_field_7();
  int64_t unknown_field_7() const;
  void set_unknown_field_7(int64_t value);
  private:
  int64_t _internal_unknown_field_7() const;
  void _internal_set_unknown_field_7(int64_t value);
  public:

  // optional int64 unknown_field_8 = 8;
  bool has_unknown_field_8() const;
  private:
  bool _internal_has_unknown_field_8() const;
  public:
  void clear_unknown_field_8();
  int64_t unknown_field_8() const;
  void set_unknown_field_8(int64_t value);
  private:
  int64_t _internal_unknown_field_8() const;
  void _internal_set_unknown_field_8(int64_t value);
  public:

  // optional int32 broadcast_port = 6;
  bool has_broadcast_port() const;
  private:
  bool _internal_has_broadcast_port() const;
  public:
  void clear_broadcast_port();
  int32_t broadcast_port() const;
  void set_broadcast_port(int32_t value);
  private:
  int32_t _internal_broadcast_port() const;
  void _internal_set_broadcast_port(int32_t value);
  public:

  // optional int32 unknown_port_1 = 14;
  bool has_unknown_port_1() const;
  private:
  bool _internal_has_unknown_port_1() const;
  public:
  void clear_unknown_port_1();
  int32_t unknown_port_1() const;
  void set_unknown_port_1(int32_t value);
  private:
  int32_t _internal_unknown_port_1() const;
  void _internal_set_unknown_port_1(int32_t value);
  public:

  // optional int32 unknown_port_2 = 16;
  bool has_unknown_port_2() const;
  private:
  bool _internal_has_unknown_port_2() const;
  public:
  void clear_unknown_port_2();
  int32_t unknown_port_2() const;
  void set_unknown_port_2(int32_t value);
  private:
  int32_t _internal_unknown_port_2() const;
  void _internal_set_unknown_port_2(int32_t value);
  public:

  // optional int32 unknown_port_3 = 18;
  bool has_unknown_port_3() const;
  private:
  bool _internal_has_unknown_port_3() const;
  public:
  void clear_unknown_port_3();
  int32_t unknown_port_3() const;
  void set_unknown_port_3(int32_t value);
  private:
  int32_t _internal_unknown_port_3() const;
  void _internal_set_unknown_port_3(int32_t value);
  public:

  // optional int32 unknown_port_4 = 20;
  bool has_unknown_port_4() const;
  private:
  bool _internal_has_unknown_port_4() const;
  public:
  void clear_unknown_port_4();
  int32_t unknown_port_4() const;
  void set_unknown_port_4(int32_t value);
  private:
  int32_t _internal_unknown_port_4() const;
  void _internal_set_unknown_port_4(int32_t value);
  public:

  // optional int32 play_port = 22;
  bool has_play_port() const;
  private:
  bool _internal_has_play_port() const;
  public:
  void clear_play_port();
  int32_t play_port() const;
  void set_play_port(int32_t value);
  private:
  int32_t _internal_play_port() const;
  void _internal_set_play_port(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:openfoxwq.LobbySvrInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        LobbySvrInfo_NameLocEntry_DoNotUse,
        int32_t, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> name_loc_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr broadcast_host_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unknown_host_1_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unknown_host_2_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unknown_host_3_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unknown_host_4_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr play_host_;
    int64_t num_players_;
    int64_t num_matches_;
    int64_t unknown_field_7_;
    int64_t unknown_field_8_;
    int32_t broadcast_port_;
    int32_t unknown_port_1_;
    int32_t unknown_port_2_;
    int32_t unknown_port_3_;
    int32_t unknown_port_4_;
    int32_t play_port_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class PlayerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openfoxwq.PlayerInfo) */ {
 public:
  inline PlayerInfo() : PlayerInfo(nullptr) {}
  ~PlayerInfo() override;
  explicit PROTOBUF_CONSTEXPR PlayerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerInfo(const PlayerInfo& from);
  PlayerInfo(PlayerInfo&& from) noexcept
    : PlayerInfo() {
    *this = ::std::move(from);
  }

  inline PlayerInfo& operator=(const PlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerInfo& operator=(PlayerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerInfo* internal_default_instance() {
    return reinterpret_cast<const PlayerInfo*>(
               &_PlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PlayerInfo& a, PlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerInfo& from) {
    PlayerInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openfoxwq.PlayerInfo";
  }
  protected:
  explicit PlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kNameNativeFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
    kRankFieldNumber = 4,
    kCountryFieldNumber = 5,
    kClubIdFieldNumber = 6,
    kUnknownField8FieldNumber = 8,
    kAcceptingMatchesFieldNumber = 7,
    kStatusFieldNumber = 9,
    kRankedWinsFieldNumber = 10,
    kRankedLossesFieldNumber = 11,
    kUnknownField13FieldNumber = 13,
    kFoxCoinFieldNumber = 21,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string name_native = 3;
  bool has_name_native() const;
  private:
  bool _internal_has_name_native() const;
  public:
  void clear_name_native();
  const std::string& name_native() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name_native(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name_native();
  PROTOBUF_NODISCARD std::string* release_name_native();
  void set_allocated_name_native(std::string* name_native);
  private:
  const std::string& _internal_name_native() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name_native(const std::string& value);
  std::string* _internal_mutable_name_native();
  public:

  // required int64 player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  int64_t player_id() const;
  void set_player_id(int64_t value);
  private:
  int64_t _internal_player_id() const;
  void _internal_set_player_id(int64_t value);
  public:

  // optional .openfoxwq.Rank rank = 4;
  bool has_rank() const;
  private:
  bool _internal_has_rank() const;
  public:
  void clear_rank();
  ::openfoxwq::Rank rank() const;
  void set_rank(::openfoxwq::Rank value);
  private:
  ::openfoxwq::Rank _internal_rank() const;
  void _internal_set_rank(::openfoxwq::Rank value);
  public:

  // optional .openfoxwq.Country country = 5;
  bool has_country() const;
  private:
  bool _internal_has_country() const;
  public:
  void clear_country();
  ::openfoxwq::Country country() const;
  void set_country(::openfoxwq::Country value);
  private:
  ::openfoxwq::Country _internal_country() const;
  void _internal_set_country(::openfoxwq::Country value);
  public:

  // optional int64 club_id = 6;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  int64_t club_id() const;
  void set_club_id(int64_t value);
  private:
  int64_t _internal_club_id() const;
  void _internal_set_club_id(int64_t value);
  public:

  // optional int64 unknown_field_8 = 8;
  bool has_unknown_field_8() const;
  private:
  bool _internal_has_unknown_field_8() const;
  public:
  void clear_unknown_field_8();
  int64_t unknown_field_8() const;
  void set_unknown_field_8(int64_t value);
  private:
  int64_t _internal_unknown_field_8() const;
  void _internal_set_unknown_field_8(int64_t value);
  public:

  // optional bool accepting_matches = 7;
  bool has_accepting_matches() const;
  private:
  bool _internal_has_accepting_matches() const;
  public:
  void clear_accepting_matches();
  bool accepting_matches() const;
  void set_accepting_matches(bool value);
  private:
  bool _internal_accepting_matches() const;
  void _internal_set_accepting_matches(bool value);
  public:

  // optional .openfoxwq.PlayerStatus status = 9;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::openfoxwq::PlayerStatus status() const;
  void set_status(::openfoxwq::PlayerStatus value);
  private:
  ::openfoxwq::PlayerStatus _internal_status() const;
  void _internal_set_status(::openfoxwq::PlayerStatus value);
  public:

  // optional int64 ranked_wins = 10;
  bool has_ranked_wins() const;
  private:
  bool _internal_has_ranked_wins() const;
  public:
  void clear_ranked_wins();
  int64_t ranked_wins() const;
  void set_ranked_wins(int64_t value);
  private:
  int64_t _internal_ranked_wins() const;
  void _internal_set_ranked_wins(int64_t value);
  public:

  // optional int64 ranked_losses = 11;
  bool has_ranked_losses() const;
  private:
  bool _internal_has_ranked_losses() const;
  public:
  void clear_ranked_losses();
  int64_t ranked_losses() const;
  void set_ranked_losses(int64_t value);
  private:
  int64_t _internal_ranked_losses() const;
  void _internal_set_ranked_losses(int64_t value);
  public:

  // optional int64 unknown_field_13 = 13;
  bool has_unknown_field_13() const;
  private:
  bool _internal_has_unknown_field_13() const;
  public:
  void clear_unknown_field_13();
  int64_t unknown_field_13() const;
  void set_unknown_field_13(int64_t value);
  private:
  int64_t _internal_unknown_field_13() const;
  void _internal_set_unknown_field_13(int64_t value);
  public:

  // optional int64 fox_coin = 21;
  bool has_fox_coin() const;
  private:
  bool _internal_has_fox_coin() const;
  public:
  void clear_fox_coin();
  int64_t fox_coin() const;
  void set_fox_coin(int64_t value);
  private:
  int64_t _internal_fox_coin() const;
  void _internal_set_fox_coin(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:openfoxwq.PlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_native_;
    int64_t player_id_;
    int rank_;
    int country_;
    int64_t club_id_;
    int64_t unknown_field_8_;
    bool accepting_matches_;
    int status_;
    int64_t ranked_wins_;
    int64_t ranked_losses_;
    int64_t unknown_field_13_;
    int64_t fox_coin_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class ExtraPlayerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openfoxwq.ExtraPlayerInfo) */ {
 public:
  inline ExtraPlayerInfo() : ExtraPlayerInfo(nullptr) {}
  ~ExtraPlayerInfo() override;
  explicit PROTOBUF_CONSTEXPR ExtraPlayerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExtraPlayerInfo(const ExtraPlayerInfo& from);
  ExtraPlayerInfo(ExtraPlayerInfo&& from) noexcept
    : ExtraPlayerInfo() {
    *this = ::std::move(from);
  }

  inline ExtraPlayerInfo& operator=(const ExtraPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtraPlayerInfo& operator=(ExtraPlayerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExtraPlayerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExtraPlayerInfo* internal_default_instance() {
    return reinterpret_cast<const ExtraPlayerInfo*>(
               &_ExtraPlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ExtraPlayerInfo& a, ExtraPlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ExtraPlayerInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtraPlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExtraPlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExtraPlayerInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExtraPlayerInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExtraPlayerInfo& from) {
    ExtraPlayerInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExtraPlayerInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openfoxwq.ExtraPlayerInfo";
  }
  protected:
  explicit ExtraPlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentResultsFieldNumber = 9,
    kRankedResultsFieldNumber = 10,
    kFreeResultsFieldNumber = 11,
    kPlayerIdFieldNumber = 1,
  };
  // optional .openfoxwq.GameResults current_results = 9;
  bool has_current_results() const;
  private:
  bool _internal_has_current_results() const;
  public:
  void clear_current_results();
  const ::openfoxwq::GameResults& current_results() const;
  PROTOBUF_NODISCARD ::openfoxwq::GameResults* release_current_results();
  ::openfoxwq::GameResults* mutable_current_results();
  void set_allocated_current_results(::openfoxwq::GameResults* current_results);
  private:
  const ::openfoxwq::GameResults& _internal_current_results() const;
  ::openfoxwq::GameResults* _internal_mutable_current_results();
  public:
  void unsafe_arena_set_allocated_current_results(
      ::openfoxwq::GameResults* current_results);
  ::openfoxwq::GameResults* unsafe_arena_release_current_results();

  // optional .openfoxwq.GameResults ranked_results = 10;
  bool has_ranked_results() const;
  private:
  bool _internal_has_ranked_results() const;
  public:
  void clear_ranked_results();
  const ::openfoxwq::GameResults& ranked_results() const;
  PROTOBUF_NODISCARD ::openfoxwq::GameResults* release_ranked_results();
  ::openfoxwq::GameResults* mutable_ranked_results();
  void set_allocated_ranked_results(::openfoxwq::GameResults* ranked_results);
  private:
  const ::openfoxwq::GameResults& _internal_ranked_results() const;
  ::openfoxwq::GameResults* _internal_mutable_ranked_results();
  public:
  void unsafe_arena_set_allocated_ranked_results(
      ::openfoxwq::GameResults* ranked_results);
  ::openfoxwq::GameResults* unsafe_arena_release_ranked_results();

  // optional .openfoxwq.GameResults free_results = 11;
  bool has_free_results() const;
  private:
  bool _internal_has_free_results() const;
  public:
  void clear_free_results();
  const ::openfoxwq::GameResults& free_results() const;
  PROTOBUF_NODISCARD ::openfoxwq::GameResults* release_free_results();
  ::openfoxwq::GameResults* mutable_free_results();
  void set_allocated_free_results(::openfoxwq::GameResults* free_results);
  private:
  const ::openfoxwq::GameResults& _internal_free_results() const;
  ::openfoxwq::GameResults* _internal_mutable_free_results();
  public:
  void unsafe_arena_set_allocated_free_results(
      ::openfoxwq::GameResults* free_results);
  ::openfoxwq::GameResults* unsafe_arena_release_free_results();

  // optional int64 player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  int64_t player_id() const;
  void set_player_id(int64_t value);
  private:
  int64_t _internal_player_id() const;
  void _internal_set_player_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:openfoxwq.ExtraPlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::openfoxwq::GameResults* current_results_;
    ::openfoxwq::GameResults* ranked_results_;
    ::openfoxwq::GameResults* free_results_;
    int64_t player_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class GameResults final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openfoxwq.GameResults) */ {
 public:
  inline GameResults() : GameResults(nullptr) {}
  ~GameResults() override;
  explicit PROTOBUF_CONSTEXPR GameResults(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameResults(const GameResults& from);
  GameResults(GameResults&& from) noexcept
    : GameResults() {
    *this = ::std::move(from);
  }

  inline GameResults& operator=(const GameResults& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameResults& operator=(GameResults&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameResults& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameResults* internal_default_instance() {
    return reinterpret_cast<const GameResults*>(
               &_GameResults_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GameResults& a, GameResults& b) {
    a.Swap(&b);
  }
  inline void Swap(GameResults* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameResults* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameResults* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GameResults>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameResults& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GameResults& from) {
    GameResults::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameResults* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openfoxwq.GameResults";
  }
  protected:
  explicit GameResults(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWinsFieldNumber = 1,
    kLossesFieldNumber = 2,
    kDrawsFieldNumber = 3,
  };
  // required int64 wins = 1;
  bool has_wins() const;
  private:
  bool _internal_has_wins() const;
  public:
  void clear_wins();
  int64_t wins() const;
  void set_wins(int64_t value);
  private:
  int64_t _internal_wins() const;
  void _internal_set_wins(int64_t value);
  public:

  // required int64 losses = 2;
  bool has_losses() const;
  private:
  bool _internal_has_losses() const;
  public:
  void clear_losses();
  int64_t losses() const;
  void set_losses(int64_t value);
  private:
  int64_t _internal_losses() const;
  void _internal_set_losses(int64_t value);
  public:

  // required int64 draws = 3;
  bool has_draws() const;
  private:
  bool _internal_has_draws() const;
  public:
  void clear_draws();
  int64_t draws() const;
  void set_draws(int64_t value);
  private:
  int64_t _internal_draws() const;
  void _internal_set_draws(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:openfoxwq.GameResults)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int64_t wins_;
    int64_t losses_;
    int64_t draws_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class ExtendedGameResults final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openfoxwq.ExtendedGameResults) */ {
 public:
  inline ExtendedGameResults() : ExtendedGameResults(nullptr) {}
  ~ExtendedGameResults() override;
  explicit PROTOBUF_CONSTEXPR ExtendedGameResults(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExtendedGameResults(const ExtendedGameResults& from);
  ExtendedGameResults(ExtendedGameResults&& from) noexcept
    : ExtendedGameResults() {
    *this = ::std::move(from);
  }

  inline ExtendedGameResults& operator=(const ExtendedGameResults& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtendedGameResults& operator=(ExtendedGameResults&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExtendedGameResults& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExtendedGameResults* internal_default_instance() {
    return reinterpret_cast<const ExtendedGameResults*>(
               &_ExtendedGameResults_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ExtendedGameResults& a, ExtendedGameResults& b) {
    a.Swap(&b);
  }
  inline void Swap(ExtendedGameResults* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtendedGameResults* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExtendedGameResults* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExtendedGameResults>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExtendedGameResults& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExtendedGameResults& from) {
    ExtendedGameResults::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExtendedGameResults* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openfoxwq.ExtendedGameResults";
  }
  protected:
  explicit ExtendedGameResults(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWinsFieldNumber = 2,
    kLossesFieldNumber = 3,
    kDrawsFieldNumber = 4,
    kTypFieldNumber = 1,
  };
  // required int64 wins = 2;
  bool has_wins() const;
  private:
  bool _internal_has_wins() const;
  public:
  void clear_wins();
  int64_t wins() const;
  void set_wins(int64_t value);
  private:
  int64_t _internal_wins() const;
  void _internal_set_wins(int64_t value);
  public:

  // required int64 losses = 3;
  bool has_losses() const;
  private:
  bool _internal_has_losses() const;
  public:
  void clear_losses();
  int64_t losses() const;
  void set_losses(int64_t value);
  private:
  int64_t _internal_losses() const;
  void _internal_set_losses(int64_t value);
  public:

  // required int64 draws = 4;
  bool has_draws() const;
  private:
  bool _internal_has_draws() const;
  public:
  void clear_draws();
  int64_t draws() const;
  void set_draws(int64_t value);
  private:
  int64_t _internal_draws() const;
  void _internal_set_draws(int64_t value);
  public:

  // required .openfoxwq.GameResultType typ = 1;
  bool has_typ() const;
  private:
  bool _internal_has_typ() const;
  public:
  void clear_typ();
  ::openfoxwq::GameResultType typ() const;
  void set_typ(::openfoxwq::GameResultType value);
  private:
  ::openfoxwq::GameResultType _internal_typ() const;
  void _internal_set_typ(::openfoxwq::GameResultType value);
  public:

  // @@protoc_insertion_point(class_scope:openfoxwq.ExtendedGameResults)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int64_t wins_;
    int64_t losses_;
    int64_t draws_;
    int typ_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class UnhandledMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openfoxwq.UnhandledMessage) */ {
 public:
  inline UnhandledMessage() : UnhandledMessage(nullptr) {}
  ~UnhandledMessage() override;
  explicit PROTOBUF_CONSTEXPR UnhandledMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnhandledMessage(const UnhandledMessage& from);
  UnhandledMessage(UnhandledMessage&& from) noexcept
    : UnhandledMessage() {
    *this = ::std::move(from);
  }

  inline UnhandledMessage& operator=(const UnhandledMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnhandledMessage& operator=(UnhandledMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnhandledMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnhandledMessage* internal_default_instance() {
    return reinterpret_cast<const UnhandledMessage*>(
               &_UnhandledMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(UnhandledMessage& a, UnhandledMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(UnhandledMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnhandledMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnhandledMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnhandledMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnhandledMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UnhandledMessage& from) {
    UnhandledMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnhandledMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openfoxwq.UnhandledMessage";
  }
  protected:
  explicit UnhandledMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // required string tag = 1;
  bool has_tag() const;
  private:
  bool _internal_has_tag() const;
  public:
  void clear_tag();
  const std::string& tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tag();
  PROTOBUF_NODISCARD std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // required string data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:openfoxwq.UnhandledMessage)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class BroadcastRoomInfo_BroadcastRoomPlayerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openfoxwq.BroadcastRoomInfo.BroadcastRoomPlayerInfo) */ {
 public:
  inline BroadcastRoomInfo_BroadcastRoomPlayerInfo() : BroadcastRoomInfo_BroadcastRoomPlayerInfo(nullptr) {}
  ~BroadcastRoomInfo_BroadcastRoomPlayerInfo() override;
  explicit PROTOBUF_CONSTEXPR BroadcastRoomInfo_BroadcastRoomPlayerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BroadcastRoomInfo_BroadcastRoomPlayerInfo(const BroadcastRoomInfo_BroadcastRoomPlayerInfo& from);
  BroadcastRoomInfo_BroadcastRoomPlayerInfo(BroadcastRoomInfo_BroadcastRoomPlayerInfo&& from) noexcept
    : BroadcastRoomInfo_BroadcastRoomPlayerInfo() {
    *this = ::std::move(from);
  }

  inline BroadcastRoomInfo_BroadcastRoomPlayerInfo& operator=(const BroadcastRoomInfo_BroadcastRoomPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BroadcastRoomInfo_BroadcastRoomPlayerInfo& operator=(BroadcastRoomInfo_BroadcastRoomPlayerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BroadcastRoomInfo_BroadcastRoomPlayerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const BroadcastRoomInfo_BroadcastRoomPlayerInfo* internal_default_instance() {
    return reinterpret_cast<const BroadcastRoomInfo_BroadcastRoomPlayerInfo*>(
               &_BroadcastRoomInfo_BroadcastRoomPlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(BroadcastRoomInfo_BroadcastRoomPlayerInfo& a, BroadcastRoomInfo_BroadcastRoomPlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BroadcastRoomInfo_BroadcastRoomPlayerInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BroadcastRoomInfo_BroadcastRoomPlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BroadcastRoomInfo_BroadcastRoomPlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BroadcastRoomInfo_BroadcastRoomPlayerInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BroadcastRoomInfo_BroadcastRoomPlayerInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BroadcastRoomInfo_BroadcastRoomPlayerInfo& from) {
    BroadcastRoomInfo_BroadcastRoomPlayerInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BroadcastRoomInfo_BroadcastRoomPlayerInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openfoxwq.BroadcastRoomInfo.BroadcastRoomPlayerInfo";
  }
  protected:
  explicit BroadcastRoomInfo_BroadcastRoomPlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kNameAltFieldNumber = 2,
    kRankFieldNumber = 3,
    kCountryFieldNumber = 4,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string name_alt = 2;
  bool has_name_alt() const;
  private:
  bool _internal_has_name_alt() const;
  public:
  void clear_name_alt();
  const std::string& name_alt() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name_alt(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name_alt();
  PROTOBUF_NODISCARD std::string* release_name_alt();
  void set_allocated_name_alt(std::string* name_alt);
  private:
  const std::string& _internal_name_alt() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name_alt(const std::string& value);
  std::string* _internal_mutable_name_alt();
  public:

  // optional .openfoxwq.Rank rank = 3;
  bool has_rank() const;
  private:
  bool _internal_has_rank() const;
  public:
  void clear_rank();
  ::openfoxwq::Rank rank() const;
  void set_rank(::openfoxwq::Rank value);
  private:
  ::openfoxwq::Rank _internal_rank() const;
  void _internal_set_rank(::openfoxwq::Rank value);
  public:

  // optional .openfoxwq.Country country = 4;
  bool has_country() const;
  private:
  bool _internal_has_country() const;
  public:
  void clear_country();
  ::openfoxwq::Country country() const;
  void set_country(::openfoxwq::Country value);
  private:
  ::openfoxwq::Country _internal_country() const;
  void _internal_set_country(::openfoxwq::Country value);
  public:

  // @@protoc_insertion_point(class_scope:openfoxwq.BroadcastRoomInfo.BroadcastRoomPlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_alt_;
    int rank_;
    int country_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class BroadcastRoomInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openfoxwq.BroadcastRoomInfo) */ {
 public:
  inline BroadcastRoomInfo() : BroadcastRoomInfo(nullptr) {}
  ~BroadcastRoomInfo() override;
  explicit PROTOBUF_CONSTEXPR BroadcastRoomInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BroadcastRoomInfo(const BroadcastRoomInfo& from);
  BroadcastRoomInfo(BroadcastRoomInfo&& from) noexcept
    : BroadcastRoomInfo() {
    *this = ::std::move(from);
  }

  inline BroadcastRoomInfo& operator=(const BroadcastRoomInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BroadcastRoomInfo& operator=(BroadcastRoomInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BroadcastRoomInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const BroadcastRoomInfo* internal_default_instance() {
    return reinterpret_cast<const BroadcastRoomInfo*>(
               &_BroadcastRoomInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(BroadcastRoomInfo& a, BroadcastRoomInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BroadcastRoomInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BroadcastRoomInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BroadcastRoomInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BroadcastRoomInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BroadcastRoomInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BroadcastRoomInfo& from) {
    BroadcastRoomInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BroadcastRoomInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openfoxwq.BroadcastRoomInfo";
  }
  protected:
  explicit BroadcastRoomInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BroadcastRoomInfo_BroadcastRoomPlayerInfo BroadcastRoomPlayerInfo;

  typedef BroadcastRoomInfo_RoomType RoomType;
  static constexpr RoomType RT_UNKNOWN =
    BroadcastRoomInfo_RoomType_RT_UNKNOWN;
  static constexpr RoomType RT_MATCH =
    BroadcastRoomInfo_RoomType_RT_MATCH;
  static constexpr RoomType RT_BROADCAST =
    BroadcastRoomInfo_RoomType_RT_BROADCAST;
  static constexpr RoomType RT_COMMENTARY =
    BroadcastRoomInfo_RoomType_RT_COMMENTARY;
  static constexpr RoomType RT_CHAMPIONSHIP =
    BroadcastRoomInfo_RoomType_RT_CHAMPIONSHIP;
  static inline bool RoomType_IsValid(int value) {
    return BroadcastRoomInfo_RoomType_IsValid(value);
  }
  static constexpr RoomType RoomType_MIN =
    BroadcastRoomInfo_RoomType_RoomType_MIN;
  static constexpr RoomType RoomType_MAX =
    BroadcastRoomInfo_RoomType_RoomType_MAX;
  static constexpr int RoomType_ARRAYSIZE =
    BroadcastRoomInfo_RoomType_RoomType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RoomType_descriptor() {
    return BroadcastRoomInfo_RoomType_descriptor();
  }
  template<typename T>
  static inline const std::string& RoomType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RoomType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RoomType_Name.");
    return BroadcastRoomInfo_RoomType_Name(enum_t_value);
  }
  static inline bool RoomType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RoomType* value) {
    return BroadcastRoomInfo_RoomType_Parse(name, value);
  }

  typedef BroadcastRoomInfo_RoomState RoomState;
  static constexpr RoomState RS_UNKNOWN =
    BroadcastRoomInfo_RoomState_RS_UNKNOWN;
  static constexpr RoomState RS_OPENING =
    BroadcastRoomInfo_RoomState_RS_OPENING;
  static constexpr RoomState RS_1PERIOD =
    BroadcastRoomInfo_RoomState_RS_1PERIOD;
  static constexpr RoomState RS_MIDDLEGAME =
    BroadcastRoomInfo_RoomState_RS_MIDDLEGAME;
  static constexpr RoomState RS_ENDGAME =
    BroadcastRoomInfo_RoomState_RS_ENDGAME;
  static constexpr RoomState RS_END =
    BroadcastRoomInfo_RoomState_RS_END;
  static constexpr RoomState RS_REVIEW =
    BroadcastRoomInfo_RoomState_RS_REVIEW;
  static inline bool RoomState_IsValid(int value) {
    return BroadcastRoomInfo_RoomState_IsValid(value);
  }
  static constexpr RoomState RoomState_MIN =
    BroadcastRoomInfo_RoomState_RoomState_MIN;
  static constexpr RoomState RoomState_MAX =
    BroadcastRoomInfo_RoomState_RoomState_MAX;
  static constexpr int RoomState_ARRAYSIZE =
    BroadcastRoomInfo_RoomState_RoomState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RoomState_descriptor() {
    return BroadcastRoomInfo_RoomState_descriptor();
  }
  template<typename T>
  static inline const std::string& RoomState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RoomState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RoomState_Name.");
    return BroadcastRoomInfo_RoomState_Name(enum_t_value);
  }
  static inline bool RoomState_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RoomState* value) {
    return BroadcastRoomInfo_RoomState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBroadcasterFieldNumber = 9,
    kPlayerInfoBlackFieldNumber = 13,
    kPlayerInfoWhiteFieldNumber = 14,
    kRoomIdFieldNumber = 1,
    kRoomTypeFieldNumber = 3,
    kRoomStateFieldNumber = 8,
    kOnlineCountFieldNumber = 10,
    kPlayerIdBlackFieldNumber = 11,
    kPlayerIdWhiteFieldNumber = 12,
  };
  // optional string broadcaster = 9;
  bool has_broadcaster() const;
  private:
  bool _internal_has_broadcaster() const;
  public:
  void clear_broadcaster();
  const std::string& broadcaster() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_broadcaster(ArgT0&& arg0, ArgT... args);
  std::string* mutable_broadcaster();
  PROTOBUF_NODISCARD std::string* release_broadcaster();
  void set_allocated_broadcaster(std::string* broadcaster);
  private:
  const std::string& _internal_broadcaster() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_broadcaster(const std::string& value);
  std::string* _internal_mutable_broadcaster();
  public:

  // required .openfoxwq.BroadcastRoomInfo.BroadcastRoomPlayerInfo player_info_black = 13;
  bool has_player_info_black() const;
  private:
  bool _internal_has_player_info_black() const;
  public:
  void clear_player_info_black();
  const ::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo& player_info_black() const;
  PROTOBUF_NODISCARD ::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo* release_player_info_black();
  ::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo* mutable_player_info_black();
  void set_allocated_player_info_black(::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo* player_info_black);
  private:
  const ::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo& _internal_player_info_black() const;
  ::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo* _internal_mutable_player_info_black();
  public:
  void unsafe_arena_set_allocated_player_info_black(
      ::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo* player_info_black);
  ::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo* unsafe_arena_release_player_info_black();

  // required .openfoxwq.BroadcastRoomInfo.BroadcastRoomPlayerInfo player_info_white = 14;
  bool has_player_info_white() const;
  private:
  bool _internal_has_player_info_white() const;
  public:
  void clear_player_info_white();
  const ::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo& player_info_white() const;
  PROTOBUF_NODISCARD ::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo* release_player_info_white();
  ::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo* mutable_player_info_white();
  void set_allocated_player_info_white(::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo* player_info_white);
  private:
  const ::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo& _internal_player_info_white() const;
  ::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo* _internal_mutable_player_info_white();
  public:
  void unsafe_arena_set_allocated_player_info_white(
      ::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo* player_info_white);
  ::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo* unsafe_arena_release_player_info_white();

  // required int64 room_id = 1;
  bool has_room_id() const;
  private:
  bool _internal_has_room_id() const;
  public:
  void clear_room_id();
  int64_t room_id() const;
  void set_room_id(int64_t value);
  private:
  int64_t _internal_room_id() const;
  void _internal_set_room_id(int64_t value);
  public:

  // required .openfoxwq.BroadcastRoomInfo.RoomType room_type = 3;
  bool has_room_type() const;
  private:
  bool _internal_has_room_type() const;
  public:
  void clear_room_type();
  ::openfoxwq::BroadcastRoomInfo_RoomType room_type() const;
  void set_room_type(::openfoxwq::BroadcastRoomInfo_RoomType value);
  private:
  ::openfoxwq::BroadcastRoomInfo_RoomType _internal_room_type() const;
  void _internal_set_room_type(::openfoxwq::BroadcastRoomInfo_RoomType value);
  public:

  // optional .openfoxwq.BroadcastRoomInfo.RoomState room_state = 8;
  bool has_room_state() const;
  private:
  bool _internal_has_room_state() const;
  public:
  void clear_room_state();
  ::openfoxwq::BroadcastRoomInfo_RoomState room_state() const;
  void set_room_state(::openfoxwq::BroadcastRoomInfo_RoomState value);
  private:
  ::openfoxwq::BroadcastRoomInfo_RoomState _internal_room_state() const;
  void _internal_set_room_state(::openfoxwq::BroadcastRoomInfo_RoomState value);
  public:

  // required int64 online_count = 10;
  bool has_online_count() const;
  private:
  bool _internal_has_online_count() const;
  public:
  void clear_online_count();
  int64_t online_count() const;
  void set_online_count(int64_t value);
  private:
  int64_t _internal_online_count() const;
  void _internal_set_online_count(int64_t value);
  public:

  // required int64 player_id_black = 11;
  bool has_player_id_black() const;
  private:
  bool _internal_has_player_id_black() const;
  public:
  void clear_player_id_black();
  int64_t player_id_black() const;
  void set_player_id_black(int64_t value);
  private:
  int64_t _internal_player_id_black() const;
  void _internal_set_player_id_black(int64_t value);
  public:

  // required int64 player_id_white = 12;
  bool has_player_id_white() const;
  private:
  bool _internal_has_player_id_white() const;
  public:
  void clear_player_id_white();
  int64_t player_id_white() const;
  void set_player_id_white(int64_t value);
  private:
  int64_t _internal_player_id_white() const;
  void _internal_set_player_id_white(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:openfoxwq.BroadcastRoomInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr broadcaster_;
    ::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo* player_info_black_;
    ::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo* player_info_white_;
    int64_t room_id_;
    int room_type_;
    int room_state_;
    int64_t online_count_;
    int64_t player_id_black_;
    int64_t player_id_white_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VersionInfo

// required int64 version1 = 1;
inline bool VersionInfo::_internal_has_version1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool VersionInfo::has_version1() const {
  return _internal_has_version1();
}
inline void VersionInfo::clear_version1() {
  _impl_.version1_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int64_t VersionInfo::_internal_version1() const {
  return _impl_.version1_;
}
inline int64_t VersionInfo::version1() const {
  // @@protoc_insertion_point(field_get:openfoxwq.VersionInfo.version1)
  return _internal_version1();
}
inline void VersionInfo::_internal_set_version1(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.version1_ = value;
}
inline void VersionInfo::set_version1(int64_t value) {
  _internal_set_version1(value);
  // @@protoc_insertion_point(field_set:openfoxwq.VersionInfo.version1)
}

// required int64 version2 = 2;
inline bool VersionInfo::_internal_has_version2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool VersionInfo::has_version2() const {
  return _internal_has_version2();
}
inline void VersionInfo::clear_version2() {
  _impl_.version2_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int64_t VersionInfo::_internal_version2() const {
  return _impl_.version2_;
}
inline int64_t VersionInfo::version2() const {
  // @@protoc_insertion_point(field_get:openfoxwq.VersionInfo.version2)
  return _internal_version2();
}
inline void VersionInfo::_internal_set_version2(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.version2_ = value;
}
inline void VersionInfo::set_version2(int64_t value) {
  _internal_set_version2(value);
  // @@protoc_insertion_point(field_set:openfoxwq.VersionInfo.version2)
}

// optional string update_info = 3;
inline bool VersionInfo::_internal_has_update_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VersionInfo::has_update_info() const {
  return _internal_has_update_info();
}
inline void VersionInfo::clear_update_info() {
  _impl_.update_info_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VersionInfo::update_info() const {
  // @@protoc_insertion_point(field_get:openfoxwq.VersionInfo.update_info)
  return _internal_update_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VersionInfo::set_update_info(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.update_info_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:openfoxwq.VersionInfo.update_info)
}
inline std::string* VersionInfo::mutable_update_info() {
  std::string* _s = _internal_mutable_update_info();
  // @@protoc_insertion_point(field_mutable:openfoxwq.VersionInfo.update_info)
  return _s;
}
inline const std::string& VersionInfo::_internal_update_info() const {
  return _impl_.update_info_.Get();
}
inline void VersionInfo::_internal_set_update_info(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.update_info_.Set(value, GetArenaForAllocation());
}
inline std::string* VersionInfo::_internal_mutable_update_info() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.update_info_.Mutable(GetArenaForAllocation());
}
inline std::string* VersionInfo::release_update_info() {
  // @@protoc_insertion_point(field_release:openfoxwq.VersionInfo.update_info)
  if (!_internal_has_update_info()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.update_info_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.update_info_.IsDefault()) {
    _impl_.update_info_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void VersionInfo::set_allocated_update_info(std::string* update_info) {
  if (update_info != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.update_info_.SetAllocated(update_info, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.update_info_.IsDefault()) {
    _impl_.update_info_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:openfoxwq.VersionInfo.update_info)
}

// optional string install_url = 5;
inline bool VersionInfo::_internal_has_install_url() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VersionInfo::has_install_url() const {
  return _internal_has_install_url();
}
inline void VersionInfo::clear_install_url() {
  _impl_.install_url_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& VersionInfo::install_url() const {
  // @@protoc_insertion_point(field_get:openfoxwq.VersionInfo.install_url)
  return _internal_install_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VersionInfo::set_install_url(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.install_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:openfoxwq.VersionInfo.install_url)
}
inline std::string* VersionInfo::mutable_install_url() {
  std::string* _s = _internal_mutable_install_url();
  // @@protoc_insertion_point(field_mutable:openfoxwq.VersionInfo.install_url)
  return _s;
}
inline const std::string& VersionInfo::_internal_install_url() const {
  return _impl_.install_url_.Get();
}
inline void VersionInfo::_internal_set_install_url(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.install_url_.Set(value, GetArenaForAllocation());
}
inline std::string* VersionInfo::_internal_mutable_install_url() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.install_url_.Mutable(GetArenaForAllocation());
}
inline std::string* VersionInfo::release_install_url() {
  // @@protoc_insertion_point(field_release:openfoxwq.VersionInfo.install_url)
  if (!_internal_has_install_url()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.install_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.install_url_.IsDefault()) {
    _impl_.install_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void VersionInfo::set_allocated_install_url(std::string* install_url) {
  if (install_url != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.install_url_.SetAllocated(install_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.install_url_.IsDefault()) {
    _impl_.install_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:openfoxwq.VersionInfo.install_url)
}

// repeated string qgi = 6;
inline int VersionInfo::_internal_qgi_size() const {
  return _impl_.qgi_.size();
}
inline int VersionInfo::qgi_size() const {
  return _internal_qgi_size();
}
inline void VersionInfo::clear_qgi() {
  _impl_.qgi_.Clear();
}
inline std::string* VersionInfo::add_qgi() {
  std::string* _s = _internal_add_qgi();
  // @@protoc_insertion_point(field_add_mutable:openfoxwq.VersionInfo.qgi)
  return _s;
}
inline const std::string& VersionInfo::_internal_qgi(int index) const {
  return _impl_.qgi_.Get(index);
}
inline const std::string& VersionInfo::qgi(int index) const {
  // @@protoc_insertion_point(field_get:openfoxwq.VersionInfo.qgi)
  return _internal_qgi(index);
}
inline std::string* VersionInfo::mutable_qgi(int index) {
  // @@protoc_insertion_point(field_mutable:openfoxwq.VersionInfo.qgi)
  return _impl_.qgi_.Mutable(index);
}
inline void VersionInfo::set_qgi(int index, const std::string& value) {
  _impl_.qgi_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:openfoxwq.VersionInfo.qgi)
}
inline void VersionInfo::set_qgi(int index, std::string&& value) {
  _impl_.qgi_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:openfoxwq.VersionInfo.qgi)
}
inline void VersionInfo::set_qgi(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.qgi_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:openfoxwq.VersionInfo.qgi)
}
inline void VersionInfo::set_qgi(int index, const char* value, size_t size) {
  _impl_.qgi_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:openfoxwq.VersionInfo.qgi)
}
inline std::string* VersionInfo::_internal_add_qgi() {
  return _impl_.qgi_.Add();
}
inline void VersionInfo::add_qgi(const std::string& value) {
  _impl_.qgi_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:openfoxwq.VersionInfo.qgi)
}
inline void VersionInfo::add_qgi(std::string&& value) {
  _impl_.qgi_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:openfoxwq.VersionInfo.qgi)
}
inline void VersionInfo::add_qgi(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.qgi_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:openfoxwq.VersionInfo.qgi)
}
inline void VersionInfo::add_qgi(const char* value, size_t size) {
  _impl_.qgi_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:openfoxwq.VersionInfo.qgi)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
VersionInfo::qgi() const {
  // @@protoc_insertion_point(field_list:openfoxwq.VersionInfo.qgi)
  return _impl_.qgi_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
VersionInfo::mutable_qgi() {
  // @@protoc_insertion_point(field_mutable_list:openfoxwq.VersionInfo.qgi)
  return &_impl_.qgi_;
}

// repeated string qgi_hash = 7;
inline int VersionInfo::_internal_qgi_hash_size() const {
  return _impl_.qgi_hash_.size();
}
inline int VersionInfo::qgi_hash_size() const {
  return _internal_qgi_hash_size();
}
inline void VersionInfo::clear_qgi_hash() {
  _impl_.qgi_hash_.Clear();
}
inline std::string* VersionInfo::add_qgi_hash() {
  std::string* _s = _internal_add_qgi_hash();
  // @@protoc_insertion_point(field_add_mutable:openfoxwq.VersionInfo.qgi_hash)
  return _s;
}
inline const std::string& VersionInfo::_internal_qgi_hash(int index) const {
  return _impl_.qgi_hash_.Get(index);
}
inline const std::string& VersionInfo::qgi_hash(int index) const {
  // @@protoc_insertion_point(field_get:openfoxwq.VersionInfo.qgi_hash)
  return _internal_qgi_hash(index);
}
inline std::string* VersionInfo::mutable_qgi_hash(int index) {
  // @@protoc_insertion_point(field_mutable:openfoxwq.VersionInfo.qgi_hash)
  return _impl_.qgi_hash_.Mutable(index);
}
inline void VersionInfo::set_qgi_hash(int index, const std::string& value) {
  _impl_.qgi_hash_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:openfoxwq.VersionInfo.qgi_hash)
}
inline void VersionInfo::set_qgi_hash(int index, std::string&& value) {
  _impl_.qgi_hash_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:openfoxwq.VersionInfo.qgi_hash)
}
inline void VersionInfo::set_qgi_hash(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.qgi_hash_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:openfoxwq.VersionInfo.qgi_hash)
}
inline void VersionInfo::set_qgi_hash(int index, const char* value, size_t size) {
  _impl_.qgi_hash_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:openfoxwq.VersionInfo.qgi_hash)
}
inline std::string* VersionInfo::_internal_add_qgi_hash() {
  return _impl_.qgi_hash_.Add();
}
inline void VersionInfo::add_qgi_hash(const std::string& value) {
  _impl_.qgi_hash_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:openfoxwq.VersionInfo.qgi_hash)
}
inline void VersionInfo::add_qgi_hash(std::string&& value) {
  _impl_.qgi_hash_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:openfoxwq.VersionInfo.qgi_hash)
}
inline void VersionInfo::add_qgi_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.qgi_hash_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:openfoxwq.VersionInfo.qgi_hash)
}
inline void VersionInfo::add_qgi_hash(const char* value, size_t size) {
  _impl_.qgi_hash_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:openfoxwq.VersionInfo.qgi_hash)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
VersionInfo::qgi_hash() const {
  // @@protoc_insertion_point(field_list:openfoxwq.VersionInfo.qgi_hash)
  return _impl_.qgi_hash_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
VersionInfo::mutable_qgi_hash() {
  // @@protoc_insertion_point(field_mutable_list:openfoxwq.VersionInfo.qgi_hash)
  return &_impl_.qgi_hash_;
}

// -------------------------------------------------------------------

// ProxyLineInfo_ProxyAddressInfo

// required string host1 = 1;
inline bool ProxyLineInfo_ProxyAddressInfo::_internal_has_host1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProxyLineInfo_ProxyAddressInfo::has_host1() const {
  return _internal_has_host1();
}
inline void ProxyLineInfo_ProxyAddressInfo::clear_host1() {
  _impl_.host1_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProxyLineInfo_ProxyAddressInfo::host1() const {
  // @@protoc_insertion_point(field_get:openfoxwq.ProxyLineInfo.ProxyAddressInfo.host1)
  return _internal_host1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProxyLineInfo_ProxyAddressInfo::set_host1(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.host1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:openfoxwq.ProxyLineInfo.ProxyAddressInfo.host1)
}
inline std::string* ProxyLineInfo_ProxyAddressInfo::mutable_host1() {
  std::string* _s = _internal_mutable_host1();
  // @@protoc_insertion_point(field_mutable:openfoxwq.ProxyLineInfo.ProxyAddressInfo.host1)
  return _s;
}
inline const std::string& ProxyLineInfo_ProxyAddressInfo::_internal_host1() const {
  return _impl_.host1_.Get();
}
inline void ProxyLineInfo_ProxyAddressInfo::_internal_set_host1(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.host1_.Set(value, GetArenaForAllocation());
}
inline std::string* ProxyLineInfo_ProxyAddressInfo::_internal_mutable_host1() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.host1_.Mutable(GetArenaForAllocation());
}
inline std::string* ProxyLineInfo_ProxyAddressInfo::release_host1() {
  // @@protoc_insertion_point(field_release:openfoxwq.ProxyLineInfo.ProxyAddressInfo.host1)
  if (!_internal_has_host1()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.host1_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.host1_.IsDefault()) {
    _impl_.host1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ProxyLineInfo_ProxyAddressInfo::set_allocated_host1(std::string* host1) {
  if (host1 != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.host1_.SetAllocated(host1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.host1_.IsDefault()) {
    _impl_.host1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:openfoxwq.ProxyLineInfo.ProxyAddressInfo.host1)
}

// required int64 port1 = 2;
inline bool ProxyLineInfo_ProxyAddressInfo::_internal_has_port1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ProxyLineInfo_ProxyAddressInfo::has_port1() const {
  return _internal_has_port1();
}
inline void ProxyLineInfo_ProxyAddressInfo::clear_port1() {
  _impl_.port1_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int64_t ProxyLineInfo_ProxyAddressInfo::_internal_port1() const {
  return _impl_.port1_;
}
inline int64_t ProxyLineInfo_ProxyAddressInfo::port1() const {
  // @@protoc_insertion_point(field_get:openfoxwq.ProxyLineInfo.ProxyAddressInfo.port1)
  return _internal_port1();
}
inline void ProxyLineInfo_ProxyAddressInfo::_internal_set_port1(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.port1_ = value;
}
inline void ProxyLineInfo_ProxyAddressInfo::set_port1(int64_t value) {
  _internal_set_port1(value);
  // @@protoc_insertion_point(field_set:openfoxwq.ProxyLineInfo.ProxyAddressInfo.port1)
}

// required string host2 = 3;
inline bool ProxyLineInfo_ProxyAddressInfo::_internal_has_host2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProxyLineInfo_ProxyAddressInfo::has_host2() const {
  return _internal_has_host2();
}
inline void ProxyLineInfo_ProxyAddressInfo::clear_host2() {
  _impl_.host2_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ProxyLineInfo_ProxyAddressInfo::host2() const {
  // @@protoc_insertion_point(field_get:openfoxwq.ProxyLineInfo.ProxyAddressInfo.host2)
  return _internal_host2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProxyLineInfo_ProxyAddressInfo::set_host2(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.host2_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:openfoxwq.ProxyLineInfo.ProxyAddressInfo.host2)
}
inline std::string* ProxyLineInfo_ProxyAddressInfo::mutable_host2() {
  std::string* _s = _internal_mutable_host2();
  // @@protoc_insertion_point(field_mutable:openfoxwq.ProxyLineInfo.ProxyAddressInfo.host2)
  return _s;
}
inline const std::string& ProxyLineInfo_ProxyAddressInfo::_internal_host2() const {
  return _impl_.host2_.Get();
}
inline void ProxyLineInfo_ProxyAddressInfo::_internal_set_host2(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.host2_.Set(value, GetArenaForAllocation());
}
inline std::string* ProxyLineInfo_ProxyAddressInfo::_internal_mutable_host2() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.host2_.Mutable(GetArenaForAllocation());
}
inline std::string* ProxyLineInfo_ProxyAddressInfo::release_host2() {
  // @@protoc_insertion_point(field_release:openfoxwq.ProxyLineInfo.ProxyAddressInfo.host2)
  if (!_internal_has_host2()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.host2_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.host2_.IsDefault()) {
    _impl_.host2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ProxyLineInfo_ProxyAddressInfo::set_allocated_host2(std::string* host2) {
  if (host2 != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.host2_.SetAllocated(host2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.host2_.IsDefault()) {
    _impl_.host2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:openfoxwq.ProxyLineInfo.ProxyAddressInfo.host2)
}

// required int64 port2 = 4;
inline bool ProxyLineInfo_ProxyAddressInfo::_internal_has_port2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ProxyLineInfo_ProxyAddressInfo::has_port2() const {
  return _internal_has_port2();
}
inline void ProxyLineInfo_ProxyAddressInfo::clear_port2() {
  _impl_.port2_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int64_t ProxyLineInfo_ProxyAddressInfo::_internal_port2() const {
  return _impl_.port2_;
}
inline int64_t ProxyLineInfo_ProxyAddressInfo::port2() const {
  // @@protoc_insertion_point(field_get:openfoxwq.ProxyLineInfo.ProxyAddressInfo.port2)
  return _internal_port2();
}
inline void ProxyLineInfo_ProxyAddressInfo::_internal_set_port2(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.port2_ = value;
}
inline void ProxyLineInfo_ProxyAddressInfo::set_port2(int64_t value) {
  _internal_set_port2(value);
  // @@protoc_insertion_point(field_set:openfoxwq.ProxyLineInfo.ProxyAddressInfo.port2)
}

// -------------------------------------------------------------------

// ProxyLineInfo

// required int64 index = 1;
inline bool ProxyLineInfo::_internal_has_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ProxyLineInfo::has_index() const {
  return _internal_has_index();
}
inline void ProxyLineInfo::clear_index() {
  _impl_.index_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int64_t ProxyLineInfo::_internal_index() const {
  return _impl_.index_;
}
inline int64_t ProxyLineInfo::index() const {
  // @@protoc_insertion_point(field_get:openfoxwq.ProxyLineInfo.index)
  return _internal_index();
}
inline void ProxyLineInfo::_internal_set_index(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.index_ = value;
}
inline void ProxyLineInfo::set_index(int64_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:openfoxwq.ProxyLineInfo.index)
}

// required string name = 2;
inline bool ProxyLineInfo::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProxyLineInfo::has_name() const {
  return _internal_has_name();
}
inline void ProxyLineInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProxyLineInfo::name() const {
  // @@protoc_insertion_point(field_get:openfoxwq.ProxyLineInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProxyLineInfo::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:openfoxwq.ProxyLineInfo.name)
}
inline std::string* ProxyLineInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:openfoxwq.ProxyLineInfo.name)
  return _s;
}
inline const std::string& ProxyLineInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ProxyLineInfo::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ProxyLineInfo::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ProxyLineInfo::release_name() {
  // @@protoc_insertion_point(field_release:openfoxwq.ProxyLineInfo.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ProxyLineInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:openfoxwq.ProxyLineInfo.name)
}

// required .openfoxwq.ProxyLineInfo.ProxyAddressInfo address_info = 3;
inline bool ProxyLineInfo::_internal_has_address_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.address_info_ != nullptr);
  return value;
}
inline bool ProxyLineInfo::has_address_info() const {
  return _internal_has_address_info();
}
inline void ProxyLineInfo::clear_address_info() {
  if (_impl_.address_info_ != nullptr) _impl_.address_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::openfoxwq::ProxyLineInfo_ProxyAddressInfo& ProxyLineInfo::_internal_address_info() const {
  const ::openfoxwq::ProxyLineInfo_ProxyAddressInfo* p = _impl_.address_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::openfoxwq::ProxyLineInfo_ProxyAddressInfo&>(
      ::openfoxwq::_ProxyLineInfo_ProxyAddressInfo_default_instance_);
}
inline const ::openfoxwq::ProxyLineInfo_ProxyAddressInfo& ProxyLineInfo::address_info() const {
  // @@protoc_insertion_point(field_get:openfoxwq.ProxyLineInfo.address_info)
  return _internal_address_info();
}
inline void ProxyLineInfo::unsafe_arena_set_allocated_address_info(
    ::openfoxwq::ProxyLineInfo_ProxyAddressInfo* address_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.address_info_);
  }
  _impl_.address_info_ = address_info;
  if (address_info) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openfoxwq.ProxyLineInfo.address_info)
}
inline ::openfoxwq::ProxyLineInfo_ProxyAddressInfo* ProxyLineInfo::release_address_info() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::openfoxwq::ProxyLineInfo_ProxyAddressInfo* temp = _impl_.address_info_;
  _impl_.address_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::openfoxwq::ProxyLineInfo_ProxyAddressInfo* ProxyLineInfo::unsafe_arena_release_address_info() {
  // @@protoc_insertion_point(field_release:openfoxwq.ProxyLineInfo.address_info)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::openfoxwq::ProxyLineInfo_ProxyAddressInfo* temp = _impl_.address_info_;
  _impl_.address_info_ = nullptr;
  return temp;
}
inline ::openfoxwq::ProxyLineInfo_ProxyAddressInfo* ProxyLineInfo::_internal_mutable_address_info() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.address_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::openfoxwq::ProxyLineInfo_ProxyAddressInfo>(GetArenaForAllocation());
    _impl_.address_info_ = p;
  }
  return _impl_.address_info_;
}
inline ::openfoxwq::ProxyLineInfo_ProxyAddressInfo* ProxyLineInfo::mutable_address_info() {
  ::openfoxwq::ProxyLineInfo_ProxyAddressInfo* _msg = _internal_mutable_address_info();
  // @@protoc_insertion_point(field_mutable:openfoxwq.ProxyLineInfo.address_info)
  return _msg;
}
inline void ProxyLineInfo::set_allocated_address_info(::openfoxwq::ProxyLineInfo_ProxyAddressInfo* address_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.address_info_;
  }
  if (address_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(address_info);
    if (message_arena != submessage_arena) {
      address_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, address_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.address_info_ = address_info;
  // @@protoc_insertion_point(field_set_allocated:openfoxwq.ProxyLineInfo.address_info)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// LobbySvrInfo

// optional string name = 2;
inline bool LobbySvrInfo::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LobbySvrInfo::has_name() const {
  return _internal_has_name();
}
inline void LobbySvrInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LobbySvrInfo::name() const {
  // @@protoc_insertion_point(field_get:openfoxwq.LobbySvrInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LobbySvrInfo::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:openfoxwq.LobbySvrInfo.name)
}
inline std::string* LobbySvrInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:openfoxwq.LobbySvrInfo.name)
  return _s;
}
inline const std::string& LobbySvrInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void LobbySvrInfo::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* LobbySvrInfo::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* LobbySvrInfo::release_name() {
  // @@protoc_insertion_point(field_release:openfoxwq.LobbySvrInfo.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LobbySvrInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:openfoxwq.LobbySvrInfo.name)
}

// optional string broadcast_host = 5;
inline bool LobbySvrInfo::_internal_has_broadcast_host() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LobbySvrInfo::has_broadcast_host() const {
  return _internal_has_broadcast_host();
}
inline void LobbySvrInfo::clear_broadcast_host() {
  _impl_.broadcast_host_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LobbySvrInfo::broadcast_host() const {
  // @@protoc_insertion_point(field_get:openfoxwq.LobbySvrInfo.broadcast_host)
  return _internal_broadcast_host();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LobbySvrInfo::set_broadcast_host(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.broadcast_host_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:openfoxwq.LobbySvrInfo.broadcast_host)
}
inline std::string* LobbySvrInfo::mutable_broadcast_host() {
  std::string* _s = _internal_mutable_broadcast_host();
  // @@protoc_insertion_point(field_mutable:openfoxwq.LobbySvrInfo.broadcast_host)
  return _s;
}
inline const std::string& LobbySvrInfo::_internal_broadcast_host() const {
  return _impl_.broadcast_host_.Get();
}
inline void LobbySvrInfo::_internal_set_broadcast_host(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.broadcast_host_.Set(value, GetArenaForAllocation());
}
inline std::string* LobbySvrInfo::_internal_mutable_broadcast_host() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.broadcast_host_.Mutable(GetArenaForAllocation());
}
inline std::string* LobbySvrInfo::release_broadcast_host() {
  // @@protoc_insertion_point(field_release:openfoxwq.LobbySvrInfo.broadcast_host)
  if (!_internal_has_broadcast_host()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.broadcast_host_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.broadcast_host_.IsDefault()) {
    _impl_.broadcast_host_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LobbySvrInfo::set_allocated_broadcast_host(std::string* broadcast_host) {
  if (broadcast_host != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.broadcast_host_.SetAllocated(broadcast_host, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.broadcast_host_.IsDefault()) {
    _impl_.broadcast_host_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:openfoxwq.LobbySvrInfo.broadcast_host)
}

// optional int32 broadcast_port = 6;
inline bool LobbySvrInfo::_internal_has_broadcast_port() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool LobbySvrInfo::has_broadcast_port() const {
  return _internal_has_broadcast_port();
}
inline void LobbySvrInfo::clear_broadcast_port() {
  _impl_.broadcast_port_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline int32_t LobbySvrInfo::_internal_broadcast_port() const {
  return _impl_.broadcast_port_;
}
inline int32_t LobbySvrInfo::broadcast_port() const {
  // @@protoc_insertion_point(field_get:openfoxwq.LobbySvrInfo.broadcast_port)
  return _internal_broadcast_port();
}
inline void LobbySvrInfo::_internal_set_broadcast_port(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.broadcast_port_ = value;
}
inline void LobbySvrInfo::set_broadcast_port(int32_t value) {
  _internal_set_broadcast_port(value);
  // @@protoc_insertion_point(field_set:openfoxwq.LobbySvrInfo.broadcast_port)
}

// optional int64 num_players = 3;
inline bool LobbySvrInfo::_internal_has_num_players() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool LobbySvrInfo::has_num_players() const {
  return _internal_has_num_players();
}
inline void LobbySvrInfo::clear_num_players() {
  _impl_.num_players_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int64_t LobbySvrInfo::_internal_num_players() const {
  return _impl_.num_players_;
}
inline int64_t LobbySvrInfo::num_players() const {
  // @@protoc_insertion_point(field_get:openfoxwq.LobbySvrInfo.num_players)
  return _internal_num_players();
}
inline void LobbySvrInfo::_internal_set_num_players(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.num_players_ = value;
}
inline void LobbySvrInfo::set_num_players(int64_t value) {
  _internal_set_num_players(value);
  // @@protoc_insertion_point(field_set:openfoxwq.LobbySvrInfo.num_players)
}

// optional int64 num_matches = 4;
inline bool LobbySvrInfo::_internal_has_num_matches() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool LobbySvrInfo::has_num_matches() const {
  return _internal_has_num_matches();
}
inline void LobbySvrInfo::clear_num_matches() {
  _impl_.num_matches_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline int64_t LobbySvrInfo::_internal_num_matches() const {
  return _impl_.num_matches_;
}
inline int64_t LobbySvrInfo::num_matches() const {
  // @@protoc_insertion_point(field_get:openfoxwq.LobbySvrInfo.num_matches)
  return _internal_num_matches();
}
inline void LobbySvrInfo::_internal_set_num_matches(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.num_matches_ = value;
}
inline void LobbySvrInfo::set_num_matches(int64_t value) {
  _internal_set_num_matches(value);
  // @@protoc_insertion_point(field_set:openfoxwq.LobbySvrInfo.num_matches)
}

// optional string unknown_host_1 = 13;
inline bool LobbySvrInfo::_internal_has_unknown_host_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LobbySvrInfo::has_unknown_host_1() const {
  return _internal_has_unknown_host_1();
}
inline void LobbySvrInfo::clear_unknown_host_1() {
  _impl_.unknown_host_1_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& LobbySvrInfo::unknown_host_1() const {
  // @@protoc_insertion_point(field_get:openfoxwq.LobbySvrInfo.unknown_host_1)
  return _internal_unknown_host_1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LobbySvrInfo::set_unknown_host_1(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.unknown_host_1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:openfoxwq.LobbySvrInfo.unknown_host_1)
}
inline std::string* LobbySvrInfo::mutable_unknown_host_1() {
  std::string* _s = _internal_mutable_unknown_host_1();
  // @@protoc_insertion_point(field_mutable:openfoxwq.LobbySvrInfo.unknown_host_1)
  return _s;
}
inline const std::string& LobbySvrInfo::_internal_unknown_host_1() const {
  return _impl_.unknown_host_1_.Get();
}
inline void LobbySvrInfo::_internal_set_unknown_host_1(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.unknown_host_1_.Set(value, GetArenaForAllocation());
}
inline std::string* LobbySvrInfo::_internal_mutable_unknown_host_1() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.unknown_host_1_.Mutable(GetArenaForAllocation());
}
inline std::string* LobbySvrInfo::release_unknown_host_1() {
  // @@protoc_insertion_point(field_release:openfoxwq.LobbySvrInfo.unknown_host_1)
  if (!_internal_has_unknown_host_1()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.unknown_host_1_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.unknown_host_1_.IsDefault()) {
    _impl_.unknown_host_1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LobbySvrInfo::set_allocated_unknown_host_1(std::string* unknown_host_1) {
  if (unknown_host_1 != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.unknown_host_1_.SetAllocated(unknown_host_1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.unknown_host_1_.IsDefault()) {
    _impl_.unknown_host_1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:openfoxwq.LobbySvrInfo.unknown_host_1)
}

// optional int32 unknown_port_1 = 14;
inline bool LobbySvrInfo::_internal_has_unknown_port_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool LobbySvrInfo::has_unknown_port_1() const {
  return _internal_has_unknown_port_1();
}
inline void LobbySvrInfo::clear_unknown_port_1() {
  _impl_.unknown_port_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline int32_t LobbySvrInfo::_internal_unknown_port_1() const {
  return _impl_.unknown_port_1_;
}
inline int32_t LobbySvrInfo::unknown_port_1() const {
  // @@protoc_insertion_point(field_get:openfoxwq.LobbySvrInfo.unknown_port_1)
  return _internal_unknown_port_1();
}
inline void LobbySvrInfo::_internal_set_unknown_port_1(int32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.unknown_port_1_ = value;
}
inline void LobbySvrInfo::set_unknown_port_1(int32_t value) {
  _internal_set_unknown_port_1(value);
  // @@protoc_insertion_point(field_set:openfoxwq.LobbySvrInfo.unknown_port_1)
}

// optional string unknown_host_2 = 15;
inline bool LobbySvrInfo::_internal_has_unknown_host_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LobbySvrInfo::has_unknown_host_2() const {
  return _internal_has_unknown_host_2();
}
inline void LobbySvrInfo::clear_unknown_host_2() {
  _impl_.unknown_host_2_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& LobbySvrInfo::unknown_host_2() const {
  // @@protoc_insertion_point(field_get:openfoxwq.LobbySvrInfo.unknown_host_2)
  return _internal_unknown_host_2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LobbySvrInfo::set_unknown_host_2(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.unknown_host_2_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:openfoxwq.LobbySvrInfo.unknown_host_2)
}
inline std::string* LobbySvrInfo::mutable_unknown_host_2() {
  std::string* _s = _internal_mutable_unknown_host_2();
  // @@protoc_insertion_point(field_mutable:openfoxwq.LobbySvrInfo.unknown_host_2)
  return _s;
}
inline const std::string& LobbySvrInfo::_internal_unknown_host_2() const {
  return _impl_.unknown_host_2_.Get();
}
inline void LobbySvrInfo::_internal_set_unknown_host_2(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.unknown_host_2_.Set(value, GetArenaForAllocation());
}
inline std::string* LobbySvrInfo::_internal_mutable_unknown_host_2() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.unknown_host_2_.Mutable(GetArenaForAllocation());
}
inline std::string* LobbySvrInfo::release_unknown_host_2() {
  // @@protoc_insertion_point(field_release:openfoxwq.LobbySvrInfo.unknown_host_2)
  if (!_internal_has_unknown_host_2()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.unknown_host_2_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.unknown_host_2_.IsDefault()) {
    _impl_.unknown_host_2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LobbySvrInfo::set_allocated_unknown_host_2(std::string* unknown_host_2) {
  if (unknown_host_2 != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.unknown_host_2_.SetAllocated(unknown_host_2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.unknown_host_2_.IsDefault()) {
    _impl_.unknown_host_2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:openfoxwq.LobbySvrInfo.unknown_host_2)
}

// optional int32 unknown_port_2 = 16;
inline bool LobbySvrInfo::_internal_has_unknown_port_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool LobbySvrInfo::has_unknown_port_2() const {
  return _internal_has_unknown_port_2();
}
inline void LobbySvrInfo::clear_unknown_port_2() {
  _impl_.unknown_port_2_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline int32_t LobbySvrInfo::_internal_unknown_port_2() const {
  return _impl_.unknown_port_2_;
}
inline int32_t LobbySvrInfo::unknown_port_2() const {
  // @@protoc_insertion_point(field_get:openfoxwq.LobbySvrInfo.unknown_port_2)
  return _internal_unknown_port_2();
}
inline void LobbySvrInfo::_internal_set_unknown_port_2(int32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.unknown_port_2_ = value;
}
inline void LobbySvrInfo::set_unknown_port_2(int32_t value) {
  _internal_set_unknown_port_2(value);
  // @@protoc_insertion_point(field_set:openfoxwq.LobbySvrInfo.unknown_port_2)
}

// optional string unknown_host_3 = 17;
inline bool LobbySvrInfo::_internal_has_unknown_host_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LobbySvrInfo::has_unknown_host_3() const {
  return _internal_has_unknown_host_3();
}
inline void LobbySvrInfo::clear_unknown_host_3() {
  _impl_.unknown_host_3_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& LobbySvrInfo::unknown_host_3() const {
  // @@protoc_insertion_point(field_get:openfoxwq.LobbySvrInfo.unknown_host_3)
  return _internal_unknown_host_3();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LobbySvrInfo::set_unknown_host_3(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.unknown_host_3_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:openfoxwq.LobbySvrInfo.unknown_host_3)
}
inline std::string* LobbySvrInfo::mutable_unknown_host_3() {
  std::string* _s = _internal_mutable_unknown_host_3();
  // @@protoc_insertion_point(field_mutable:openfoxwq.LobbySvrInfo.unknown_host_3)
  return _s;
}
inline const std::string& LobbySvrInfo::_internal_unknown_host_3() const {
  return _impl_.unknown_host_3_.Get();
}
inline void LobbySvrInfo::_internal_set_unknown_host_3(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.unknown_host_3_.Set(value, GetArenaForAllocation());
}
inline std::string* LobbySvrInfo::_internal_mutable_unknown_host_3() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.unknown_host_3_.Mutable(GetArenaForAllocation());
}
inline std::string* LobbySvrInfo::release_unknown_host_3() {
  // @@protoc_insertion_point(field_release:openfoxwq.LobbySvrInfo.unknown_host_3)
  if (!_internal_has_unknown_host_3()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.unknown_host_3_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.unknown_host_3_.IsDefault()) {
    _impl_.unknown_host_3_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LobbySvrInfo::set_allocated_unknown_host_3(std::string* unknown_host_3) {
  if (unknown_host_3 != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.unknown_host_3_.SetAllocated(unknown_host_3, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.unknown_host_3_.IsDefault()) {
    _impl_.unknown_host_3_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:openfoxwq.LobbySvrInfo.unknown_host_3)
}

// optional int32 unknown_port_3 = 18;
inline bool LobbySvrInfo::_internal_has_unknown_port_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool LobbySvrInfo::has_unknown_port_3() const {
  return _internal_has_unknown_port_3();
}
inline void LobbySvrInfo::clear_unknown_port_3() {
  _impl_.unknown_port_3_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline int32_t LobbySvrInfo::_internal_unknown_port_3() const {
  return _impl_.unknown_port_3_;
}
inline int32_t LobbySvrInfo::unknown_port_3() const {
  // @@protoc_insertion_point(field_get:openfoxwq.LobbySvrInfo.unknown_port_3)
  return _internal_unknown_port_3();
}
inline void LobbySvrInfo::_internal_set_unknown_port_3(int32_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.unknown_port_3_ = value;
}
inline void LobbySvrInfo::set_unknown_port_3(int32_t value) {
  _internal_set_unknown_port_3(value);
  // @@protoc_insertion_point(field_set:openfoxwq.LobbySvrInfo.unknown_port_3)
}

// optional string unknown_host_4 = 19;
inline bool LobbySvrInfo::_internal_has_unknown_host_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool LobbySvrInfo::has_unknown_host_4() const {
  return _internal_has_unknown_host_4();
}
inline void LobbySvrInfo::clear_unknown_host_4() {
  _impl_.unknown_host_4_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& LobbySvrInfo::unknown_host_4() const {
  // @@protoc_insertion_point(field_get:openfoxwq.LobbySvrInfo.unknown_host_4)
  return _internal_unknown_host_4();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LobbySvrInfo::set_unknown_host_4(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000020u;
 _impl_.unknown_host_4_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:openfoxwq.LobbySvrInfo.unknown_host_4)
}
inline std::string* LobbySvrInfo::mutable_unknown_host_4() {
  std::string* _s = _internal_mutable_unknown_host_4();
  // @@protoc_insertion_point(field_mutable:openfoxwq.LobbySvrInfo.unknown_host_4)
  return _s;
}
inline const std::string& LobbySvrInfo::_internal_unknown_host_4() const {
  return _impl_.unknown_host_4_.Get();
}
inline void LobbySvrInfo::_internal_set_unknown_host_4(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.unknown_host_4_.Set(value, GetArenaForAllocation());
}
inline std::string* LobbySvrInfo::_internal_mutable_unknown_host_4() {
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.unknown_host_4_.Mutable(GetArenaForAllocation());
}
inline std::string* LobbySvrInfo::release_unknown_host_4() {
  // @@protoc_insertion_point(field_release:openfoxwq.LobbySvrInfo.unknown_host_4)
  if (!_internal_has_unknown_host_4()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* p = _impl_.unknown_host_4_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.unknown_host_4_.IsDefault()) {
    _impl_.unknown_host_4_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LobbySvrInfo::set_allocated_unknown_host_4(std::string* unknown_host_4) {
  if (unknown_host_4 != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.unknown_host_4_.SetAllocated(unknown_host_4, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.unknown_host_4_.IsDefault()) {
    _impl_.unknown_host_4_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:openfoxwq.LobbySvrInfo.unknown_host_4)
}

// optional int32 unknown_port_4 = 20;
inline bool LobbySvrInfo::_internal_has_unknown_port_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool LobbySvrInfo::has_unknown_port_4() const {
  return _internal_has_unknown_port_4();
}
inline void LobbySvrInfo::clear_unknown_port_4() {
  _impl_.unknown_port_4_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline int32_t LobbySvrInfo::_internal_unknown_port_4() const {
  return _impl_.unknown_port_4_;
}
inline int32_t LobbySvrInfo::unknown_port_4() const {
  // @@protoc_insertion_point(field_get:openfoxwq.LobbySvrInfo.unknown_port_4)
  return _internal_unknown_port_4();
}
inline void LobbySvrInfo::_internal_set_unknown_port_4(int32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.unknown_port_4_ = value;
}
inline void LobbySvrInfo::set_unknown_port_4(int32_t value) {
  _internal_set_unknown_port_4(value);
  // @@protoc_insertion_point(field_set:openfoxwq.LobbySvrInfo.unknown_port_4)
}

// optional string play_host = 21;
inline bool LobbySvrInfo::_internal_has_play_host() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool LobbySvrInfo::has_play_host() const {
  return _internal_has_play_host();
}
inline void LobbySvrInfo::clear_play_host() {
  _impl_.play_host_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const std::string& LobbySvrInfo::play_host() const {
  // @@protoc_insertion_point(field_get:openfoxwq.LobbySvrInfo.play_host)
  return _internal_play_host();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LobbySvrInfo::set_play_host(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000040u;
 _impl_.play_host_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:openfoxwq.LobbySvrInfo.play_host)
}
inline std::string* LobbySvrInfo::mutable_play_host() {
  std::string* _s = _internal_mutable_play_host();
  // @@protoc_insertion_point(field_mutable:openfoxwq.LobbySvrInfo.play_host)
  return _s;
}
inline const std::string& LobbySvrInfo::_internal_play_host() const {
  return _impl_.play_host_.Get();
}
inline void LobbySvrInfo::_internal_set_play_host(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.play_host_.Set(value, GetArenaForAllocation());
}
inline std::string* LobbySvrInfo::_internal_mutable_play_host() {
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.play_host_.Mutable(GetArenaForAllocation());
}
inline std::string* LobbySvrInfo::release_play_host() {
  // @@protoc_insertion_point(field_release:openfoxwq.LobbySvrInfo.play_host)
  if (!_internal_has_play_host()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* p = _impl_.play_host_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.play_host_.IsDefault()) {
    _impl_.play_host_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LobbySvrInfo::set_allocated_play_host(std::string* play_host) {
  if (play_host != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.play_host_.SetAllocated(play_host, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.play_host_.IsDefault()) {
    _impl_.play_host_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:openfoxwq.LobbySvrInfo.play_host)
}

// optional int32 play_port = 22;
inline bool LobbySvrInfo::_internal_has_play_port() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool LobbySvrInfo::has_play_port() const {
  return _internal_has_play_port();
}
inline void LobbySvrInfo::clear_play_port() {
  _impl_.play_port_ = 0;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline int32_t LobbySvrInfo::_internal_play_port() const {
  return _impl_.play_port_;
}
inline int32_t LobbySvrInfo::play_port() const {
  // @@protoc_insertion_point(field_get:openfoxwq.LobbySvrInfo.play_port)
  return _internal_play_port();
}
inline void LobbySvrInfo::_internal_set_play_port(int32_t value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.play_port_ = value;
}
inline void LobbySvrInfo::set_play_port(int32_t value) {
  _internal_set_play_port(value);
  // @@protoc_insertion_point(field_set:openfoxwq.LobbySvrInfo.play_port)
}

// map<int32, string> name_loc = 23;
inline int LobbySvrInfo::_internal_name_loc_size() const {
  return _impl_.name_loc_.size();
}
inline int LobbySvrInfo::name_loc_size() const {
  return _internal_name_loc_size();
}
inline void LobbySvrInfo::clear_name_loc() {
  _impl_.name_loc_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >&
LobbySvrInfo::_internal_name_loc() const {
  return _impl_.name_loc_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >&
LobbySvrInfo::name_loc() const {
  // @@protoc_insertion_point(field_map:openfoxwq.LobbySvrInfo.name_loc)
  return _internal_name_loc();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >*
LobbySvrInfo::_internal_mutable_name_loc() {
  return _impl_.name_loc_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >*
LobbySvrInfo::mutable_name_loc() {
  // @@protoc_insertion_point(field_mutable_map:openfoxwq.LobbySvrInfo.name_loc)
  return _internal_mutable_name_loc();
}

// optional int64 unknown_field_7 = 7;
inline bool LobbySvrInfo::_internal_has_unknown_field_7() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool LobbySvrInfo::has_unknown_field_7() const {
  return _internal_has_unknown_field_7();
}
inline void LobbySvrInfo::clear_unknown_field_7() {
  _impl_.unknown_field_7_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline int64_t LobbySvrInfo::_internal_unknown_field_7() const {
  return _impl_.unknown_field_7_;
}
inline int64_t LobbySvrInfo::unknown_field_7() const {
  // @@protoc_insertion_point(field_get:openfoxwq.LobbySvrInfo.unknown_field_7)
  return _internal_unknown_field_7();
}
inline void LobbySvrInfo::_internal_set_unknown_field_7(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.unknown_field_7_ = value;
}
inline void LobbySvrInfo::set_unknown_field_7(int64_t value) {
  _internal_set_unknown_field_7(value);
  // @@protoc_insertion_point(field_set:openfoxwq.LobbySvrInfo.unknown_field_7)
}

// optional int64 unknown_field_8 = 8;
inline bool LobbySvrInfo::_internal_has_unknown_field_8() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool LobbySvrInfo::has_unknown_field_8() const {
  return _internal_has_unknown_field_8();
}
inline void LobbySvrInfo::clear_unknown_field_8() {
  _impl_.unknown_field_8_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline int64_t LobbySvrInfo::_internal_unknown_field_8() const {
  return _impl_.unknown_field_8_;
}
inline int64_t LobbySvrInfo::unknown_field_8() const {
  // @@protoc_insertion_point(field_get:openfoxwq.LobbySvrInfo.unknown_field_8)
  return _internal_unknown_field_8();
}
inline void LobbySvrInfo::_internal_set_unknown_field_8(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.unknown_field_8_ = value;
}
inline void LobbySvrInfo::set_unknown_field_8(int64_t value) {
  _internal_set_unknown_field_8(value);
  // @@protoc_insertion_point(field_set:openfoxwq.LobbySvrInfo.unknown_field_8)
}

// -------------------------------------------------------------------

// PlayerInfo

// required int64 player_id = 1;
inline bool PlayerInfo::_internal_has_player_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PlayerInfo::has_player_id() const {
  return _internal_has_player_id();
}
inline void PlayerInfo::clear_player_id() {
  _impl_.player_id_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int64_t PlayerInfo::_internal_player_id() const {
  return _impl_.player_id_;
}
inline int64_t PlayerInfo::player_id() const {
  // @@protoc_insertion_point(field_get:openfoxwq.PlayerInfo.player_id)
  return _internal_player_id();
}
inline void PlayerInfo::_internal_set_player_id(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.player_id_ = value;
}
inline void PlayerInfo::set_player_id(int64_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:openfoxwq.PlayerInfo.player_id)
}

// optional string name = 2;
inline bool PlayerInfo::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PlayerInfo::has_name() const {
  return _internal_has_name();
}
inline void PlayerInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PlayerInfo::name() const {
  // @@protoc_insertion_point(field_get:openfoxwq.PlayerInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerInfo::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:openfoxwq.PlayerInfo.name)
}
inline std::string* PlayerInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:openfoxwq.PlayerInfo.name)
  return _s;
}
inline const std::string& PlayerInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void PlayerInfo::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* PlayerInfo::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* PlayerInfo::release_name() {
  // @@protoc_insertion_point(field_release:openfoxwq.PlayerInfo.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PlayerInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:openfoxwq.PlayerInfo.name)
}

// optional string name_native = 3;
inline bool PlayerInfo::_internal_has_name_native() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PlayerInfo::has_name_native() const {
  return _internal_has_name_native();
}
inline void PlayerInfo::clear_name_native() {
  _impl_.name_native_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PlayerInfo::name_native() const {
  // @@protoc_insertion_point(field_get:openfoxwq.PlayerInfo.name_native)
  return _internal_name_native();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerInfo::set_name_native(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.name_native_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:openfoxwq.PlayerInfo.name_native)
}
inline std::string* PlayerInfo::mutable_name_native() {
  std::string* _s = _internal_mutable_name_native();
  // @@protoc_insertion_point(field_mutable:openfoxwq.PlayerInfo.name_native)
  return _s;
}
inline const std::string& PlayerInfo::_internal_name_native() const {
  return _impl_.name_native_.Get();
}
inline void PlayerInfo::_internal_set_name_native(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.name_native_.Set(value, GetArenaForAllocation());
}
inline std::string* PlayerInfo::_internal_mutable_name_native() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.name_native_.Mutable(GetArenaForAllocation());
}
inline std::string* PlayerInfo::release_name_native() {
  // @@protoc_insertion_point(field_release:openfoxwq.PlayerInfo.name_native)
  if (!_internal_has_name_native()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.name_native_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_native_.IsDefault()) {
    _impl_.name_native_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PlayerInfo::set_allocated_name_native(std::string* name_native) {
  if (name_native != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.name_native_.SetAllocated(name_native, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_native_.IsDefault()) {
    _impl_.name_native_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:openfoxwq.PlayerInfo.name_native)
}

// optional .openfoxwq.Rank rank = 4;
inline bool PlayerInfo::_internal_has_rank() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PlayerInfo::has_rank() const {
  return _internal_has_rank();
}
inline void PlayerInfo::clear_rank() {
  _impl_.rank_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::openfoxwq::Rank PlayerInfo::_internal_rank() const {
  return static_cast< ::openfoxwq::Rank >(_impl_.rank_);
}
inline ::openfoxwq::Rank PlayerInfo::rank() const {
  // @@protoc_insertion_point(field_get:openfoxwq.PlayerInfo.rank)
  return _internal_rank();
}
inline void PlayerInfo::_internal_set_rank(::openfoxwq::Rank value) {
  assert(::openfoxwq::Rank_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.rank_ = value;
}
inline void PlayerInfo::set_rank(::openfoxwq::Rank value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:openfoxwq.PlayerInfo.rank)
}

// optional .openfoxwq.Country country = 5;
inline bool PlayerInfo::_internal_has_country() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PlayerInfo::has_country() const {
  return _internal_has_country();
}
inline void PlayerInfo::clear_country() {
  _impl_.country_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::openfoxwq::Country PlayerInfo::_internal_country() const {
  return static_cast< ::openfoxwq::Country >(_impl_.country_);
}
inline ::openfoxwq::Country PlayerInfo::country() const {
  // @@protoc_insertion_point(field_get:openfoxwq.PlayerInfo.country)
  return _internal_country();
}
inline void PlayerInfo::_internal_set_country(::openfoxwq::Country value) {
  assert(::openfoxwq::Country_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.country_ = value;
}
inline void PlayerInfo::set_country(::openfoxwq::Country value) {
  _internal_set_country(value);
  // @@protoc_insertion_point(field_set:openfoxwq.PlayerInfo.country)
}

// optional int64 club_id = 6;
inline bool PlayerInfo::_internal_has_club_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PlayerInfo::has_club_id() const {
  return _internal_has_club_id();
}
inline void PlayerInfo::clear_club_id() {
  _impl_.club_id_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int64_t PlayerInfo::_internal_club_id() const {
  return _impl_.club_id_;
}
inline int64_t PlayerInfo::club_id() const {
  // @@protoc_insertion_point(field_get:openfoxwq.PlayerInfo.club_id)
  return _internal_club_id();
}
inline void PlayerInfo::_internal_set_club_id(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.club_id_ = value;
}
inline void PlayerInfo::set_club_id(int64_t value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:openfoxwq.PlayerInfo.club_id)
}

// optional bool accepting_matches = 7;
inline bool PlayerInfo::_internal_has_accepting_matches() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PlayerInfo::has_accepting_matches() const {
  return _internal_has_accepting_matches();
}
inline void PlayerInfo::clear_accepting_matches() {
  _impl_.accepting_matches_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool PlayerInfo::_internal_accepting_matches() const {
  return _impl_.accepting_matches_;
}
inline bool PlayerInfo::accepting_matches() const {
  // @@protoc_insertion_point(field_get:openfoxwq.PlayerInfo.accepting_matches)
  return _internal_accepting_matches();
}
inline void PlayerInfo::_internal_set_accepting_matches(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.accepting_matches_ = value;
}
inline void PlayerInfo::set_accepting_matches(bool value) {
  _internal_set_accepting_matches(value);
  // @@protoc_insertion_point(field_set:openfoxwq.PlayerInfo.accepting_matches)
}

// optional .openfoxwq.PlayerStatus status = 9;
inline bool PlayerInfo::_internal_has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool PlayerInfo::has_status() const {
  return _internal_has_status();
}
inline void PlayerInfo::clear_status() {
  _impl_.status_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::openfoxwq::PlayerStatus PlayerInfo::_internal_status() const {
  return static_cast< ::openfoxwq::PlayerStatus >(_impl_.status_);
}
inline ::openfoxwq::PlayerStatus PlayerInfo::status() const {
  // @@protoc_insertion_point(field_get:openfoxwq.PlayerInfo.status)
  return _internal_status();
}
inline void PlayerInfo::_internal_set_status(::openfoxwq::PlayerStatus value) {
  assert(::openfoxwq::PlayerStatus_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.status_ = value;
}
inline void PlayerInfo::set_status(::openfoxwq::PlayerStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:openfoxwq.PlayerInfo.status)
}

// optional int64 ranked_wins = 10;
inline bool PlayerInfo::_internal_has_ranked_wins() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool PlayerInfo::has_ranked_wins() const {
  return _internal_has_ranked_wins();
}
inline void PlayerInfo::clear_ranked_wins() {
  _impl_.ranked_wins_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline int64_t PlayerInfo::_internal_ranked_wins() const {
  return _impl_.ranked_wins_;
}
inline int64_t PlayerInfo::ranked_wins() const {
  // @@protoc_insertion_point(field_get:openfoxwq.PlayerInfo.ranked_wins)
  return _internal_ranked_wins();
}
inline void PlayerInfo::_internal_set_ranked_wins(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.ranked_wins_ = value;
}
inline void PlayerInfo::set_ranked_wins(int64_t value) {
  _internal_set_ranked_wins(value);
  // @@protoc_insertion_point(field_set:openfoxwq.PlayerInfo.ranked_wins)
}

// optional int64 ranked_losses = 11;
inline bool PlayerInfo::_internal_has_ranked_losses() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool PlayerInfo::has_ranked_losses() const {
  return _internal_has_ranked_losses();
}
inline void PlayerInfo::clear_ranked_losses() {
  _impl_.ranked_losses_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline int64_t PlayerInfo::_internal_ranked_losses() const {
  return _impl_.ranked_losses_;
}
inline int64_t PlayerInfo::ranked_losses() const {
  // @@protoc_insertion_point(field_get:openfoxwq.PlayerInfo.ranked_losses)
  return _internal_ranked_losses();
}
inline void PlayerInfo::_internal_set_ranked_losses(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.ranked_losses_ = value;
}
inline void PlayerInfo::set_ranked_losses(int64_t value) {
  _internal_set_ranked_losses(value);
  // @@protoc_insertion_point(field_set:openfoxwq.PlayerInfo.ranked_losses)
}

// optional int64 fox_coin = 21;
inline bool PlayerInfo::_internal_has_fox_coin() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool PlayerInfo::has_fox_coin() const {
  return _internal_has_fox_coin();
}
inline void PlayerInfo::clear_fox_coin() {
  _impl_.fox_coin_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline int64_t PlayerInfo::_internal_fox_coin() const {
  return _impl_.fox_coin_;
}
inline int64_t PlayerInfo::fox_coin() const {
  // @@protoc_insertion_point(field_get:openfoxwq.PlayerInfo.fox_coin)
  return _internal_fox_coin();
}
inline void PlayerInfo::_internal_set_fox_coin(int64_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.fox_coin_ = value;
}
inline void PlayerInfo::set_fox_coin(int64_t value) {
  _internal_set_fox_coin(value);
  // @@protoc_insertion_point(field_set:openfoxwq.PlayerInfo.fox_coin)
}

// optional int64 unknown_field_8 = 8;
inline bool PlayerInfo::_internal_has_unknown_field_8() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PlayerInfo::has_unknown_field_8() const {
  return _internal_has_unknown_field_8();
}
inline void PlayerInfo::clear_unknown_field_8() {
  _impl_.unknown_field_8_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int64_t PlayerInfo::_internal_unknown_field_8() const {
  return _impl_.unknown_field_8_;
}
inline int64_t PlayerInfo::unknown_field_8() const {
  // @@protoc_insertion_point(field_get:openfoxwq.PlayerInfo.unknown_field_8)
  return _internal_unknown_field_8();
}
inline void PlayerInfo::_internal_set_unknown_field_8(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.unknown_field_8_ = value;
}
inline void PlayerInfo::set_unknown_field_8(int64_t value) {
  _internal_set_unknown_field_8(value);
  // @@protoc_insertion_point(field_set:openfoxwq.PlayerInfo.unknown_field_8)
}

// optional int64 unknown_field_13 = 13;
inline bool PlayerInfo::_internal_has_unknown_field_13() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool PlayerInfo::has_unknown_field_13() const {
  return _internal_has_unknown_field_13();
}
inline void PlayerInfo::clear_unknown_field_13() {
  _impl_.unknown_field_13_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline int64_t PlayerInfo::_internal_unknown_field_13() const {
  return _impl_.unknown_field_13_;
}
inline int64_t PlayerInfo::unknown_field_13() const {
  // @@protoc_insertion_point(field_get:openfoxwq.PlayerInfo.unknown_field_13)
  return _internal_unknown_field_13();
}
inline void PlayerInfo::_internal_set_unknown_field_13(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.unknown_field_13_ = value;
}
inline void PlayerInfo::set_unknown_field_13(int64_t value) {
  _internal_set_unknown_field_13(value);
  // @@protoc_insertion_point(field_set:openfoxwq.PlayerInfo.unknown_field_13)
}

// -------------------------------------------------------------------

// ExtraPlayerInfo

// optional int64 player_id = 1;
inline bool ExtraPlayerInfo::_internal_has_player_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ExtraPlayerInfo::has_player_id() const {
  return _internal_has_player_id();
}
inline void ExtraPlayerInfo::clear_player_id() {
  _impl_.player_id_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int64_t ExtraPlayerInfo::_internal_player_id() const {
  return _impl_.player_id_;
}
inline int64_t ExtraPlayerInfo::player_id() const {
  // @@protoc_insertion_point(field_get:openfoxwq.ExtraPlayerInfo.player_id)
  return _internal_player_id();
}
inline void ExtraPlayerInfo::_internal_set_player_id(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.player_id_ = value;
}
inline void ExtraPlayerInfo::set_player_id(int64_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:openfoxwq.ExtraPlayerInfo.player_id)
}

// optional .openfoxwq.GameResults current_results = 9;
inline bool ExtraPlayerInfo::_internal_has_current_results() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.current_results_ != nullptr);
  return value;
}
inline bool ExtraPlayerInfo::has_current_results() const {
  return _internal_has_current_results();
}
inline void ExtraPlayerInfo::clear_current_results() {
  if (_impl_.current_results_ != nullptr) _impl_.current_results_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::openfoxwq::GameResults& ExtraPlayerInfo::_internal_current_results() const {
  const ::openfoxwq::GameResults* p = _impl_.current_results_;
  return p != nullptr ? *p : reinterpret_cast<const ::openfoxwq::GameResults&>(
      ::openfoxwq::_GameResults_default_instance_);
}
inline const ::openfoxwq::GameResults& ExtraPlayerInfo::current_results() const {
  // @@protoc_insertion_point(field_get:openfoxwq.ExtraPlayerInfo.current_results)
  return _internal_current_results();
}
inline void ExtraPlayerInfo::unsafe_arena_set_allocated_current_results(
    ::openfoxwq::GameResults* current_results) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.current_results_);
  }
  _impl_.current_results_ = current_results;
  if (current_results) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openfoxwq.ExtraPlayerInfo.current_results)
}
inline ::openfoxwq::GameResults* ExtraPlayerInfo::release_current_results() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::openfoxwq::GameResults* temp = _impl_.current_results_;
  _impl_.current_results_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::openfoxwq::GameResults* ExtraPlayerInfo::unsafe_arena_release_current_results() {
  // @@protoc_insertion_point(field_release:openfoxwq.ExtraPlayerInfo.current_results)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::openfoxwq::GameResults* temp = _impl_.current_results_;
  _impl_.current_results_ = nullptr;
  return temp;
}
inline ::openfoxwq::GameResults* ExtraPlayerInfo::_internal_mutable_current_results() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.current_results_ == nullptr) {
    auto* p = CreateMaybeMessage<::openfoxwq::GameResults>(GetArenaForAllocation());
    _impl_.current_results_ = p;
  }
  return _impl_.current_results_;
}
inline ::openfoxwq::GameResults* ExtraPlayerInfo::mutable_current_results() {
  ::openfoxwq::GameResults* _msg = _internal_mutable_current_results();
  // @@protoc_insertion_point(field_mutable:openfoxwq.ExtraPlayerInfo.current_results)
  return _msg;
}
inline void ExtraPlayerInfo::set_allocated_current_results(::openfoxwq::GameResults* current_results) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.current_results_;
  }
  if (current_results) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(current_results);
    if (message_arena != submessage_arena) {
      current_results = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current_results, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.current_results_ = current_results;
  // @@protoc_insertion_point(field_set_allocated:openfoxwq.ExtraPlayerInfo.current_results)
}

// optional .openfoxwq.GameResults ranked_results = 10;
inline bool ExtraPlayerInfo::_internal_has_ranked_results() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ranked_results_ != nullptr);
  return value;
}
inline bool ExtraPlayerInfo::has_ranked_results() const {
  return _internal_has_ranked_results();
}
inline void ExtraPlayerInfo::clear_ranked_results() {
  if (_impl_.ranked_results_ != nullptr) _impl_.ranked_results_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::openfoxwq::GameResults& ExtraPlayerInfo::_internal_ranked_results() const {
  const ::openfoxwq::GameResults* p = _impl_.ranked_results_;
  return p != nullptr ? *p : reinterpret_cast<const ::openfoxwq::GameResults&>(
      ::openfoxwq::_GameResults_default_instance_);
}
inline const ::openfoxwq::GameResults& ExtraPlayerInfo::ranked_results() const {
  // @@protoc_insertion_point(field_get:openfoxwq.ExtraPlayerInfo.ranked_results)
  return _internal_ranked_results();
}
inline void ExtraPlayerInfo::unsafe_arena_set_allocated_ranked_results(
    ::openfoxwq::GameResults* ranked_results) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ranked_results_);
  }
  _impl_.ranked_results_ = ranked_results;
  if (ranked_results) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openfoxwq.ExtraPlayerInfo.ranked_results)
}
inline ::openfoxwq::GameResults* ExtraPlayerInfo::release_ranked_results() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::openfoxwq::GameResults* temp = _impl_.ranked_results_;
  _impl_.ranked_results_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::openfoxwq::GameResults* ExtraPlayerInfo::unsafe_arena_release_ranked_results() {
  // @@protoc_insertion_point(field_release:openfoxwq.ExtraPlayerInfo.ranked_results)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::openfoxwq::GameResults* temp = _impl_.ranked_results_;
  _impl_.ranked_results_ = nullptr;
  return temp;
}
inline ::openfoxwq::GameResults* ExtraPlayerInfo::_internal_mutable_ranked_results() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.ranked_results_ == nullptr) {
    auto* p = CreateMaybeMessage<::openfoxwq::GameResults>(GetArenaForAllocation());
    _impl_.ranked_results_ = p;
  }
  return _impl_.ranked_results_;
}
inline ::openfoxwq::GameResults* ExtraPlayerInfo::mutable_ranked_results() {
  ::openfoxwq::GameResults* _msg = _internal_mutable_ranked_results();
  // @@protoc_insertion_point(field_mutable:openfoxwq.ExtraPlayerInfo.ranked_results)
  return _msg;
}
inline void ExtraPlayerInfo::set_allocated_ranked_results(::openfoxwq::GameResults* ranked_results) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ranked_results_;
  }
  if (ranked_results) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ranked_results);
    if (message_arena != submessage_arena) {
      ranked_results = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ranked_results, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.ranked_results_ = ranked_results;
  // @@protoc_insertion_point(field_set_allocated:openfoxwq.ExtraPlayerInfo.ranked_results)
}

// optional .openfoxwq.GameResults free_results = 11;
inline bool ExtraPlayerInfo::_internal_has_free_results() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.free_results_ != nullptr);
  return value;
}
inline bool ExtraPlayerInfo::has_free_results() const {
  return _internal_has_free_results();
}
inline void ExtraPlayerInfo::clear_free_results() {
  if (_impl_.free_results_ != nullptr) _impl_.free_results_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::openfoxwq::GameResults& ExtraPlayerInfo::_internal_free_results() const {
  const ::openfoxwq::GameResults* p = _impl_.free_results_;
  return p != nullptr ? *p : reinterpret_cast<const ::openfoxwq::GameResults&>(
      ::openfoxwq::_GameResults_default_instance_);
}
inline const ::openfoxwq::GameResults& ExtraPlayerInfo::free_results() const {
  // @@protoc_insertion_point(field_get:openfoxwq.ExtraPlayerInfo.free_results)
  return _internal_free_results();
}
inline void ExtraPlayerInfo::unsafe_arena_set_allocated_free_results(
    ::openfoxwq::GameResults* free_results) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.free_results_);
  }
  _impl_.free_results_ = free_results;
  if (free_results) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openfoxwq.ExtraPlayerInfo.free_results)
}
inline ::openfoxwq::GameResults* ExtraPlayerInfo::release_free_results() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::openfoxwq::GameResults* temp = _impl_.free_results_;
  _impl_.free_results_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::openfoxwq::GameResults* ExtraPlayerInfo::unsafe_arena_release_free_results() {
  // @@protoc_insertion_point(field_release:openfoxwq.ExtraPlayerInfo.free_results)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::openfoxwq::GameResults* temp = _impl_.free_results_;
  _impl_.free_results_ = nullptr;
  return temp;
}
inline ::openfoxwq::GameResults* ExtraPlayerInfo::_internal_mutable_free_results() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.free_results_ == nullptr) {
    auto* p = CreateMaybeMessage<::openfoxwq::GameResults>(GetArenaForAllocation());
    _impl_.free_results_ = p;
  }
  return _impl_.free_results_;
}
inline ::openfoxwq::GameResults* ExtraPlayerInfo::mutable_free_results() {
  ::openfoxwq::GameResults* _msg = _internal_mutable_free_results();
  // @@protoc_insertion_point(field_mutable:openfoxwq.ExtraPlayerInfo.free_results)
  return _msg;
}
inline void ExtraPlayerInfo::set_allocated_free_results(::openfoxwq::GameResults* free_results) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.free_results_;
  }
  if (free_results) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(free_results);
    if (message_arena != submessage_arena) {
      free_results = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, free_results, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.free_results_ = free_results;
  // @@protoc_insertion_point(field_set_allocated:openfoxwq.ExtraPlayerInfo.free_results)
}

// -------------------------------------------------------------------

// GameResults

// required int64 wins = 1;
inline bool GameResults::_internal_has_wins() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GameResults::has_wins() const {
  return _internal_has_wins();
}
inline void GameResults::clear_wins() {
  _impl_.wins_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int64_t GameResults::_internal_wins() const {
  return _impl_.wins_;
}
inline int64_t GameResults::wins() const {
  // @@protoc_insertion_point(field_get:openfoxwq.GameResults.wins)
  return _internal_wins();
}
inline void GameResults::_internal_set_wins(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.wins_ = value;
}
inline void GameResults::set_wins(int64_t value) {
  _internal_set_wins(value);
  // @@protoc_insertion_point(field_set:openfoxwq.GameResults.wins)
}

// required int64 losses = 2;
inline bool GameResults::_internal_has_losses() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GameResults::has_losses() const {
  return _internal_has_losses();
}
inline void GameResults::clear_losses() {
  _impl_.losses_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int64_t GameResults::_internal_losses() const {
  return _impl_.losses_;
}
inline int64_t GameResults::losses() const {
  // @@protoc_insertion_point(field_get:openfoxwq.GameResults.losses)
  return _internal_losses();
}
inline void GameResults::_internal_set_losses(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.losses_ = value;
}
inline void GameResults::set_losses(int64_t value) {
  _internal_set_losses(value);
  // @@protoc_insertion_point(field_set:openfoxwq.GameResults.losses)
}

// required int64 draws = 3;
inline bool GameResults::_internal_has_draws() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GameResults::has_draws() const {
  return _internal_has_draws();
}
inline void GameResults::clear_draws() {
  _impl_.draws_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int64_t GameResults::_internal_draws() const {
  return _impl_.draws_;
}
inline int64_t GameResults::draws() const {
  // @@protoc_insertion_point(field_get:openfoxwq.GameResults.draws)
  return _internal_draws();
}
inline void GameResults::_internal_set_draws(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.draws_ = value;
}
inline void GameResults::set_draws(int64_t value) {
  _internal_set_draws(value);
  // @@protoc_insertion_point(field_set:openfoxwq.GameResults.draws)
}

// -------------------------------------------------------------------

// ExtendedGameResults

// required .openfoxwq.GameResultType typ = 1;
inline bool ExtendedGameResults::_internal_has_typ() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ExtendedGameResults::has_typ() const {
  return _internal_has_typ();
}
inline void ExtendedGameResults::clear_typ() {
  _impl_.typ_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::openfoxwq::GameResultType ExtendedGameResults::_internal_typ() const {
  return static_cast< ::openfoxwq::GameResultType >(_impl_.typ_);
}
inline ::openfoxwq::GameResultType ExtendedGameResults::typ() const {
  // @@protoc_insertion_point(field_get:openfoxwq.ExtendedGameResults.typ)
  return _internal_typ();
}
inline void ExtendedGameResults::_internal_set_typ(::openfoxwq::GameResultType value) {
  assert(::openfoxwq::GameResultType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.typ_ = value;
}
inline void ExtendedGameResults::set_typ(::openfoxwq::GameResultType value) {
  _internal_set_typ(value);
  // @@protoc_insertion_point(field_set:openfoxwq.ExtendedGameResults.typ)
}

// required int64 wins = 2;
inline bool ExtendedGameResults::_internal_has_wins() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ExtendedGameResults::has_wins() const {
  return _internal_has_wins();
}
inline void ExtendedGameResults::clear_wins() {
  _impl_.wins_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int64_t ExtendedGameResults::_internal_wins() const {
  return _impl_.wins_;
}
inline int64_t ExtendedGameResults::wins() const {
  // @@protoc_insertion_point(field_get:openfoxwq.ExtendedGameResults.wins)
  return _internal_wins();
}
inline void ExtendedGameResults::_internal_set_wins(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.wins_ = value;
}
inline void ExtendedGameResults::set_wins(int64_t value) {
  _internal_set_wins(value);
  // @@protoc_insertion_point(field_set:openfoxwq.ExtendedGameResults.wins)
}

// required int64 losses = 3;
inline bool ExtendedGameResults::_internal_has_losses() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ExtendedGameResults::has_losses() const {
  return _internal_has_losses();
}
inline void ExtendedGameResults::clear_losses() {
  _impl_.losses_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int64_t ExtendedGameResults::_internal_losses() const {
  return _impl_.losses_;
}
inline int64_t ExtendedGameResults::losses() const {
  // @@protoc_insertion_point(field_get:openfoxwq.ExtendedGameResults.losses)
  return _internal_losses();
}
inline void ExtendedGameResults::_internal_set_losses(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.losses_ = value;
}
inline void ExtendedGameResults::set_losses(int64_t value) {
  _internal_set_losses(value);
  // @@protoc_insertion_point(field_set:openfoxwq.ExtendedGameResults.losses)
}

// required int64 draws = 4;
inline bool ExtendedGameResults::_internal_has_draws() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ExtendedGameResults::has_draws() const {
  return _internal_has_draws();
}
inline void ExtendedGameResults::clear_draws() {
  _impl_.draws_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int64_t ExtendedGameResults::_internal_draws() const {
  return _impl_.draws_;
}
inline int64_t ExtendedGameResults::draws() const {
  // @@protoc_insertion_point(field_get:openfoxwq.ExtendedGameResults.draws)
  return _internal_draws();
}
inline void ExtendedGameResults::_internal_set_draws(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.draws_ = value;
}
inline void ExtendedGameResults::set_draws(int64_t value) {
  _internal_set_draws(value);
  // @@protoc_insertion_point(field_set:openfoxwq.ExtendedGameResults.draws)
}

// -------------------------------------------------------------------

// UnhandledMessage

// required string tag = 1;
inline bool UnhandledMessage::_internal_has_tag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UnhandledMessage::has_tag() const {
  return _internal_has_tag();
}
inline void UnhandledMessage::clear_tag() {
  _impl_.tag_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UnhandledMessage::tag() const {
  // @@protoc_insertion_point(field_get:openfoxwq.UnhandledMessage.tag)
  return _internal_tag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UnhandledMessage::set_tag(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.tag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:openfoxwq.UnhandledMessage.tag)
}
inline std::string* UnhandledMessage::mutable_tag() {
  std::string* _s = _internal_mutable_tag();
  // @@protoc_insertion_point(field_mutable:openfoxwq.UnhandledMessage.tag)
  return _s;
}
inline const std::string& UnhandledMessage::_internal_tag() const {
  return _impl_.tag_.Get();
}
inline void UnhandledMessage::_internal_set_tag(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.tag_.Set(value, GetArenaForAllocation());
}
inline std::string* UnhandledMessage::_internal_mutable_tag() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.tag_.Mutable(GetArenaForAllocation());
}
inline std::string* UnhandledMessage::release_tag() {
  // @@protoc_insertion_point(field_release:openfoxwq.UnhandledMessage.tag)
  if (!_internal_has_tag()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.tag_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tag_.IsDefault()) {
    _impl_.tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UnhandledMessage::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.tag_.SetAllocated(tag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tag_.IsDefault()) {
    _impl_.tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:openfoxwq.UnhandledMessage.tag)
}

// required string data = 2;
inline bool UnhandledMessage::_internal_has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UnhandledMessage::has_data() const {
  return _internal_has_data();
}
inline void UnhandledMessage::clear_data() {
  _impl_.data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& UnhandledMessage::data() const {
  // @@protoc_insertion_point(field_get:openfoxwq.UnhandledMessage.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UnhandledMessage::set_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.data_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:openfoxwq.UnhandledMessage.data)
}
inline std::string* UnhandledMessage::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:openfoxwq.UnhandledMessage.data)
  return _s;
}
inline const std::string& UnhandledMessage::_internal_data() const {
  return _impl_.data_.Get();
}
inline void UnhandledMessage::_internal_set_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* UnhandledMessage::_internal_mutable_data() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* UnhandledMessage::release_data() {
  // @@protoc_insertion_point(field_release:openfoxwq.UnhandledMessage.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UnhandledMessage::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:openfoxwq.UnhandledMessage.data)
}

// -------------------------------------------------------------------

// BroadcastRoomInfo_BroadcastRoomPlayerInfo

// optional string name = 1;
inline bool BroadcastRoomInfo_BroadcastRoomPlayerInfo::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BroadcastRoomInfo_BroadcastRoomPlayerInfo::has_name() const {
  return _internal_has_name();
}
inline void BroadcastRoomInfo_BroadcastRoomPlayerInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BroadcastRoomInfo_BroadcastRoomPlayerInfo::name() const {
  // @@protoc_insertion_point(field_get:openfoxwq.BroadcastRoomInfo.BroadcastRoomPlayerInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BroadcastRoomInfo_BroadcastRoomPlayerInfo::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:openfoxwq.BroadcastRoomInfo.BroadcastRoomPlayerInfo.name)
}
inline std::string* BroadcastRoomInfo_BroadcastRoomPlayerInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:openfoxwq.BroadcastRoomInfo.BroadcastRoomPlayerInfo.name)
  return _s;
}
inline const std::string& BroadcastRoomInfo_BroadcastRoomPlayerInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void BroadcastRoomInfo_BroadcastRoomPlayerInfo::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* BroadcastRoomInfo_BroadcastRoomPlayerInfo::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* BroadcastRoomInfo_BroadcastRoomPlayerInfo::release_name() {
  // @@protoc_insertion_point(field_release:openfoxwq.BroadcastRoomInfo.BroadcastRoomPlayerInfo.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BroadcastRoomInfo_BroadcastRoomPlayerInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:openfoxwq.BroadcastRoomInfo.BroadcastRoomPlayerInfo.name)
}

// optional string name_alt = 2;
inline bool BroadcastRoomInfo_BroadcastRoomPlayerInfo::_internal_has_name_alt() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BroadcastRoomInfo_BroadcastRoomPlayerInfo::has_name_alt() const {
  return _internal_has_name_alt();
}
inline void BroadcastRoomInfo_BroadcastRoomPlayerInfo::clear_name_alt() {
  _impl_.name_alt_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BroadcastRoomInfo_BroadcastRoomPlayerInfo::name_alt() const {
  // @@protoc_insertion_point(field_get:openfoxwq.BroadcastRoomInfo.BroadcastRoomPlayerInfo.name_alt)
  return _internal_name_alt();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BroadcastRoomInfo_BroadcastRoomPlayerInfo::set_name_alt(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.name_alt_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:openfoxwq.BroadcastRoomInfo.BroadcastRoomPlayerInfo.name_alt)
}
inline std::string* BroadcastRoomInfo_BroadcastRoomPlayerInfo::mutable_name_alt() {
  std::string* _s = _internal_mutable_name_alt();
  // @@protoc_insertion_point(field_mutable:openfoxwq.BroadcastRoomInfo.BroadcastRoomPlayerInfo.name_alt)
  return _s;
}
inline const std::string& BroadcastRoomInfo_BroadcastRoomPlayerInfo::_internal_name_alt() const {
  return _impl_.name_alt_.Get();
}
inline void BroadcastRoomInfo_BroadcastRoomPlayerInfo::_internal_set_name_alt(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.name_alt_.Set(value, GetArenaForAllocation());
}
inline std::string* BroadcastRoomInfo_BroadcastRoomPlayerInfo::_internal_mutable_name_alt() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.name_alt_.Mutable(GetArenaForAllocation());
}
inline std::string* BroadcastRoomInfo_BroadcastRoomPlayerInfo::release_name_alt() {
  // @@protoc_insertion_point(field_release:openfoxwq.BroadcastRoomInfo.BroadcastRoomPlayerInfo.name_alt)
  if (!_internal_has_name_alt()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.name_alt_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_alt_.IsDefault()) {
    _impl_.name_alt_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BroadcastRoomInfo_BroadcastRoomPlayerInfo::set_allocated_name_alt(std::string* name_alt) {
  if (name_alt != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.name_alt_.SetAllocated(name_alt, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_alt_.IsDefault()) {
    _impl_.name_alt_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:openfoxwq.BroadcastRoomInfo.BroadcastRoomPlayerInfo.name_alt)
}

// optional .openfoxwq.Rank rank = 3;
inline bool BroadcastRoomInfo_BroadcastRoomPlayerInfo::_internal_has_rank() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BroadcastRoomInfo_BroadcastRoomPlayerInfo::has_rank() const {
  return _internal_has_rank();
}
inline void BroadcastRoomInfo_BroadcastRoomPlayerInfo::clear_rank() {
  _impl_.rank_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::openfoxwq::Rank BroadcastRoomInfo_BroadcastRoomPlayerInfo::_internal_rank() const {
  return static_cast< ::openfoxwq::Rank >(_impl_.rank_);
}
inline ::openfoxwq::Rank BroadcastRoomInfo_BroadcastRoomPlayerInfo::rank() const {
  // @@protoc_insertion_point(field_get:openfoxwq.BroadcastRoomInfo.BroadcastRoomPlayerInfo.rank)
  return _internal_rank();
}
inline void BroadcastRoomInfo_BroadcastRoomPlayerInfo::_internal_set_rank(::openfoxwq::Rank value) {
  assert(::openfoxwq::Rank_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.rank_ = value;
}
inline void BroadcastRoomInfo_BroadcastRoomPlayerInfo::set_rank(::openfoxwq::Rank value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:openfoxwq.BroadcastRoomInfo.BroadcastRoomPlayerInfo.rank)
}

// optional .openfoxwq.Country country = 4;
inline bool BroadcastRoomInfo_BroadcastRoomPlayerInfo::_internal_has_country() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BroadcastRoomInfo_BroadcastRoomPlayerInfo::has_country() const {
  return _internal_has_country();
}
inline void BroadcastRoomInfo_BroadcastRoomPlayerInfo::clear_country() {
  _impl_.country_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::openfoxwq::Country BroadcastRoomInfo_BroadcastRoomPlayerInfo::_internal_country() const {
  return static_cast< ::openfoxwq::Country >(_impl_.country_);
}
inline ::openfoxwq::Country BroadcastRoomInfo_BroadcastRoomPlayerInfo::country() const {
  // @@protoc_insertion_point(field_get:openfoxwq.BroadcastRoomInfo.BroadcastRoomPlayerInfo.country)
  return _internal_country();
}
inline void BroadcastRoomInfo_BroadcastRoomPlayerInfo::_internal_set_country(::openfoxwq::Country value) {
  assert(::openfoxwq::Country_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.country_ = value;
}
inline void BroadcastRoomInfo_BroadcastRoomPlayerInfo::set_country(::openfoxwq::Country value) {
  _internal_set_country(value);
  // @@protoc_insertion_point(field_set:openfoxwq.BroadcastRoomInfo.BroadcastRoomPlayerInfo.country)
}

// -------------------------------------------------------------------

// BroadcastRoomInfo

// required int64 room_id = 1;
inline bool BroadcastRoomInfo::_internal_has_room_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BroadcastRoomInfo::has_room_id() const {
  return _internal_has_room_id();
}
inline void BroadcastRoomInfo::clear_room_id() {
  _impl_.room_id_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int64_t BroadcastRoomInfo::_internal_room_id() const {
  return _impl_.room_id_;
}
inline int64_t BroadcastRoomInfo::room_id() const {
  // @@protoc_insertion_point(field_get:openfoxwq.BroadcastRoomInfo.room_id)
  return _internal_room_id();
}
inline void BroadcastRoomInfo::_internal_set_room_id(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.room_id_ = value;
}
inline void BroadcastRoomInfo::set_room_id(int64_t value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:openfoxwq.BroadcastRoomInfo.room_id)
}

// required .openfoxwq.BroadcastRoomInfo.RoomType room_type = 3;
inline bool BroadcastRoomInfo::_internal_has_room_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool BroadcastRoomInfo::has_room_type() const {
  return _internal_has_room_type();
}
inline void BroadcastRoomInfo::clear_room_type() {
  _impl_.room_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::openfoxwq::BroadcastRoomInfo_RoomType BroadcastRoomInfo::_internal_room_type() const {
  return static_cast< ::openfoxwq::BroadcastRoomInfo_RoomType >(_impl_.room_type_);
}
inline ::openfoxwq::BroadcastRoomInfo_RoomType BroadcastRoomInfo::room_type() const {
  // @@protoc_insertion_point(field_get:openfoxwq.BroadcastRoomInfo.room_type)
  return _internal_room_type();
}
inline void BroadcastRoomInfo::_internal_set_room_type(::openfoxwq::BroadcastRoomInfo_RoomType value) {
  assert(::openfoxwq::BroadcastRoomInfo_RoomType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.room_type_ = value;
}
inline void BroadcastRoomInfo::set_room_type(::openfoxwq::BroadcastRoomInfo_RoomType value) {
  _internal_set_room_type(value);
  // @@protoc_insertion_point(field_set:openfoxwq.BroadcastRoomInfo.room_type)
}

// optional .openfoxwq.BroadcastRoomInfo.RoomState room_state = 8;
inline bool BroadcastRoomInfo::_internal_has_room_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool BroadcastRoomInfo::has_room_state() const {
  return _internal_has_room_state();
}
inline void BroadcastRoomInfo::clear_room_state() {
  _impl_.room_state_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::openfoxwq::BroadcastRoomInfo_RoomState BroadcastRoomInfo::_internal_room_state() const {
  return static_cast< ::openfoxwq::BroadcastRoomInfo_RoomState >(_impl_.room_state_);
}
inline ::openfoxwq::BroadcastRoomInfo_RoomState BroadcastRoomInfo::room_state() const {
  // @@protoc_insertion_point(field_get:openfoxwq.BroadcastRoomInfo.room_state)
  return _internal_room_state();
}
inline void BroadcastRoomInfo::_internal_set_room_state(::openfoxwq::BroadcastRoomInfo_RoomState value) {
  assert(::openfoxwq::BroadcastRoomInfo_RoomState_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.room_state_ = value;
}
inline void BroadcastRoomInfo::set_room_state(::openfoxwq::BroadcastRoomInfo_RoomState value) {
  _internal_set_room_state(value);
  // @@protoc_insertion_point(field_set:openfoxwq.BroadcastRoomInfo.room_state)
}

// optional string broadcaster = 9;
inline bool BroadcastRoomInfo::_internal_has_broadcaster() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BroadcastRoomInfo::has_broadcaster() const {
  return _internal_has_broadcaster();
}
inline void BroadcastRoomInfo::clear_broadcaster() {
  _impl_.broadcaster_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BroadcastRoomInfo::broadcaster() const {
  // @@protoc_insertion_point(field_get:openfoxwq.BroadcastRoomInfo.broadcaster)
  return _internal_broadcaster();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BroadcastRoomInfo::set_broadcaster(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.broadcaster_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:openfoxwq.BroadcastRoomInfo.broadcaster)
}
inline std::string* BroadcastRoomInfo::mutable_broadcaster() {
  std::string* _s = _internal_mutable_broadcaster();
  // @@protoc_insertion_point(field_mutable:openfoxwq.BroadcastRoomInfo.broadcaster)
  return _s;
}
inline const std::string& BroadcastRoomInfo::_internal_broadcaster() const {
  return _impl_.broadcaster_.Get();
}
inline void BroadcastRoomInfo::_internal_set_broadcaster(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.broadcaster_.Set(value, GetArenaForAllocation());
}
inline std::string* BroadcastRoomInfo::_internal_mutable_broadcaster() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.broadcaster_.Mutable(GetArenaForAllocation());
}
inline std::string* BroadcastRoomInfo::release_broadcaster() {
  // @@protoc_insertion_point(field_release:openfoxwq.BroadcastRoomInfo.broadcaster)
  if (!_internal_has_broadcaster()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.broadcaster_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.broadcaster_.IsDefault()) {
    _impl_.broadcaster_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BroadcastRoomInfo::set_allocated_broadcaster(std::string* broadcaster) {
  if (broadcaster != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.broadcaster_.SetAllocated(broadcaster, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.broadcaster_.IsDefault()) {
    _impl_.broadcaster_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:openfoxwq.BroadcastRoomInfo.broadcaster)
}

// required int64 online_count = 10;
inline bool BroadcastRoomInfo::_internal_has_online_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool BroadcastRoomInfo::has_online_count() const {
  return _internal_has_online_count();
}
inline void BroadcastRoomInfo::clear_online_count() {
  _impl_.online_count_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int64_t BroadcastRoomInfo::_internal_online_count() const {
  return _impl_.online_count_;
}
inline int64_t BroadcastRoomInfo::online_count() const {
  // @@protoc_insertion_point(field_get:openfoxwq.BroadcastRoomInfo.online_count)
  return _internal_online_count();
}
inline void BroadcastRoomInfo::_internal_set_online_count(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.online_count_ = value;
}
inline void BroadcastRoomInfo::set_online_count(int64_t value) {
  _internal_set_online_count(value);
  // @@protoc_insertion_point(field_set:openfoxwq.BroadcastRoomInfo.online_count)
}

// required int64 player_id_black = 11;
inline bool BroadcastRoomInfo::_internal_has_player_id_black() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool BroadcastRoomInfo::has_player_id_black() const {
  return _internal_has_player_id_black();
}
inline void BroadcastRoomInfo::clear_player_id_black() {
  _impl_.player_id_black_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int64_t BroadcastRoomInfo::_internal_player_id_black() const {
  return _impl_.player_id_black_;
}
inline int64_t BroadcastRoomInfo::player_id_black() const {
  // @@protoc_insertion_point(field_get:openfoxwq.BroadcastRoomInfo.player_id_black)
  return _internal_player_id_black();
}
inline void BroadcastRoomInfo::_internal_set_player_id_black(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.player_id_black_ = value;
}
inline void BroadcastRoomInfo::set_player_id_black(int64_t value) {
  _internal_set_player_id_black(value);
  // @@protoc_insertion_point(field_set:openfoxwq.BroadcastRoomInfo.player_id_black)
}

// required int64 player_id_white = 12;
inline bool BroadcastRoomInfo::_internal_has_player_id_white() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool BroadcastRoomInfo::has_player_id_white() const {
  return _internal_has_player_id_white();
}
inline void BroadcastRoomInfo::clear_player_id_white() {
  _impl_.player_id_white_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline int64_t BroadcastRoomInfo::_internal_player_id_white() const {
  return _impl_.player_id_white_;
}
inline int64_t BroadcastRoomInfo::player_id_white() const {
  // @@protoc_insertion_point(field_get:openfoxwq.BroadcastRoomInfo.player_id_white)
  return _internal_player_id_white();
}
inline void BroadcastRoomInfo::_internal_set_player_id_white(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.player_id_white_ = value;
}
inline void BroadcastRoomInfo::set_player_id_white(int64_t value) {
  _internal_set_player_id_white(value);
  // @@protoc_insertion_point(field_set:openfoxwq.BroadcastRoomInfo.player_id_white)
}

// required .openfoxwq.BroadcastRoomInfo.BroadcastRoomPlayerInfo player_info_black = 13;
inline bool BroadcastRoomInfo::_internal_has_player_info_black() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.player_info_black_ != nullptr);
  return value;
}
inline bool BroadcastRoomInfo::has_player_info_black() const {
  return _internal_has_player_info_black();
}
inline void BroadcastRoomInfo::clear_player_info_black() {
  if (_impl_.player_info_black_ != nullptr) _impl_.player_info_black_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo& BroadcastRoomInfo::_internal_player_info_black() const {
  const ::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo* p = _impl_.player_info_black_;
  return p != nullptr ? *p : reinterpret_cast<const ::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo&>(
      ::openfoxwq::_BroadcastRoomInfo_BroadcastRoomPlayerInfo_default_instance_);
}
inline const ::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo& BroadcastRoomInfo::player_info_black() const {
  // @@protoc_insertion_point(field_get:openfoxwq.BroadcastRoomInfo.player_info_black)
  return _internal_player_info_black();
}
inline void BroadcastRoomInfo::unsafe_arena_set_allocated_player_info_black(
    ::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo* player_info_black) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_info_black_);
  }
  _impl_.player_info_black_ = player_info_black;
  if (player_info_black) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openfoxwq.BroadcastRoomInfo.player_info_black)
}
inline ::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo* BroadcastRoomInfo::release_player_info_black() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo* temp = _impl_.player_info_black_;
  _impl_.player_info_black_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo* BroadcastRoomInfo::unsafe_arena_release_player_info_black() {
  // @@protoc_insertion_point(field_release:openfoxwq.BroadcastRoomInfo.player_info_black)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo* temp = _impl_.player_info_black_;
  _impl_.player_info_black_ = nullptr;
  return temp;
}
inline ::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo* BroadcastRoomInfo::_internal_mutable_player_info_black() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.player_info_black_ == nullptr) {
    auto* p = CreateMaybeMessage<::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo>(GetArenaForAllocation());
    _impl_.player_info_black_ = p;
  }
  return _impl_.player_info_black_;
}
inline ::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo* BroadcastRoomInfo::mutable_player_info_black() {
  ::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo* _msg = _internal_mutable_player_info_black();
  // @@protoc_insertion_point(field_mutable:openfoxwq.BroadcastRoomInfo.player_info_black)
  return _msg;
}
inline void BroadcastRoomInfo::set_allocated_player_info_black(::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo* player_info_black) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.player_info_black_;
  }
  if (player_info_black) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(player_info_black);
    if (message_arena != submessage_arena) {
      player_info_black = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_info_black, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.player_info_black_ = player_info_black;
  // @@protoc_insertion_point(field_set_allocated:openfoxwq.BroadcastRoomInfo.player_info_black)
}

// required .openfoxwq.BroadcastRoomInfo.BroadcastRoomPlayerInfo player_info_white = 14;
inline bool BroadcastRoomInfo::_internal_has_player_info_white() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.player_info_white_ != nullptr);
  return value;
}
inline bool BroadcastRoomInfo::has_player_info_white() const {
  return _internal_has_player_info_white();
}
inline void BroadcastRoomInfo::clear_player_info_white() {
  if (_impl_.player_info_white_ != nullptr) _impl_.player_info_white_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo& BroadcastRoomInfo::_internal_player_info_white() const {
  const ::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo* p = _impl_.player_info_white_;
  return p != nullptr ? *p : reinterpret_cast<const ::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo&>(
      ::openfoxwq::_BroadcastRoomInfo_BroadcastRoomPlayerInfo_default_instance_);
}
inline const ::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo& BroadcastRoomInfo::player_info_white() const {
  // @@protoc_insertion_point(field_get:openfoxwq.BroadcastRoomInfo.player_info_white)
  return _internal_player_info_white();
}
inline void BroadcastRoomInfo::unsafe_arena_set_allocated_player_info_white(
    ::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo* player_info_white) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_info_white_);
  }
  _impl_.player_info_white_ = player_info_white;
  if (player_info_white) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openfoxwq.BroadcastRoomInfo.player_info_white)
}
inline ::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo* BroadcastRoomInfo::release_player_info_white() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo* temp = _impl_.player_info_white_;
  _impl_.player_info_white_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo* BroadcastRoomInfo::unsafe_arena_release_player_info_white() {
  // @@protoc_insertion_point(field_release:openfoxwq.BroadcastRoomInfo.player_info_white)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo* temp = _impl_.player_info_white_;
  _impl_.player_info_white_ = nullptr;
  return temp;
}
inline ::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo* BroadcastRoomInfo::_internal_mutable_player_info_white() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.player_info_white_ == nullptr) {
    auto* p = CreateMaybeMessage<::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo>(GetArenaForAllocation());
    _impl_.player_info_white_ = p;
  }
  return _impl_.player_info_white_;
}
inline ::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo* BroadcastRoomInfo::mutable_player_info_white() {
  ::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo* _msg = _internal_mutable_player_info_white();
  // @@protoc_insertion_point(field_mutable:openfoxwq.BroadcastRoomInfo.player_info_white)
  return _msg;
}
inline void BroadcastRoomInfo::set_allocated_player_info_white(::openfoxwq::BroadcastRoomInfo_BroadcastRoomPlayerInfo* player_info_white) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.player_info_white_;
  }
  if (player_info_white) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(player_info_white);
    if (message_arena != submessage_arena) {
      player_info_white = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_info_white, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.player_info_white_ = player_info_white;
  // @@protoc_insertion_point(field_set_allocated:openfoxwq.BroadcastRoomInfo.player_info_white)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace openfoxwq

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::openfoxwq::BroadcastRoomInfo_RoomType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::openfoxwq::BroadcastRoomInfo_RoomType>() {
  return ::openfoxwq::BroadcastRoomInfo_RoomType_descriptor();
}
template <> struct is_proto_enum< ::openfoxwq::BroadcastRoomInfo_RoomState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::openfoxwq::BroadcastRoomInfo_RoomState>() {
  return ::openfoxwq::BroadcastRoomInfo_RoomState_descriptor();
}
template <> struct is_proto_enum< ::openfoxwq::Color> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::openfoxwq::Color>() {
  return ::openfoxwq::Color_descriptor();
}
template <> struct is_proto_enum< ::openfoxwq::Rank> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::openfoxwq::Rank>() {
  return ::openfoxwq::Rank_descriptor();
}
template <> struct is_proto_enum< ::openfoxwq::Country> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::openfoxwq::Country>() {
  return ::openfoxwq::Country_descriptor();
}
template <> struct is_proto_enum< ::openfoxwq::PlayerStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::openfoxwq::PlayerStatus>() {
  return ::openfoxwq::PlayerStatus_descriptor();
}
template <> struct is_proto_enum< ::openfoxwq::GameResultType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::openfoxwq::GameResultType>() {
  return ::openfoxwq::GameResultType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fcommon_2eproto
